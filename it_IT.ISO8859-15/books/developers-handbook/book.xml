<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//FreeBSD//DTD DocBook XML V5.0-Based Extension//EN" "http://www.FreeBSD.org/XML/share/xml/freebsd50.dtd" [
<!ENTITY % chapters SYSTEM "chapters.ent">
<!--
     Creates entities for each chapter in the FreeBSD Developer's
     Handbook. Each entity is named chap.foo, where foo is the value
     of the id attribute on that chapter, and corresponds to the name of
     the directory in which that chapter's .xml file is stored.

     Chapters should be listed in the order in which they are referenced.

     $FreeBSD: head/en_US.ISO8859-1/books/developers-handbook/chapters.ent 43126 2013-11-07 16:37:11Z gabor $
--><!-- Part one --><!ENTITY chap.introduction SYSTEM "introduction/chapter.xml">
<!ENTITY chap.tools SYSTEM "tools/chapter.xml">
<!ENTITY chap.secure SYSTEM "secure/chapter.xml">
<!ENTITY chap.l10n SYSTEM "l10n/chapter.xml">
<!ENTITY chap.policies SYSTEM "policies/chapter.xml">
<!ENTITY chap.testing SYSTEM "testing/chapter.xml">
<!-- Part two - IPC --><!ENTITY chap.sockets SYSTEM "sockets/chapter.xml">
<!ENTITY chap.ipv6 SYSTEM "ipv6/chapter.xml">
<!-- Part three - Kernel --><!ENTITY chap.kernelbuild SYSTEM "kernelbuild/chapter.xml">
<!ENTITY chap.kerneldebug SYSTEM "kerneldebug/chapter.xml">
<!-- Part five - Architectures --><!ENTITY chap.x86 SYSTEM "x86/chapter.xml">
<!-- Part six - Appendices --><!ENTITY chap.index "<index xmlns='http://docbook.org/ns/docbook'/>">
]>
<!--
     The FreeBSD Documentation Project

     $FreeBSD: head/en_US.ISO8859-1/books/developers-handbook/book.xml 51938 2018-06-30 10:45:14Z eadler $
-->
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:its="http://www.w3.org/2005/11/its" version="5.0" xml:lang="nb_NO">
  <info><title xml:lang="en">FreeBSD Developers' Handbook</title>
    

    <author xml:lang="en"><orgname>The FreeBSD Documentation Project</orgname></author>

    <pubdate xml:lang="en">$FreeBSD: head/en_US.ISO8859-1/books/developers-handbook/book.xml 51938 2018-06-30 10:45:14Z eadler $</pubdate>

    <copyright xml:lang="en">
      <year>2000</year>
      <year>2001</year>
      <year>2002</year>
      <year>2003</year>
      <year>2004</year>
      <year>2005</year>
      <year>2006</year>
      <year>2007</year>
      <year>2008</year>
      <year>2009</year>
      <year>2010</year>
      <year>2011</year>
      <year>2012</year>
      <year>2013</year>
      <year>2014</year>
      <year>2015</year>
      <year>2016</year>
      <year>2017</year>
      <year>2018</year>
      <holder>The FreeBSD Documentation Project</holder>
    </copyright>

    
<legalnotice xml:id="legalnotice">
  <title xml:lang="en">Copyright</title>

  <para xml:lang="en">Redistribution and use in source (XML DocBook) and 'compiled'
    forms (XML, HTML, PDF, PostScript, RTF and so forth) with or without
    modification, are permitted provided that the following conditions are
    met:</para>

  <orderedlist>
    <listitem>
      <para xml:lang="en">Redistributions of source code (XML DocBook) must retain the
        above copyright notice, this list of conditions and the following
        disclaimer as the first lines of this file unmodified.</para>
    </listitem>

    <listitem>
      <para xml:lang="en">Redistributions in compiled form (transformed to other DTDs,
        converted to PDF, PostScript, RTF and other formats) must
        reproduce the above copyright notice, this list of conditions and
        the following disclaimer in the documentation and/or other
        materials provided with the distribution.</para>
    </listitem>
  </orderedlist>

  <important>
    <para xml:lang="en">THIS DOCUMENTATION IS PROVIDED BY THE FREEBSD DOCUMENTATION
      PROJECT "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
      BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
      FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
      THE FREEBSD DOCUMENTATION PROJECT BE LIABLE FOR ANY DIRECT, INDIRECT,
      INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
      OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
      TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
      USE OF THIS DOCUMENTATION, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
      DAMAGE.</para>
  </important>
</legalnotice>


    <legalnotice xml:id="trademarks" role="trademarks">
      <para xml:lang="en">FreeBSD is a registered trademark of
  the FreeBSD Foundation.</para>
      <para xml:lang="en">Apple, AirPort, FireWire,
  iMac, iPhone, iPad,
  Mac, Macintosh, Mac OS,
  Quicktime, and TrueType are trademarks of Apple Inc.,
  registered in the U.S. and other countries.</para>
      <para xml:lang="en">IBM, AIX, OS/2,
  PowerPC, PS/2, S/390, and ThinkPad are
  trademarks of International Business Machines Corporation in the
  United States, other countries, or both.</para>
      <para xml:lang="en">IEEE, POSIX, and 802 are registered
  trademarks of Institute of Electrical and Electronics Engineers,
  Inc. in the United States.</para>
      <para xml:lang="en">Intel, Celeron, Centrino, Core, EtherExpress, i386,
  i486, Itanium, Pentium, and Xeon are trademarks or registered
  trademarks of Intel Corporation or its subsidiaries in the United
  States and other countries.</para>
      <para xml:lang="en">Linux is a registered trademark of
  Linus Torvalds.</para>
      <para xml:lang="en">Microsoft, IntelliMouse, MS-DOS,
  Outlook, Windows, Windows Media and Windows NT are either
  registered trademarks or trademarks of Microsoft Corporation in the
  United States and/or other countries.</para>
      <para xml:lang="en">Motif, OSF/1, and UNIX are
  registered trademarks and IT DialTone and The Open Group are
  trademarks of The Open Group in the United States and other
  countries.</para>
      <para xml:lang="en">Sun, Sun Microsystems, Java, Java
  Virtual Machine, JDK, JRE, JSP, JVM, Netra, OpenJDK,
  Solaris, StarOffice, SunOS
  and VirtualBox are trademarks or registered trademarks of
  Sun Microsystems, Inc. in the United States and other countries.</para>
      <para xml:lang="en">Many of the designations used by
  manufacturers and sellers to distinguish their products are claimed
  as trademarks.  Where those designations appear in this document,
  and the FreeBSD Project was aware of the trademark claim, the
  designations have been followed by the <quote>™</quote> or the
  <quote>®</quote> symbol.</para>
    </legalnotice>

    <releaseinfo xml:lang="en">$FreeBSD: head/en_US.ISO8859-1/books/developers-handbook/book.xml 51938 2018-06-30 10:45:14Z eadler $</releaseinfo>

    <abstract>
      <para xml:lang="en">Welcome to the Developers' Handbook.  This manual is a
	<emphasis>work in progress</emphasis> and is the work of many
	individuals.  Many sections do not yet exist and some of those
	that do exist need to be updated.  If you are interested in
	helping with this project, send email to the <link xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-doc">FreeBSD documentation project mailing list</link>.</para>

      <para xml:lang="en">The latest version of this document is always available
        from the <link xlink:href="@@URL_RELPREFIX@@/index.html">FreeBSD World
        Wide Web server</link>.  It may also be downloaded in a
        variety of formats and compression options from the <link xlink:href="https://download.freebsd.org/ftp/doc/">FreeBSD FTP
        server</link> or one of the numerous <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/books/handbook/mirrors-ftp.html">mirror
        sites</link>.</para>
    </abstract>
  </info>

  <part xml:id="Basics">
    <title xml:lang="en">Basics</title>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD: head/en_US.ISO8859-1/books/developers-handbook/introduction/chapter.xml 51938 2018-06-30 10:45:14Z eadler $
-->
<chapter version="5.0" xml:id="introduction">
  <info><title xml:lang="en">Introduction</title>
    <authorgroup>
      <author xml:lang="en"><personname><firstname>Murray</firstname><surname>Stokely</surname></personname><contrib>Contributed by </contrib></author>
      <author xml:lang="en"><personname><firstname>Jeroen</firstname><surname>Ruigrok van der Werven</surname></personname></author>
    </authorgroup>
  </info>
  

  <sect1 xml:id="introduction-devel">
    <title xml:lang="en">Developing on FreeBSD</title>

    <para xml:lang="en">So here we are.  System all installed and you are ready to
      start programming.  But where to start?  What does FreeBSD
      provide?  What can it do for me, as a programmer?</para>

    <para xml:lang="en">These are some questions which this chapter tries to answer.
      Of course, programming has different levels of proficiency like
      any other trade.  For some it is a hobby, for others it is their
      profession.  The information in this chapter might be aimed
      toward the beginning programmer; indeed, it could serve useful
      for the programmer unfamiliar with the FreeBSD platform.</para>
  </sect1>

  <sect1 xml:id="introduction-bsdvision">
    <title xml:lang="en">The BSD Vision</title>

    <para xml:lang="en">To produce the best <trademark class="registered">UNIX</trademark> like operating system package
      possible, with due respect to the original software tools
      ideology as well as usability, performance and
      stability.</para>
  </sect1>

  <sect1 xml:id="introduction-archguide">
    <title xml:lang="en">Architectural Guidelines</title>

    <para xml:lang="en">Our ideology can be described by the following
      guidelines</para>

    <itemizedlist>

      <listitem>
	<para xml:lang="en">Do not add new functionality unless an implementor
	  cannot complete a real application without it.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">It is as important to decide what a system is
	  not as to decide what it is.  Do not serve all the world's
	  needs; rather, make the system extensible so that additional
	  needs can be met in an upwardly compatible
	  fashion.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">The only thing worse than generalizing from one example
	  is generalizing from no examples at all.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">If a problem is not completely understood, it is
	  probably best to provide no solution at all.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">If you can get 90 percent of the desired effect for 10
	  percent of the work, use the simpler solution.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Isolate complexity as much as possible.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Provide mechanism, rather than policy.  In particular,
	  place user interface policy in the client's hands.</para>
      </listitem>
    </itemizedlist>

    <para xml:lang="en">From Scheifler &amp; Gettys: "X Window System"</para>
  </sect1>

  <sect1 xml:id="introduction-layout">
    <title xml:lang="en">The Layout of
      <filename>/usr/src</filename></title>

    <para xml:lang="en">The complete source code to FreeBSD is available from our
      public repository.  The source code is normally installed in
      <filename>/usr/src</filename> which contains
      the following subdirectories:</para>

    <para>
      <informaltable frame="none" pgwide="1">
	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry xml:lang="en">Directory</entry>
	      <entry xml:lang="en">Description</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry xml:lang="en"><filename>bin/</filename></entry>
	      <entry xml:lang="en">Source for files in
		<filename>/bin</filename></entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>cddl/</filename></entry>
	      <entry xml:lang="en">Utilities covered by the Common Development and
		Distribution License</entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>contrib/</filename></entry>
	      <entry xml:lang="en">Source for files from contributed
		software.</entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>crypto/</filename></entry>
	      <entry xml:lang="en">Cryptographical sources</entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>etc/</filename></entry>
	      <entry xml:lang="en">Source for files in <filename>/etc</filename></entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>gnu/</filename></entry>
	      <entry xml:lang="en">Utilities covered by the GNU Public
		License</entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>include/</filename></entry>
	      <entry xml:lang="en">Source for files in <filename>/usr/include</filename></entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>kerberos5/</filename></entry>
	      <entry xml:lang="en">Source for Kerberos version 5</entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>lib/</filename></entry>
	      <entry xml:lang="en">Source for files in <filename>/usr/lib</filename></entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>libexec/</filename></entry>
	      <entry xml:lang="en">Source for files in <filename>/usr/libexec</filename></entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>release/</filename></entry>
	      <entry xml:lang="en">Files required to produce a FreeBSD
		release</entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>rescue/</filename></entry>
	      <entry xml:lang="en">Build system for the
		<filename>/rescue</filename>
		utilities</entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>sbin/</filename></entry>
	      <entry xml:lang="en">Source for files in <filename>/sbin</filename></entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>secure/</filename></entry>
	      <entry xml:lang="en">Contributed cryptographic sources</entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>share/</filename></entry>
	      <entry xml:lang="en">Source for files in <filename>/usr/share</filename></entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>sys/</filename></entry>
	      <entry xml:lang="en">Kernel source files</entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>tests/</filename></entry>
	      <entry xml:lang="en">The FreeBSD test suite</entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>tools/</filename></entry>
	      <entry xml:lang="en">Tools used for maintenance and testing of
		FreeBSD</entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>usr.bin/</filename></entry>
	      <entry xml:lang="en">Source for files in <filename>/usr/bin</filename></entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><filename>usr.sbin/</filename></entry>
	      <entry xml:lang="en">Source for files in <filename>/usr/sbin</filename></entry>
	    </row>
	  </tbody>
	</tgroup>
      </informaltable></para>
  </sect1>
</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD: head/en_US.ISO8859-1/books/developers-handbook/tools/chapter.xml 52141 2018-08-16 15:59:00Z bcr $
-->
<chapter version="5.0" xml:id="tools">
  <info>
    <title xml:lang="en">Programming Tools</title>

    <authorgroup>
      <author xml:lang="en">
	<personname>
	  <firstname>James</firstname>
	  <surname>Raynard</surname>
	</personname>
	<contrib>Contributed by </contrib>
      </author>
      <author xml:lang="en">
	<personname>
	  <firstname>Murray</firstname>
	  <surname>Stokely</surname>
	</personname>
      </author>
    </authorgroup>
  </info>

  <sect1 xml:id="tools-synopsis">
    <title xml:lang="en">Synopsis</title>

    <para xml:lang="en">This chapter is an introduction to using some of the
      programming tools supplied with FreeBSD, although much of it
      will be applicable to many other versions of <trademark class="registered">UNIX</trademark>.  It does
      <emphasis>not</emphasis> attempt to describe coding in any
      detail.  Most of the chapter assumes little or no previous
      programming knowledge, although it is hoped that most
      programmers will find something of value in it.</para>
  </sect1>

  <sect1 xml:id="tools-intro">
    <title xml:lang="en">Introduction</title>

    <para xml:lang="en">FreeBSD offers an excellent development environment.
      Compilers for C and C++ and an assembler come with the basic
      system, not to mention classic <trademark class="registered">UNIX</trademark> tools such as
      <command>sed</command> and <command>awk</command>.  If that is
      not enough, there are many more compilers and interpreters in
      the Ports collection.  The following section, <link linkend="tools-programming">Introduction to
	Programming</link>, lists some of the available options.
      FreeBSD is very compatible with standards such as
      <acronym><trademark class="registered">POSIX</trademark></acronym> and <acronym>ANSI</acronym> C, as
      well with its own BSD heritage, so it is possible to write
      applications that will compile and run with little or no
      modification on a wide range of platforms.</para>

    <para xml:lang="en">However, all this power can be rather overwhelming at first
      if you have never written programs on a <trademark class="registered">UNIX</trademark> platform before.
      This document aims to help you get up and running, without
      getting too deeply into more advanced topics.  The intention is
      that this document should give you enough of the basics to be
      able to make some sense of the documentation.</para>

    <para xml:lang="en">Most of the document requires little or no knowledge of
      programming, although it does assume a basic competence with
      using <trademark class="registered">UNIX</trademark> and a willingness to learn!</para>

  </sect1>

  <sect1 xml:id="tools-programming">
    <title xml:lang="en">Introduction to Programming</title>

    <para xml:lang="en">A program is a set of instructions that tell the computer to
      do various things; sometimes the instruction it has to perform
      depends on what happened when it performed a previous
      instruction.  This section gives an overview of the two main
      ways in which you can give these instructions, or
      <quote>commands</quote> as they are usually called.  One way
      uses an <firstterm>interpreter</firstterm>, the other a
      <firstterm>compiler</firstterm>.  As human languages are too
      difficult for a computer to understand in an unambiguous way,
      commands are usually written in one or other languages specially
      designed for the purpose.</para>

    <sect2>
      <title xml:lang="en">Interpreters</title>

      <para xml:lang="en">With an interpreter, the language comes as an environment,
	where you type in commands at a prompt and the environment
	executes them for you.  For more complicated programs, you can
	type the commands into a file and get the interpreter to load
	the file and execute the commands in it.  If anything goes
	wrong, many interpreters will drop you into a debugger to help
	you track down the problem.</para>

      <para xml:lang="en">The advantage of this is that you can see the results of
	your commands immediately, and mistakes can be corrected
	readily.  The biggest disadvantage comes when you want to
	share your programs with someone.  They must have the same
	interpreter, or you must have some way of giving it to them,
	and they need to understand how to use it.  Also users may not
	appreciate being thrown into a debugger if they press the
	wrong key! From a performance point of view, interpreters can
	use up a lot of memory, and generally do not generate code as
	efficiently as compilers.</para>

      <para xml:lang="en">In my opinion, interpreted languages are the best way to
	start if you have not done any programming before.  This kind
	of environment is typically found with languages like Lisp,
	Smalltalk, Perl and Basic.  It could also be argued that the
	<trademark class="registered">UNIX</trademark> shell (<command>sh</command>, <command>csh</command>)
	is itself an interpreter, and many people do in fact write
	shell <quote>scripts</quote> to help with various
	<quote>housekeeping</quote> tasks on their machine.  Indeed,
	part of the original <trademark class="registered">UNIX</trademark> philosophy was to provide lots of
	small utility programs that could be linked together in shell
	scripts to perform useful tasks.</para>
    </sect2>

    <sect2>
      <title xml:lang="en">Interpreters Available with FreeBSD</title>

      <para xml:lang="en">Here is a list of interpreters that are available from the
	FreeBSD Ports Collection, with a brief discussion of some of the
	more popular interpreted languages.</para>

      <para xml:lang="en">Instructions on how to get and install applications from
	the Ports Collection can be found in the <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/books/handbook/ports-using.html">Ports
	  section</link> of the handbook.</para>

      <variablelist>
	<varlistentry>
	  <term xml:lang="en"><acronym>BASIC</acronym></term>

	  <listitem>
	    <para xml:lang="en">Short for Beginner's All-purpose Symbolic
	      Instruction Code.  Developed in the 1950s for teaching
	      University students to program and provided with every
	      self-respecting personal computer in the 1980s,
	      <acronym>BASIC</acronym> has been the first programming
	      language for many programmers.  It is also the
	      foundation for Visual Basic.</para>

	    <para xml:lang="en">The Bywater Basic Interpreter can be found in the
	      Ports Collection as <package>lang/bwbasic</package> and
	      the Phil Cockroft's Basic Interpreter (formerly Rabbit
	      Basic) is available as
	      <package>lang/pbasic</package>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en">Lisp</term>

	  <listitem>
	    <para xml:lang="en">A language that was developed in the late 1950s as
	      an alternative to the <quote>number-crunching</quote>
	      languages that were popular at the time.  Instead of
	      being based on numbers, Lisp is based on lists; in fact,
	      the name is short for <quote>List Processing</quote>.
	      It is very popular in <acronym>AI</acronym> (Artificial
	      Intelligence) circles.</para>

	    <para xml:lang="en">Lisp is an extremely powerful and sophisticated
	      language, but can be rather large and unwieldy.</para>

	    <para xml:lang="en">Various implementations of Lisp that can run on
	      <trademark class="registered">UNIX</trademark> systems are available in the Ports Collection for
	      FreeBSD.  GNU Common Lisp can be found as
	      <package>lang/gcl</package>.  CLISP by Bruno Haible and
	      Michael Stoll is available as
	      <package>lang/clisp</package>.  For CMUCL, which
	      includes a highly-optimizing compiler too, or simpler
	      Lisp implementations like SLisp, which implements most
	      of the Common Lisp constructs in a few hundred lines of
	      C code, <package>lang/cmucl</package> and
	      <package>lang/slisp</package> are available
	      respectively.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en">Perl</term>

	  <listitem>
	    <para xml:lang="en">Very popular with system administrators for writing
	      scripts; also often used on World Wide Web servers for
	      writing <acronym>CGI</acronym> scripts.</para>

	    <para xml:lang="en">Perl is available in the Ports Collection as
	      <package>lang/perl5.24</package> for all
	      FreeBSD releases.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en">Scheme</term>

	  <listitem>
	    <para xml:lang="en">A dialect of Lisp that is rather more compact and
	      cleaner than Common Lisp.  Popular in Universities as it
	      is simple enough to teach to undergraduates as a first
	      language, while it has a high enough level of
	      abstraction to be used in research work.</para>

	    <para xml:lang="en">Scheme is available from the Ports Collection as
	      <package>lang/elk</package> for the
		Elk Scheme Interpreter.  The MIT Scheme Interpreter
		can be found in
		<package>lang/mit-scheme</package>
		and the SCM Scheme Interpreter in
		<package>lang/scm</package>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en">Icon</term>

	  <listitem>
	    <para xml:lang="en">Icon is a high-level language with extensive
	      facilities for processing strings and structures.
	      The version of Icon for FreeBSD can be found in the
	      Ports Collection as
	      <package>lang/icon</package>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en">Logo</term>

	  <listitem>
	    <para xml:lang="en">Logo is a language that is easy to learn, and has
	      been used as an introductory programming language in
	      various courses.  It is an excellent tool to work with
	      when teaching programming to smaller age groups, as it
	      makes creation of elaborate geometric shapes an easy
	      task.</para>

	    <para xml:lang="en">The latest version of Logo for FreeBSD is available
	      from the Ports Collection in
	      <package>lang/logo</package>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en">Python</term>

	  <listitem>
	    <para xml:lang="en">Python is an Object-Oriented, interpreted language.
	      Its advocates argue that it is one of the best languages
	      to start programming with, since it is relatively easy
	      to start with, but is not limited in comparison to other
	      popular interpreted languages that are used for the
	      development of large, complex applications (Perl and Tcl
	      are two other languages that are popular for such
	      tasks).</para>

	    <para xml:lang="en">The latest version of Python is available from the
	      Ports Collection in
	      <package>lang/python</package>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en">Ruby</term>

	  <listitem>
	    <para xml:lang="en">Ruby is an interpreter, pure object-oriented
	      programming language.  It has become widely popular
	      because of its easy to understand syntax, flexibility
	      when writing code, and the ability to easily develop and
	      maintain large, complex programs.</para>

	    <para xml:lang="en">Ruby is available from the Ports Collection as
	      <package>lang/ruby25</package>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en">Tcl and Tk</term>

	  <listitem>
	    <para xml:lang="en">Tcl is an embeddable, interpreted language, that has
	      become widely used and became popular mostly because of
	      its portability to many platforms.  It can be used both
	      for quickly writing small, prototype applications, or
	      (when combined with Tk, a GUI toolkit) fully-fledged,
	      featureful programs.</para>

	    <para xml:lang="en">Various versions of Tcl are available as ports for
	      FreeBSD.  The latest version, Tcl 8.5, can be found in
	      <package>lang/tcl87</package>.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2>
      <title xml:lang="en">Compilers</title>

      <para xml:lang="en">Compilers are rather different.  First of all, you write
	your code in a file (or files) using an editor.  You then run
	the compiler and see if it accepts your program.  If it did
	not compile, grit your teeth and go back to the editor; if it
	did compile and gave you a program, you can run it either at a
	shell command prompt or in a debugger to see if it works
	properly.<footnote><para xml:lang="en">If you run it in the shell, you may
	    get a core dump.</para></footnote></para>

      <para xml:lang="en">Obviously, this is not quite as direct as using an
	interpreter.  However it allows you to do a lot of things
	which are very difficult or even impossible with an
	interpreter, such as writing code which interacts closely with
	the operating system—or even writing your own operating
	system! It is also useful if you need to write very efficient
	code, as the compiler can take its time and optimize the code,
	which would not be acceptable in an interpreter.  Moreover,
	distributing a program written for a compiler is usually more
	straightforward than one written for an interpreter—you
	can just give them a copy of the executable, assuming they
	have the same operating system as you.</para>

      <para xml:lang="en">As the edit-compile-run-debug cycle is rather tedious when
	using separate programs, many commercial compiler makers have
	produced Integrated Development Environments
	(<acronym>IDE</acronym>s for short).  FreeBSD does not include
	an IDE in the base system, but
	<package>devel/kdevelop</package> is available in the Ports
	Collection and many use <application>Emacs</application> for
	this purpose.  Using <application>Emacs</application> as an
	IDE is discussed in <xref linkend="emacs"/>.</para>
    </sect2>
  </sect1>


  <sect1 xml:id="tools-compiling">
    <title xml:lang="en">Compiling with <command>cc</command></title>

    <para xml:lang="en">This section deals with the <application>gcc</application>
      and <application>clang</application> compilers for C and C++,
      since they come with the FreeBSD base system.  Starting with
      FreeBSD 10.X <command>clang</command> is installed as
      <command>cc</command>.  The details of producing a program with
      an interpreter vary considerably between interpreters, and are
      usually well covered in the documentation and on-line help for
      the interpreter.</para>

    <para xml:lang="en">Once you have written your masterpiece, the next step is to
      convert it into something that will (hopefully!) run on FreeBSD.
      This usually involves several steps, each of which is done by a
      separate program.</para>

    <procedure>
      <step>
	<para xml:lang="en">Pre-process your source code to remove comments and do
	  other tricks like expanding macros in C.</para>
      </step>

      <step>
	<para xml:lang="en">Check the syntax of your code to see if you have obeyed
	  the rules of the language.  If you have not, it will
	  complain!</para>
      </step>

      <step>
	<para xml:lang="en">Convert the source code into assembly
	  language—this is very close to machine code, but still
	  understandable by humans.  Allegedly.</para>
      </step>

      <step>
	<para xml:lang="en">Convert the assembly language into machine
	  code—yep, we are talking bits and bytes, ones and
	  zeros here.</para>
      </step>

      <step>
	<para xml:lang="en">Check that you have used things like functions and
	  global variables in a consistent way.  For example, if you
	  have called a non-existent function, it will
	  complain.</para>
      </step>

      <step>
	<para xml:lang="en">If you are trying to produce an executable from several
	  source code files, work out how to fit them all
	  together.</para>
      </step>

      <step>
	<para xml:lang="en">Work out how to produce something that the system's
	  run-time loader will be able to load into memory and
	  run.</para>
      </step>

      <step>
	<para xml:lang="en">Finally, write the executable on the filesystem.</para>
      </step>
    </procedure>

    <para xml:lang="en">The word <firstterm>compiling</firstterm> is often used to
      refer to just steps 1 to 4—the others are referred to as
      <firstterm>linking</firstterm>.  Sometimes step 1 is referred to
      as <firstterm>pre-processing</firstterm> and steps 3-4 as
      <firstterm>assembling</firstterm>.</para>

    <para xml:lang="en">Fortunately, almost all this detail is hidden from you, as
      <command>cc</command> is a front end that manages calling all
      these programs with the right arguments for you; simply
      typing</para>

    <screen xml:lang="en"><prompt>%</prompt> <userinput>cc foobar.c</userinput></screen>

    <para xml:lang="en">will cause <filename>foobar.c</filename> to be compiled by
      all the steps above.  If you have more than one file to compile,
      just do something like</para>

    <screen xml:lang="en"><prompt>%</prompt> <userinput>cc foo.c bar.c</userinput></screen>

    <para xml:lang="en">Note that the syntax checking is just that—checking
      the syntax.  It will not check for any logical mistakes you may
      have made, like putting the program into an infinite loop, or
      using a bubble sort when you meant to use a binary
      sort.<footnote><para xml:lang="en">In case you did not know, a binary sort is
	  an efficient way of sorting things into order and a bubble
	  sort is not.</para></footnote></para>

    <para xml:lang="en">There are lots and lots of options for
      <command>cc</command>, which are all in the manual page.  Here
      are a few of the most important ones, with examples of how to
      use them.</para>

    <variablelist>
      <varlistentry>
	<term xml:lang="en">
	  <option>-o <replaceable>filename</replaceable></option>
	</term>

	<listitem>
	  <para xml:lang="en">The output name of the file.  If you do not use this
	    option, <command>cc</command> will produce an executable
	    called <filename>a.out</filename>.<footnote><para xml:lang="en">The
		reasons for this are buried in the mists of
		history.</para></footnote></para>

	  <informalexample>
	    <screen xml:lang="en"><prompt>%</prompt> <userinput>cc foobar.c</userinput>               <lineannotation>executable is a.out</lineannotation>
<prompt>%</prompt> <userinput>cc -o foobar foobar.c</userinput>     <lineannotation>executable is foobar</lineannotation></screen>
	  </informalexample>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term xml:lang="en"><option>-c</option></term>

	<listitem>
	  <para xml:lang="en">Just compile the file, do not link it.  Useful for toy
	    programs where you just want to check the syntax, or if
	    you are using a <filename>Makefile</filename>.</para>

	  <informalexample>
	    <screen xml:lang="en"><prompt>%</prompt> <userinput>cc -c foobar.c</userinput></screen>
	  </informalexample>

	  <para xml:lang="en">This will produce an <firstterm>object
	      file</firstterm> (not an executable) called
	    <filename>foobar.o</filename>.  This can be linked
	    together with other object files into an
	    executable.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term xml:lang="en"><option>-g</option></term>

	<listitem>
	  <para xml:lang="en">Create a debug version of the executable.  This makes
	    the compiler put information into the executable about
	    which line of which source file corresponds to which
	    function call.  A debugger can use this information to
	    show the source code as you step through the program,
	    which is <emphasis>very</emphasis> useful; the
	    disadvantage is that all this extra information makes the
	    program much bigger.  Normally, you compile with
	    <option>-g</option> while you are developing a program and
	    then compile a <quote>release version</quote> without
	    <option>-g</option> when you are satisfied it works
	    properly.</para>

	  <informalexample>
	    <screen xml:lang="en"><prompt>%</prompt> <userinput>cc -g foobar.c</userinput></screen>
	  </informalexample>

	  <para xml:lang="en">This will produce a debug version of the
	    program.

	    <footnote>
	      <para xml:lang="en">Note, we did not use the <option>-o</option> flag
		to specify the executable name, so we will get an
		executable called <filename>a.out</filename>.
		Producing a debug version called
		<filename>foobar</filename> is left as an exercise for
		the reader!</para></footnote></para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term xml:lang="en"><option>-O</option></term>

	<listitem>
	  <para xml:lang="en">Create an optimized version of the executable.  The
	    compiler performs various clever tricks to try to produce
	    an executable that runs faster than normal.  You can add a
	    number after the <option>-O</option> to specify a higher
	    level of optimization, but this often exposes bugs in the
	    compiler's optimizer.</para>

	  <informalexample>
	    <screen xml:lang="en"><prompt>%</prompt> <userinput>cc -O -o foobar foobar.c</userinput></screen>
	  </informalexample>

	  <para xml:lang="en">This will produce an optimized version of
	    <filename>foobar</filename>.</para>
	</listitem>
      </varlistentry>
    </variablelist>

    <para xml:lang="en">The following three flags will force <command>cc</command>
      to check that your code complies to the relevant international
      standard, often referred to as the <acronym>ANSI</acronym>
      standard, though strictly speaking it is an
      <acronym>ISO</acronym> standard.</para>

    <variablelist>
      <varlistentry>
	<term xml:lang="en"><option>-Wall</option></term>

	<listitem>
	  <para xml:lang="en">Enable all the warnings which the authors of
	    <command>cc</command> believe are worthwhile.  Despite the
	    name, it will not enable all the warnings
	    <command>cc</command> is capable of.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term xml:lang="en"><option>-ansi</option></term>

	<listitem>
	  <para xml:lang="en">Turn off most, but not all, of the
	    non-<acronym>ANSI</acronym> C features provided by
	    <command>cc</command>.  Despite the name, it does not
	    guarantee strictly that your code will comply to the
	    standard.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term xml:lang="en"><option>-pedantic</option></term>

	<listitem>
	  <para xml:lang="en">Turn off <emphasis>all</emphasis>
	    <command>cc</command>'s non-<acronym>ANSI</acronym> C
	    features.</para>
	</listitem>
      </varlistentry>
    </variablelist>

    <para xml:lang="en">Without these flags, <command>cc</command> will allow you to
      use some of its non-standard extensions to the standard.  Some
      of these are very useful, but will not work with other
      compilers—in fact, one of the main aims of the standard is
      to allow people to write code that will work with any compiler
      on any system.  This is known as <firstterm>portable
	code</firstterm>.</para>

    <para xml:lang="en">Generally, you should try to make your code as portable as
      possible, as otherwise you may have to completely rewrite the
      program later to get it to work somewhere else—and who
      knows what you may be using in a few years time?</para>

    <informalexample>
      <screen xml:lang="en"><prompt>%</prompt> <userinput>cc -Wall -ansi -pedantic -o foobar foobar.c</userinput></screen>
    </informalexample>

    <para xml:lang="en">This will produce an executable <filename>foobar</filename>
      after checking <filename>foobar.c</filename> for standard
      compliance.</para>

    <variablelist>
      <varlistentry>
	<term xml:lang="en"><option>-l<replaceable>library</replaceable></option></term>

	<listitem>
	  <para xml:lang="en">Specify a function library to be used at link
	    time.</para>

	  <para xml:lang="en">The most common example of this is when compiling a
	    program that uses some of the mathematical functions in C.
	    Unlike most other platforms, these are in a separate
	    library from the standard C one and you have to tell the
	    compiler to add it.</para>

	  <para xml:lang="en">The rule is that if the library is called
	    <filename>lib<replaceable>something</replaceable>.a</filename>,
	    you give <command>cc</command> the argument
	    <option>-l<replaceable>something</replaceable></option>.
	    For example, the math library is
	    <filename>libm.a</filename>, so you give
	    <command>cc</command> the argument <option>-lm</option>.
	    A common <quote>gotcha</quote> with the math library is
	    that it has to be the last library on the command
	    line.</para>

	  <informalexample>
	    <screen xml:lang="en"><prompt>%</prompt> <userinput>cc -o foobar foobar.c -lm</userinput></screen>
	  </informalexample>

	  <para xml:lang="en">This will link the math library functions into
	    <filename>foobar</filename>.</para>

	  <para xml:lang="en">If you are compiling C++ code, use
	    <command>c++</command>.  <command>c++</command> can also
	    be invoked as <command>clang++</command> on FreeBSD.</para>

	  <informalexample>
	    <screen xml:lang="en"><prompt>%</prompt> <userinput>c++ -o foobar foobar.cc</userinput></screen>
	  </informalexample>

	  <para xml:lang="en">This will both produce an executable
	    <filename>foobar</filename> from the C++ source file
	    <filename>foobar.cc</filename>.</para>
	</listitem>
      </varlistentry>
    </variablelist>

    <sect2>
      <title xml:lang="en">Common <command>cc</command> Queries and Problems</title>

      <qandaset>
	<qandaentry>
	  <question>
	    <para xml:lang="en">I am trying to write a program which uses the
	      <function>sin()</function> function and I get an error
	      like this.  What does it mean?</para>

	    <informalexample>
	      <screen xml:lang="en">/var/tmp/cc0143941.o: Undefined symbol `_sin' referenced from text segment</screen>
	    </informalexample>
	  </question>

	  <answer>
	    <para xml:lang="en">When using mathematical functions like
	      <function>sin()</function>, you have to tell
	      <command>cc</command> to link in the math library, like
	      so:</para>

	    <informalexample>
	      <screen xml:lang="en"><prompt>%</prompt> <userinput>cc -o foobar foobar.c -lm</userinput></screen>
	    </informalexample>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para xml:lang="en">All right, I wrote this simple program to practice
	      using <option>-lm</option>.  All it does is raise 2.1 to
	      the power of 6.</para>

	    <informalexample>
	      <programlisting xml:lang="en">#include &lt;stdio.h&gt;

int main() {
	float f;

	f = pow(2.1, 6);
	printf("2.1 ^ 6 = %f\n", f);
	return 0;
}</programlisting>
	    </informalexample>

	    <para xml:lang="en">and I compiled it as:</para>

	    <informalexample>
	      <screen xml:lang="en"><prompt>%</prompt> <userinput>cc temp.c -lm</userinput></screen>
	    </informalexample>

	    <para xml:lang="en">like you said I should, but I get this when I run
	      it:</para>

	    <informalexample>
	      <screen xml:lang="en"><prompt>%</prompt> <userinput>./a.out</userinput>
2.1 ^ 6 = 1023.000000</screen>
	    </informalexample>

	    <para xml:lang="en">This is <emphasis>not</emphasis> the right answer!
	      What is going on?</para>
	  </question>

	  <answer>
	    <para xml:lang="en">When the compiler sees you call a function, it
	      checks if it has already seen a prototype for it.  If it
	      has not, it assumes the function returns an
	      <type>int</type>, which is definitely not what you want
	      here.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para xml:lang="en">So how do I fix this?</para>
	  </question>

	  <answer>
	    <para xml:lang="en">The prototypes for the mathematical functions are in
	      <filename>math.h</filename>.  If you include this file,
	      the compiler will be able to find the prototype and it
	      will stop doing strange things to your
	      calculation!</para>

	    <informalexample>
	      <programlisting xml:lang="en">#include &lt;math.h&gt;
#include &lt;stdio.h&gt;

int main() {
...</programlisting>
	    </informalexample>

	    <para xml:lang="en">After recompiling it as you did before, run
	      it:</para>

	    <informalexample>
	      <screen xml:lang="en"><prompt>%</prompt> <userinput>./a.out</userinput>
2.1 ^ 6 = 85.766121</screen>
	    </informalexample>

	    <para xml:lang="en">If you are using any of the mathematical functions,
	      <emphasis>always</emphasis> include
	      <filename>math.h</filename> and remember to link in the
	      math library.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para xml:lang="en">I compiled a file called
	      <filename>foobar.c</filename> and I cannot find an
	      executable called <filename>foobar</filename>.  Where
	      has it gone?</para>
	  </question>

	  <answer>
	    <para xml:lang="en">Remember, <command>cc</command> will call the
	      executable <filename>a.out</filename> unless you tell it
	      differently.  Use the
	      <option>-o <replaceable>filename</replaceable></option>
	      option:</para>

	    <informalexample>
	      <screen xml:lang="en"><prompt>%</prompt> <userinput>cc -o foobar foobar.c</userinput></screen>
	    </informalexample>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para xml:lang="en">OK, I have an executable called
	      <filename>foobar</filename>, I can see it when I run
	      <command>ls</command>, but when I type in
	      <command>foobar</command> at the command prompt it tells
	      me there is no such file.  Why can it not find
	      it?</para>
	  </question>

	  <answer>
	    <para xml:lang="en">Unlike <trademark class="registered">MS-DOS</trademark>, <trademark class="registered">UNIX</trademark> does not look in the current
	      directory when it is trying to find out which executable
	      you want it to run, unless you tell it to.  Type
	      <command>./foobar</command>, which means <quote>run the
		file called <filename>foobar</filename> in the current
		directory.</quote></para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para xml:lang="en">I called my executable <filename>test</filename>,
	      but nothing happens when I run it.  What is going
	      on?</para>
	  </question>

	  <answer>
	    <para xml:lang="en">Most <trademark class="registered">UNIX</trademark> systems have a program called
	      <command>test</command> in <filename>/usr/bin</filename>
	      and the shell is picking that one up before it gets to
	      checking the current directory.  Either type:</para>

	    <informalexample>
	      <screen xml:lang="en"><prompt>%</prompt> <userinput>./test</userinput></screen>
	    </informalexample>

	    <para xml:lang="en">or choose a better name for your program!</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para xml:lang="en">I compiled my program and it seemed to run all right
	      at first, then there was an error and it said something
	      about <errorname>core dumped</errorname>.  What does
	      that mean?</para>
	  </question>

	  <answer>
	    <para xml:lang="en">The name <firstterm>core dump</firstterm> dates back
	      to the very early days of <trademark class="registered">UNIX</trademark>, when the machines used
	      core memory for storing data.  Basically, if the program
	      failed under certain conditions, the system would write
	      the contents of core memory to disk in a file called
	      <filename>core</filename>, which the programmer could
	      then pore over to find out what went wrong.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para xml:lang="en">Fascinating stuff, but what I am supposed to do
	      now?</para>
	  </question>

	  <answer>
	    <para xml:lang="en">Use <command>gdb</command> to analyze the core (see
	      <xref linkend="debugging"/>).</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para xml:lang="en">When my program dumped core, it said something about
	      a <errorname>segmentation fault</errorname>.  What is
	      that?</para>
	  </question>

	  <answer>
	    <para xml:lang="en">This basically means that your program tried to
	      perform some sort of illegal operation on memory; <trademark class="registered">UNIX</trademark>
	      is designed to protect the operating system and other
	      programs from rogue programs.</para>

	    <para xml:lang="en">Common causes for this are:</para>

	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">Trying to write to a <symbol>NULL</symbol>
		  pointer, eg</para>

		<programlisting xml:lang="en">char *foo = NULL;
strcpy(foo, "bang!");</programlisting>
	      </listitem>

	      <listitem>
		<para xml:lang="en">Using a pointer that has not been initialized,
		  eg</para>

		<programlisting xml:lang="en">char *foo;
strcpy(foo, "bang!");</programlisting>

		<para xml:lang="en">The pointer will have some random value that,
		  with luck, will point into an area of memory that is
		  not available to your program and the kernel will
		  kill your program before it can do any damage.  If
		  you are unlucky, it will point somewhere inside your
		  own program and corrupt one of your data structures,
		  causing the program to fail mysteriously.</para>
	      </listitem>

	      <listitem>
		<para xml:lang="en">Trying to access past the end of an array,
		  eg</para>

		<programlisting xml:lang="en">int bar[20];
bar[27] = 6;</programlisting>
	      </listitem>

	      <listitem>
		<para xml:lang="en">Trying to store something in read-only memory,
		  eg</para>

		<programlisting xml:lang="en">char *foo = "My string";
strcpy(foo, "bang!");</programlisting>

		<para xml:lang="en"><trademark class="registered">UNIX</trademark> compilers often put string literals like
		  <literal>"My string"</literal> into read-only areas
		  of memory.</para>
	      </listitem>

	      <listitem>
		<para xml:lang="en">Doing naughty things with
		  <function>malloc()</function> and
		  <function>free()</function>, eg</para>

		<programlisting xml:lang="en">char bar[80];
free(bar);</programlisting>

		<para xml:lang="en">or</para>

		<programlisting xml:lang="en">char *foo = malloc(27);
free(foo);
free(foo);</programlisting>
	      </listitem>
	    </itemizedlist>

	    <para xml:lang="en">Making one of these mistakes will not always lead to
	      an error, but they are always bad practice.  Some
	      systems and compilers are more tolerant than others,
	      which is why programs that ran well on one system can
	      crash when you try them on an another.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para xml:lang="en">Sometimes when I get a core dump it says
	      <errorname>bus error</errorname>.  It says in my <trademark class="registered">UNIX</trademark>
	      book that this means a hardware problem, but the
	      computer still seems to be working.  Is this
	      true?</para>
	  </question>

	  <answer>
	    <para xml:lang="en">No, fortunately not (unless of course you really do
	      have a hardware problem…).  This is usually
	      another way of saying that you accessed memory in a way
	      you should not have.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para xml:lang="en">This dumping core business sounds as though it could
	      be quite useful, if I can make it happen when I want to.
	      Can I do this, or do I have to wait until there is an
	      error?</para>
	  </question>

	  <answer>
	    <para xml:lang="en">Yes, just go to another console or xterm, do</para>

	    <screen xml:lang="en"><prompt>%</prompt> <userinput>ps</userinput></screen>

	    <para xml:lang="en">to find out the process ID of your program, and
	      do</para>

	    <screen xml:lang="en"><prompt>%</prompt> <userinput>kill -ABRT <replaceable>pid</replaceable></userinput></screen>

	    <para xml:lang="en">where
	      <parameter><replaceable>pid</replaceable></parameter> is
	      the process ID you looked up.</para>

	    <para xml:lang="en">This is useful if your program has got stuck in an
	      infinite loop, for instance.  If your program happens to
	      trap <symbol>SIGABRT</symbol>, there are several other
	      signals which have a similar effect.</para>

	    <para xml:lang="en">Alternatively, you can create a core dump from
	      inside your program, by calling the
	      <function>abort()</function> function. See the manual
	      page of <citerefentry><refentrytitle>abort</refentrytitle><manvolnum>3</manvolnum></citerefentry> to learn more.</para>

	    <para xml:lang="en">If you want to create a core dump from outside your
	      program, but do not want the process to terminate, you
	      can use the <command>gcore</command> program. See the
	      manual page of <citerefentry><refentrytitle>gcore</refentrytitle><manvolnum>1</manvolnum></citerefentry> for more
	      information.</para>
	  </answer>
	</qandaentry>
      </qandaset>
    </sect2>
  </sect1>

  <sect1 xml:id="tools-make">
    <title xml:lang="en">Make</title>

    <sect2>
      <title xml:lang="en">What is <command>make</command>?</title>

      <para xml:lang="en">When you are working on a simple program with only one or
	two source files, typing in</para>

      <screen xml:lang="en"><prompt>%</prompt> <userinput>cc file1.c file2.c</userinput></screen>

      <para xml:lang="en">is not too bad, but it quickly becomes very tedious when
	there are several files—and it can take a while to
	compile, too.</para>

      <para xml:lang="en">One way to get around this is to use object files and only
	recompile the source file if the source code has changed.  So
	we could have something like:</para>

      <screen xml:lang="en"><prompt>%</prompt> <userinput>cc file1.o file2.o</userinput> … <userinput>file37.c</userinput> …</screen>

      <para xml:lang="en">if we had changed <filename>file37.c</filename>, but not
	any of the others, since the last time we compiled.  This may
	speed up the compilation quite a bit, but does not solve the
	typing problem.</para>

      <para xml:lang="en">Or we could write a shell script to solve the typing
	problem, but it would have to re-compile everything, making it
	very inefficient on a large project.</para>

      <para xml:lang="en">What happens if we have hundreds of source files lying
	about? What if we are working in a team with other people who
	forget to tell us when they have changed one of their source
	files that we use?</para>

      <para xml:lang="en">Perhaps we could put the two solutions together and write
	something like a shell script that would contain some kind of
	magic rule saying when a source file needs compiling.  Now all
	we need now is a program that can understand these rules, as
	it is a bit too complicated for the shell.</para>

      <para xml:lang="en">This program is called <command>make</command>.  It reads
	in a file, called a <firstterm>makefile</firstterm>, that
	tells it how different files depend on each other, and works
	out which files need to be re-compiled and which ones do not.
	For example, a rule could say something like <quote>if
	  <filename>fromboz.o</filename> is older than
	  <filename>fromboz.c</filename>, that means someone must have
	  changed <filename>fromboz.c</filename>, so it needs to be
	  re-compiled.</quote> The makefile also has rules telling
	make <emphasis>how</emphasis> to re-compile the source file,
	making it a much more powerful tool.</para>

      <para xml:lang="en">Makefiles are typically kept in the same directory as the
	source they apply to, and can be called
	<filename>makefile</filename>, <filename>Makefile</filename>
	or <filename>MAKEFILE</filename>.  Most programmers use the
	name <filename>Makefile</filename>, as this puts it near the
	top of a directory listing, where it can easily be
	seen.<footnote><para xml:lang="en">They do not use the
	    <filename>MAKEFILE</filename> form as block capitals are
	    often used for documentation files like
	    <filename>README</filename>.</para></footnote></para>
    </sect2>

    <sect2>
      <title xml:lang="en">Example of Using <command>make</command></title>

      <para xml:lang="en">Here is a very simple make file:</para>

      <programlisting xml:lang="en">foo: foo.c
	cc -o foo foo.c</programlisting>

      <para xml:lang="en">It consists of two lines, a dependency line and a creation
	line.</para>

      <para xml:lang="en">The dependency line here consists of the name of the
	program (known as the <firstterm>target</firstterm>), followed
	by a colon, then whitespace, then the name of the source file.
	When <command>make</command> reads this line, it looks to see
	if <filename>foo</filename> exists; if it exists, it compares
	the time <filename>foo</filename> was last modified to the
	time <filename>foo.c</filename> was last modified.  If
	<filename>foo</filename> does not exist, or is older than
	<filename>foo.c</filename>, it then looks at the creation line
	to find out what to do.  In other words, this is the rule for
	working out when <filename>foo.c</filename> needs to be
	re-compiled.</para>

      <para xml:lang="en">The creation line starts with a <token>tab</token> (press
	<keycap>tab</keycap>) and then the command you would type to
	create <filename>foo</filename> if you were doing it at a
	command prompt.  If <filename>foo</filename> is out of date,
	or does not exist, <command>make</command> then executes this
	command to create it.  In other words, this is the rule which
	tells make how to re-compile
	<filename>foo.c</filename>.</para>

      <para xml:lang="en">So, when you type <userinput>make</userinput>, it will
	make sure that <filename>foo</filename> is up to date with
	respect to your latest changes to <filename>foo.c</filename>.
	This principle can be extended to
	<filename>Makefile</filename>s with hundreds of
	targets—in fact, on FreeBSD, it is possible to compile
	the entire operating system just by typing <userinput>make
	  world</userinput> in the appropriate directory!</para>

      <para xml:lang="en">Another useful property of makefiles is that the targets
	do not have to be programs.  For instance, we could have a
	make file that looks like this:</para>

      <programlisting xml:lang="en">foo: foo.c
	cc -o foo foo.c

install:
	cp foo /home/me</programlisting>

      <para xml:lang="en">We can tell make which target we want to make by
	typing:</para>

      <screen xml:lang="en"><prompt>%</prompt> <userinput>make <replaceable>target</replaceable></userinput></screen>

      <para xml:lang="en"><command>make</command> will then only look at that target
	and ignore any others.  For example, if we type
	<userinput>make foo</userinput> with the makefile above, make
	will ignore the <buildtarget xml:lang="en">install</buildtarget>
	target.</para>

      <para xml:lang="en">If we just type <userinput>make</userinput> on its own,
	make will always look at the first target and then stop
	without looking at any others.  So if we typed
	<userinput>make</userinput> here, it will just go to the
	<buildtarget xml:lang="en">foo</buildtarget> target, re-compile
	<filename>foo</filename> if necessary, and then stop without
	going on to the <buildtarget xml:lang="en">install</buildtarget>
	target.</para>

      <para xml:lang="en">Notice that the <buildtarget xml:lang="en">install</buildtarget> target
	does not actually depend on anything! This means that the
	command on the following line is always executed when we try
	to make that target by typing <userinput>make
	  install</userinput>.  In this case, it will copy
	<filename>foo</filename> into the user's home directory.  This
	is often used by application makefiles, so that the
	application can be installed in the correct directory when it
	has been correctly compiled.</para>

      <para xml:lang="en">This is a slightly confusing subject to try to explain.
	If you do not quite understand how <command>make</command>
	works, the best thing to do is to write a simple program like
	<quote>hello world</quote> and a make file like the one above
	and experiment.  Then progress to using more than one source
	file, or having the source file include a header file.
	<command>touch</command> is very useful here—it changes
	the date on a file without you having to edit it.</para>
    </sect2>

    <sect2>
      <title xml:lang="en">Make and include-files</title>

      <para xml:lang="en">C code often starts with a list of files to include, for
	example stdio.h.  Some of these files are system-include
	files, some of them are from the project you are now working
	on:</para>

      <programlisting xml:lang="en">#include &lt;stdio.h&gt;
#include "foo.h"

int main(....</programlisting>

      <para xml:lang="en">To make sure that this file is recompiled the moment
	<filename>foo.h</filename> is changed, you have to add it in
	your <filename>Makefile</filename>:</para>

      <programlisting xml:lang="en">foo: foo.c foo.h</programlisting>

      <para xml:lang="en">The moment your project is getting bigger and you have
	more and more own include-files to maintain, it will be a pain
	to keep track of all include files and the files which are
	depending on it.  If you change an include-file but forget to
	recompile all the files which are depending on it, the results
	will be devastating.  <command>clang</command> has an option
	to analyze your files and to produce a list of include-files
	and their dependencies: <option>-MM</option>.</para>

      <para xml:lang="en">If you add this to your Makefile:</para>

      <programlisting xml:lang="en">depend:
	cc -E -MM *.c &gt; .depend</programlisting>

      <para xml:lang="en">and run <userinput>make depend</userinput>, the file
	<filename>.depend</filename> will appear with a list of
	object-files, C-files and the include-files:</para>

      <programlisting xml:lang="en">foo.o: foo.c foo.h</programlisting>

      <para xml:lang="en">If you change <filename>foo.h</filename>, next time you
	run <command>make</command> all files depending on
	<filename>foo.h</filename> will be recompiled.</para>

      <para xml:lang="en">Do not forget to run <command>make depend</command> each
	time you add an include-file to one of your files.</para>
    </sect2>

    <sect2>
      <title xml:lang="en">FreeBSD Makefiles</title>

      <para xml:lang="en">Makefiles can be rather complicated to write.
	Fortunately, BSD-based systems like FreeBSD come with some
	very powerful ones as part of the system.  One very good
	example of this is the FreeBSD ports system.  Here is the
	essential part of a typical ports
	<filename>Makefile</filename>:</para>

      <programlisting xml:lang="en">MASTER_SITES=   ftp://freefall.cdrom.com/pub/FreeBSD/LOCAL_PORTS/
DISTFILES=      scheme-microcode+dist-7.3-freebsd.tgz

.include &lt;bsd.port.mk&gt;</programlisting>

      <para xml:lang="en">Now, if we go to the directory for this port and type
	<userinput>make</userinput>, the following happens:</para>

      <procedure>
	<step>
	  <para xml:lang="en">A check is made to see if the source code for this
	    port is already on the system.</para>
	</step>

	<step>
	  <para xml:lang="en">If it is not, an FTP connection to the URL in
	    <symbol>MASTER_SITES</symbol> is set up to download the
	    source.</para>
	</step>

	<step>
	  <para xml:lang="en">The checksum for the source is calculated and compared
	    it with one for a known, good, copy of the source.  This
	    is to make sure that the source was not corrupted while in
	    transit.</para>
	</step>

	<step>
	  <para xml:lang="en">Any changes required to make the source work on
	    FreeBSD are applied—this is known as
	    <firstterm>patching</firstterm>.</para>
	</step>

	<step>
	  <para xml:lang="en">Any special configuration needed for the source is
	    done.  (Many <trademark class="registered">UNIX</trademark> program distributions try to work out
	    which version of <trademark class="registered">UNIX</trademark> they are being compiled on and
	    which optional <trademark class="registered">UNIX</trademark> features are present—this is
	    where they are given the information in the FreeBSD ports
	    scenario).</para>
	</step>

	<step>
	  <para xml:lang="en">The source code for the program is compiled.  In
	    effect, we change to the directory where the source was
	    unpacked and do <command>make</command>—the
	    program's own make file has the necessary information to
	    build the program.</para>
	</step>

	<step>
	  <para xml:lang="en">We now have a compiled version of the program.  If we
	    wish, we can test it now; when we feel confident about the
	    program, we can type <userinput>make install</userinput>.
	    This will cause the program and any supporting files it
	    needs to be copied into the correct location; an entry is
	    also made into a <database>package database</database>, so
	    that the port can easily be uninstalled later if we change
	    our mind about it.</para>
	</step>
      </procedure>

      <para xml:lang="en">Now I think you will agree that is rather impressive for a
	four line script!</para>

      <para xml:lang="en">The secret lies in the last line, which tells
	<command>make</command> to look in the system makefile called
	<filename>bsd.port.mk</filename>.  It is easy to overlook this
	line, but this is where all the clever stuff comes
	from—someone has written a makefile that tells
	<command>make</command> to do all the things above (plus a
	couple of other things I did not mention, including handling
	any errors that may occur) and anyone can get access to that
	just by putting a single line in their own make file!</para>

      <para xml:lang="en">If you want to have a look at these system makefiles, they
	are in <filename>/usr/share/mk</filename>, but it is probably
	best to wait until you have had a bit of practice with
	makefiles, as they are very complicated (and if you do look at
	them, make sure you have a flask of strong coffee
	handy!)</para>
    </sect2>

    <sect2>
      <title xml:lang="en">More Advanced Uses of <command>make</command></title>

      <para xml:lang="en"><command>Make</command> is a very powerful tool, and can
	do much more than the simple example above shows.
	Unfortunately, there are several different versions of
	<command>make</command>, and they all differ considerably.
	The best way to learn what they can do is probably to read the
	documentation—hopefully this introduction will have
	given you a base from which you can do this.</para>

      <para xml:lang="en">The version of make that comes with FreeBSD is the
	<application>Berkeley make</application>; there is a tutorial
	for it in <filename>/usr/share/doc/psd/12.make</filename>.  To
	view it, do</para>

      <screen xml:lang="en"><prompt>%</prompt> <userinput>zmore paper.ascii.gz</userinput></screen>

      <para xml:lang="en">in that directory.</para>

      <para xml:lang="en">Many applications in the ports use <application>GNU
	  make</application>, which has a very good set of
	<quote>info</quote> pages.  If you have installed any of these
	ports, <application>GNU make</application> will automatically
	have been installed as <command>gmake</command>.  It is also
	available as a port and package in its own right.</para>

      <para xml:lang="en">To view the info pages for <application>GNU
	  make</application>, you will have to edit
	<filename>dir</filename> in the
	<filename>/usr/local/info</filename> directory to add an entry
	for it.  This involves adding a line like</para>

      <programlisting xml:lang="en"> * Make: (make).                 The GNU Make utility.</programlisting>

      <para xml:lang="en">to the file.  Once you have done this, you can type
	<userinput>info</userinput> and then select
	<guimenuitem>make</guimenuitem> from the menu (or in
	<application>Emacs</application>, do <userinput>C-h
	  i</userinput>).</para>
    </sect2>
  </sect1>

  <sect1 xml:id="debugging">
    <title xml:lang="en">Debugging</title>

    <sect2>
      <title xml:lang="en">The Debugger</title>

      <para xml:lang="en">The debugger that comes with FreeBSD is called
	<command>gdb</command> (<application>GNU
	  debugger</application>).  You start it up by typing</para>

      <screen xml:lang="en"><prompt>%</prompt> <userinput>gdb <replaceable>progname</replaceable></userinput></screen>

      <para xml:lang="en">although many people prefer to run it inside
	<application>Emacs</application>.  You can do this by:</para>

      <screen xml:lang="en"><userinput>M-x gdb RET <replaceable>progname</replaceable> RET</userinput></screen>

      <para xml:lang="en">Using a debugger allows you to run the program under more
	controlled circumstances.  Typically, you can step through the
	program a line at a time, inspect the value of variables,
	change them, tell the debugger to run up to a certain point
	and then stop, and so on.  You can even attach to a program
	that is already running, or load a core file to investigate
	why the program crashed.  It is even possible to debug the
	kernel, though that is a little trickier than the user
	applications we will be discussing in this section.</para>

      <para xml:lang="en"><command>gdb</command> has quite good on-line help, as
	well as a set of info pages, so this section will concentrate
	on a few of the basic commands.</para>

      <para xml:lang="en">Finally, if you find its text-based command-prompt style
	off-putting, there is a graphical front-end for it
	(<package>devel/xxgdb</package>) in the Ports
	Collection.</para>

      <para xml:lang="en">This section is intended to be an introduction to using
	<command>gdb</command> and does not cover specialized topics
	such as debugging the kernel.</para>
    </sect2>

    <sect2>
      <title xml:lang="en">Running a Program in the Debugger</title>

      <para xml:lang="en">You will need to have compiled the program with
	<option>-g</option> to get the most out of using
	<command>gdb</command>.  It will work without, but you will
	only see the name of the function you are in, instead of the
	source code.  If you see a line like:</para>

      <screen xml:lang="en">… (no debugging symbols found) …</screen>

      <para xml:lang="en">when <command>gdb</command> starts up, you will know that
	the program was not compiled with <option>-g</option>.</para>

      <para xml:lang="en">At the <command>gdb</command> prompt, type
	<userinput>break main</userinput>.  This will tell the
	debugger that you are not interested in watching the
	preliminary set-up code in the program being run, and that it
	should stop execution at the beginning of your code.  Now type
	<userinput>run</userinput> to start the program—it will
	start at the beginning of the set-up code and then get stopped
	by the debugger when it calls <function>main()</function>.
	(If you have ever wondered where <function>main()</function>
	gets called from, now you know!).</para>

      <para xml:lang="en">You can now step through the program, a line at a time, by
	pressing <command>n</command>.  If you get to a function call,
	you can step into it by pressing <command>s</command>.  Once
	you are in a function call, you can return from stepping into
	a function call by pressing <command>f</command>.  You can
	also use <command>up</command> and <command>down</command> to
	take a quick look at the caller.</para>

      <para xml:lang="en">Here is a simple example of how to spot a mistake in a
	program with <command>gdb</command>.  This is our program
	(with a deliberate mistake):</para>

      <programlisting xml:lang="en">#include &lt;stdio.h&gt;

int bazz(int anint);

main() {
	int i;

	printf("This is my program\n");
	bazz(i);
	return 0;
}

int bazz(int anint) {
	printf("You gave me %d\n", anint);
	return anint;
}</programlisting>

      <para xml:lang="en">This program sets <symbol>i</symbol> to be
	<literal>5</literal> and passes it to a function
	<function>bazz()</function> which prints out the number we
	gave it.</para>

      <para xml:lang="en">When we compile and run the program we get</para>

      <screen xml:lang="en"><prompt>%</prompt> <userinput>cc -g -o temp temp.c</userinput>
<prompt>%</prompt> <userinput>./temp</userinput>
This is my program
anint = 4231</screen>

      <para xml:lang="en">That was not what we expected! Time to see what is going
	on!</para>

      <screen xml:lang="en"><prompt>%</prompt> <userinput>gdb temp</userinput>
GDB is free software and you are welcome to distribute copies of it
 under certain conditions; type "show copying" to see the conditions.
There is absolutely no warranty for GDB; type "show warranty" for details.
GDB 4.13 (i386-unknown-freebsd), Copyright 1994 Free Software Foundation, Inc.
(gdb) <userinput>break main</userinput>				<lineannotation>Skip the set-up code</lineannotation>
Breakpoint 1 at 0x160f: file temp.c, line 9.	<lineannotation>gdb puts breakpoint at main()</lineannotation>
(gdb) <userinput>run</userinput>					<lineannotation>Run as far as main()</lineannotation>
Starting program: /home/james/tmp/temp		<lineannotation>Program starts running</lineannotation>

Breakpoint 1, main () at temp.c:9		<lineannotation>gdb stops at main()</lineannotation>
(gdb) <userinput>n</userinput>						<lineannotation>Go to next line</lineannotation>
This is my program				<lineannotation>Program prints out</lineannotation>
(gdb) <userinput>s</userinput>						<lineannotation>step into bazz()</lineannotation>
bazz (anint=4231) at temp.c:17			<lineannotation>gdb displays stack frame</lineannotation>
(gdb)</screen>

      <para xml:lang="en">Hang on a minute! How did <symbol>anint</symbol> get to be
	<literal>4231</literal>? Did we not we set it to be
	<literal>5</literal> in <function>main()</function>? Let us
	move up to <function>main()</function> and have a look.</para>

      <screen xml:lang="en">(gdb) <userinput>up</userinput>					<lineannotation>Move up call stack</lineannotation>
#1  0x1625 in main () at temp.c:11		<lineannotation>gdb displays stack frame</lineannotation>
(gdb) <userinput>p i</userinput>					<lineannotation>Show us the value of i</lineannotation>
$1 = 4231					<lineannotation>gdb displays 4231</lineannotation></screen>

      <para xml:lang="en">Oh dear! Looking at the code, we forgot to initialize
	<symbol>i</symbol>.  We meant to put</para>

      <programlisting xml:lang="en"><lineannotation>…</lineannotation>
main() {
	int i;

	i = 5;
	printf("This is my program\n");
<lineannotation>…</lineannotation></programlisting>

      <para xml:lang="en">but we left the <literal>i=5;</literal> line out.  As we
	did not initialize <symbol>i</symbol>, it had whatever number
	happened to be in that area of memory when the program ran,
	which in this case happened to be
	<literal>4231</literal>.</para>

      <note>
	<para xml:lang="en"><command>gdb</command> displays the stack frame every
	  time we go into or out of a function, even if we are using
	  <command>up</command> and <command>down</command> to move
	  around the call stack.  This shows the name of the function
	  and the values of its arguments, which helps us keep track
	  of where we are and what is going on.  (The stack is a
	  storage area where the program stores information about the
	  arguments passed to functions and where to go when it
	  returns from a function call).</para>
      </note>
    </sect2>

    <sect2>
      <title xml:lang="en">Examining a Core File</title>

      <para xml:lang="en">A core file is basically a file which contains the
	complete state of the process when it crashed.  In <quote>the
	  good old days</quote>, programmers had to print out hex
	listings of core files and sweat over machine code manuals,
	but now life is a bit easier.  Incidentally, under FreeBSD and
	other 4.4BSD systems, a core file is called
	<filename><replaceable>progname</replaceable>.core</filename>
	instead of just <filename>core</filename>, to make it clearer
	which program a core file belongs to.</para>

      <para xml:lang="en">To examine a core file, start up <command>gdb</command> in
	the usual way.  Instead of typing <command>break</command> or
	<command>run</command>, type</para>

      <screen xml:lang="en">(gdb) <userinput>core <replaceable>progname</replaceable>.core</userinput></screen>

      <para xml:lang="en">If you are not in the same directory as the core file, you
	will have to do <userinput>dir /path/to/core/file</userinput>
	first.</para>

      <para xml:lang="en">You should see something like this:</para>

      <screen xml:lang="en"><prompt>%</prompt> <userinput>gdb a.out</userinput>
GDB is free software and you are welcome to distribute copies of it
 under certain conditions; type "show copying" to see the conditions.
There is absolutely no warranty for GDB; type "show warranty" for details.
GDB 4.13 (i386-unknown-freebsd), Copyright 1994 Free Software Foundation, Inc.
(gdb) <userinput>core a.out.core</userinput>
Core was generated by `a.out'.
Program terminated with signal 11, Segmentation fault.
Cannot access memory at address 0x7020796d.
#0  0x164a in bazz (anint=0x5) at temp.c:17
(gdb)</screen>

      <para xml:lang="en">In this case, the program was called
	<filename>a.out</filename>, so the core file is called
	<filename>a.out.core</filename>.  We can see that the program
	crashed due to trying to access an area in memory that was not
	available to it in a function called
	<function>bazz</function>.</para>

      <para xml:lang="en">Sometimes it is useful to be able to see how a function
	was called, as the problem could have occurred a long way up
	the call stack in a complex program.  <command>bt</command>
	causes <command>gdb</command> to print out a back-trace of the
	call stack:</para>

      <screen xml:lang="en">(gdb) <userinput>bt</userinput>
#0  0x164a in bazz (anint=0x5) at temp.c:17
#1  0xefbfd888 in end ()
#2  0x162c in main () at temp.c:11
(gdb)</screen>

      <para xml:lang="en">The <function>end()</function> function is called when a
	program crashes; in this case, the <function>bazz()</function>
	function was called from <function>main()</function>.</para>
    </sect2>

    <sect2>
      <title xml:lang="en">Attaching to a Running Program</title>

      <para xml:lang="en">One of the neatest features about <command>gdb</command>
	is that it can attach to a program that is already running.
	Of course, that assumes you have sufficient permissions to do
	so.  A common problem is when you are stepping through a
	program that forks, and you want to trace the child, but the
	debugger will only let you trace the parent.</para>

      <para xml:lang="en">What you do is start up another <command>gdb</command>,
	use <command>ps</command> to find the process ID for the
	child, and do</para>

      <screen xml:lang="en">(gdb) <userinput>attach <replaceable>pid</replaceable></userinput></screen>

      <para xml:lang="en">in <command>gdb</command>, and then debug as usual.</para>

      <para xml:lang="en"><quote>That is all very well,</quote> you are probably
	thinking, <quote>but by the time I have done that, the child
	  process will be over the hill and far away</quote>.  Fear
	not, gentle reader, here is how to do it (courtesy of the
	<command>gdb</command> info pages):</para>

      <programlisting xml:lang="en"><lineannotation>…</lineannotation>
if ((pid = fork()) &lt; 0)		/* _Always_ check this */
	error();
else if (pid == 0) {		/* child */
	int PauseMode = 1;

	while (PauseMode)
		sleep(10);	/* Wait until someone attaches to us */
	<lineannotation>…</lineannotation>
} else {			/* parent */
	<lineannotation>…</lineannotation></programlisting>

      <para xml:lang="en">Now all you have to do is attach to the child, set
	<symbol>PauseMode</symbol> to <literal>0</literal>, and wait
	for the <function>sleep()</function> call to return!</para>
    </sect2>
  </sect1>

  <sect1 xml:id="emacs">
    <title xml:lang="en">Using Emacs as a Development Environment</title>

    <sect2>
      <title xml:lang="en">Emacs</title>

      <para xml:lang="en">Emacs is a highly customizable
	editor—indeed, it has been customized to the point where
	it is more like an operating system than an editor! Many
	developers and sysadmins do in fact spend practically all
	their time working inside Emacs, leaving it only to log
	out.</para>

      <para xml:lang="en">It is impossible even to summarize everything Emacs can do
	here, but here are some of the features of interest to
	developers:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en">Very powerful editor, allowing search-and-replace on
	    both strings and regular expressions (patterns), jumping
	    to start/end of block expression, etc, etc.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">Pull-down menus and online help.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">Language-dependent syntax highlighting and
	    indentation.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">Completely customizable.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">You can compile and debug programs within
	    Emacs.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">On a compilation error, you can jump to the offending
	    line of source code.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">Friendly-ish front-end to the <command>info</command>
	    program used for reading GNU hypertext documentation,
	    including the documentation on Emacs itself.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">Friendly front-end to <command>gdb</command>, allowing
	    you to look at the source code as you step through your
	    program.</para>
	</listitem>
      </itemizedlist>

      <para xml:lang="en">And doubtless many more that have been overlooked.</para>

      <para xml:lang="en">Emacs can be installed on FreeBSD using
	the <package>editors/emacs</package>
	port.</para>

      <para xml:lang="en">Once it is installed, start it up and do <literal>C-h
	  t</literal> to read an Emacs tutorial—that means hold
	down <keycap>control</keycap>, press <keycap>h</keycap>, let
	go of <keycap>control</keycap>, and then press
	<keycap>t</keycap>.  (Alternatively, you can use the mouse to
	select <guimenuitem>Emacs Tutorial</guimenuitem> from the
	<guimenu>Help</guimenu> menu.)</para>

      <para xml:lang="en">Although Emacs does have menus, it is well worth learning
	the key bindings, as it is much quicker when you are editing
	something to press a couple of keys than to try to find the
	mouse and then click on the right place.  And, when you are
	talking to seasoned Emacs users, you will find they often
	casually throw around expressions like <quote><literal>M-x
	    replace-s RET foo RET bar RET</literal></quote> so it is
	useful to know what they mean.  And in any case, Emacs has far
	too many useful functions for them to all fit on the menu
	bars.</para>

      <para xml:lang="en">Fortunately, it is quite easy to pick up the key-bindings,
	as they are displayed next to the menu item.  My advice is to
	use the menu item for, say, opening a file until you
	understand how it works and feel confident with it, then try
	doing C-x C-f.  When you are happy with that, move on to
	another menu command.</para>

      <para xml:lang="en">If you cannot remember what a particular combination of
	keys does, select <guimenuitem>Describe Key</guimenuitem> from
	the <guimenu>Help</guimenu> menu and type it in—Emacs
	will tell you what it does.  You can also use the
	<guimenuitem>Command Apropos</guimenuitem> menu item to find
	out all the commands which contain a particular word in them,
	with the key binding next to it.</para>

      <para xml:lang="en">By the way, the expression above means hold down the
	<keysym>Meta</keysym> key, press <keysym>x</keysym>, release
	the <keysym>Meta</keysym> key, type
	<userinput>replace-s</userinput> (short for
	<literal>replace-string</literal>—another feature of
	Emacs is that you can abbreviate commands), press the
	<keysym>return</keysym> key, type <userinput>foo</userinput>
	(the string you want replaced), press the
	<keysym>return</keysym> key, type bar (the string you want to
	replace <literal>foo</literal> with) and press
	<keysym>return</keysym> again.  Emacs will then do the
	search-and-replace operation you have just requested.</para>

      <para xml:lang="en">If you are wondering what on earth <keysym>Meta</keysym>
	is, it is a special key that many <trademark class="registered">UNIX</trademark> workstations have.
	Unfortunately, PC's do not have one, so it is usually
	<keycap>alt</keycap> (or if you are unlucky, the
	<keysym>escape</keysym> key).</para>

      <para xml:lang="en">Oh, and to get out of Emacs, do <command>C-x C-c</command>
	(that means hold down the <keysym>control</keysym> key, press
	<keysym>x</keysym>, press <keysym>c</keysym> and release the
	<keysym>control</keysym> key).  If you have any unsaved files
	open, Emacs will ask you if you want to save them.  (Ignore
	the bit in the documentation where it says
	<command>C-z</command> is the usual way to leave
	Emacs—that leaves Emacs hanging around in the
	background, and is only really useful if you are on a system
	which does not have virtual terminals).</para>
    </sect2>

    <sect2>
      <title xml:lang="en">Configuring Emacs</title>

      <para xml:lang="en">Emacs does many wonderful things; some of them are built
	in, some of them need to be configured.</para>

      <para xml:lang="en">Instead of using a proprietary macro language for
	configuration, Emacs uses a version of Lisp specially adapted
	for editors, known as Emacs Lisp.  Working with Emacs Lisp can
	be quite helpful if you want to go on and learn something like
	Common Lisp.  Emacs Lisp has many features of Common Lisp,
	although it is considerably smaller (and thus easier to
	master).</para>

      <para xml:lang="en">The best way to learn Emacs Lisp is to download the <link xlink:href="ftp://ftp.gnu.org/old-gnu/emacs/elisp-manual-19-2.4.tar.gz">Emacs
	  Tutorial</link></para>

      <para xml:lang="en">However, there is no need to actually know any Lisp to get
	started with configuring Emacs, as I have included a sample
	<filename>.emacs</filename>, which should be enough to get you
	started.  Just copy it into your home directory and restart
	Emacs if it is already running; it will read the commands from
	the file and (hopefully) give you a useful basic setup.</para>
    </sect2>

    <sect2>
      <title xml:lang="en">A Sample <filename>.emacs</filename></title>

      <para xml:lang="en">Unfortunately, there is far too much here to explain it in
	detail; however there are one or two points worth
	mentioning.</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en">Everything beginning with a <literal>;</literal> is a
	    comment and is ignored by Emacs.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">In the first line, the
	    <literal>-*- Emacs-Lisp -*-</literal> is so that
	    we can edit <filename>.emacs</filename> itself within
	    Emacs and get all the fancy features for editing Emacs
	    Lisp.  Emacs usually tries to guess this based on the
	    filename, and may not get it right for
	    <filename>.emacs</filename>.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">The <keysym>tab</keysym> key is bound to an
	    indentation function in some modes, so when you press the
	    tab key, it will indent the current line of code.  If you
	    want to put a <token>tab</token> character in whatever you
	    are writing, hold the <keysym>control</keysym> key down
	    while you are pressing the <keysym>tab</keysym>
	    key.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">This file supports syntax highlighting for C, C++,
	    Perl, Lisp and Scheme, by guessing the language from the
	    filename.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">Emacs already has a pre-defined function called
	    <function>next-error</function>.  In a compilation output
	    window, this allows you to move from one compilation error
	    to the next by doing <command>M-n</command>; we define a
	    complementary function,
	    <function>previous-error</function>, that allows you to go
	    to a previous error by doing <command>M-p</command>.  The
	    nicest feature of all is that <command>C-c C-c</command>
	    will open up the source file in which the error occurred
	    and jump to the appropriate line.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">We enable Emacs's ability to act as a server, so that
	    if you are doing something outside Emacs and you want to
	    edit a file, you can just type in</para>

	  <screen xml:lang="en"><prompt>%</prompt> <userinput>emacsclient <replaceable>filename</replaceable></userinput></screen>

	  <para xml:lang="en">and then you can edit the file in your
	    Emacs!<footnote> <para xml:lang="en">Many Emacs users set their
		<envar>EDITOR</envar> environment to
		<literal>emacsclient</literal> so this happens every
		time they need to edit a
		file.</para></footnote></para>
	</listitem>
      </itemizedlist>

      <example>
	<title xml:lang="en">A Sample <filename>.emacs</filename></title>

	<programlisting xml:lang="en">;; -*-Emacs-Lisp-*-

;; This file is designed to be re-evaled; use the variable first-time
;; to avoid any problems with this.
(defvar first-time t
  "Flag signifying this is the first time that .emacs has been evaled")

;; Meta
(global-set-key "\M- " 'set-mark-command)
(global-set-key "\M-\C-h" 'backward-kill-word)
(global-set-key "\M-\C-r" 'query-replace)
(global-set-key "\M-r" 'replace-string)
(global-set-key "\M-g" 'goto-line)
(global-set-key "\M-h" 'help-command)

;; Function keys
(global-set-key [f1] 'manual-entry)
(global-set-key [f2] 'info)
(global-set-key [f3] 'repeat-complex-command)
(global-set-key [f4] 'advertised-undo)
(global-set-key [f5] 'eval-current-buffer)
(global-set-key [f6] 'buffer-menu)
(global-set-key [f7] 'other-window)
(global-set-key [f8] 'find-file)
(global-set-key [f9] 'save-buffer)
(global-set-key [f10] 'next-error)
(global-set-key [f11] 'compile)
(global-set-key [f12] 'grep)
(global-set-key [C-f1] 'compile)
(global-set-key [C-f2] 'grep)
(global-set-key [C-f3] 'next-error)
(global-set-key [C-f4] 'previous-error)
(global-set-key [C-f5] 'display-faces)
(global-set-key [C-f8] 'dired)
(global-set-key [C-f10] 'kill-compilation)

;; Keypad bindings
(global-set-key [up] "\C-p")
(global-set-key [down] "\C-n")
(global-set-key [left] "\C-b")
(global-set-key [right] "\C-f")
(global-set-key [home] "\C-a")
(global-set-key [end] "\C-e")
(global-set-key [prior] "\M-v")
(global-set-key [next] "\C-v")
(global-set-key [C-up] "\M-\C-b")
(global-set-key [C-down] "\M-\C-f")
(global-set-key [C-left] "\M-b")
(global-set-key [C-right] "\M-f")
(global-set-key [C-home] "\M-&lt;")
(global-set-key [C-end] "\M-&gt;")
(global-set-key [C-prior] "\M-&lt;")
(global-set-key [C-next] "\M-&gt;")

;; Mouse
(global-set-key [mouse-3] 'imenu)

;; Misc
(global-set-key [C-tab] "\C-q\t")	; Control tab quotes a tab.
(setq backup-by-copying-when-mismatch t)

;; Treat 'y' or &lt;CR&gt; as yes, 'n' as no.
(fset 'yes-or-no-p 'y-or-n-p)
(define-key query-replace-map [return] 'act)
(define-key query-replace-map [?\C-m] 'act)

;; Load packages
(require 'desktop)
(require 'tar-mode)

;; Pretty diff mode
(autoload 'ediff-buffers "ediff" "Intelligent Emacs interface to diff" t)
(autoload 'ediff-files "ediff" "Intelligent Emacs interface to diff" t)
(autoload 'ediff-files-remote "ediff"
  "Intelligent Emacs interface to diff")

(if first-time
    (setq auto-mode-alist
	  (append '(("\\.cpp$" . c++-mode)
		    ("\\.hpp$" . c++-mode)
		    ("\\.lsp$" . lisp-mode)
		    ("\\.scm$" . scheme-mode)
		    ("\\.pl$" . perl-mode)
		    ) auto-mode-alist)))

;; Auto font lock mode
(defvar font-lock-auto-mode-list
  (list 'c-mode 'c++-mode 'c++-c-mode 'emacs-lisp-mode 'lisp-mode 'perl-mode 'scheme-mode)
  "List of modes to always start in font-lock-mode")

(defvar font-lock-mode-keyword-alist
  '((c++-c-mode . c-font-lock-keywords)
    (perl-mode . perl-font-lock-keywords))
  "Associations between modes and keywords")

(defun font-lock-auto-mode-select ()
  "Automatically select font-lock-mode if the current major mode is in font-lock-auto-mode-list"
  (if (memq major-mode font-lock-auto-mode-list)
      (progn
	(font-lock-mode t))
    )
  )

(global-set-key [M-f1] 'font-lock-fontify-buffer)

;; New dabbrev stuff
;(require 'new-dabbrev)
(setq dabbrev-always-check-other-buffers t)
(setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_")
(add-hook 'emacs-lisp-mode-hook
	  '(lambda ()
	     (set (make-local-variable 'dabbrev-case-fold-search) nil)
	     (set (make-local-variable 'dabbrev-case-replace) nil)))
(add-hook 'c-mode-hook
	  '(lambda ()
	     (set (make-local-variable 'dabbrev-case-fold-search) nil)
	     (set (make-local-variable 'dabbrev-case-replace) nil)))
(add-hook 'text-mode-hook
	  '(lambda ()
	     (set (make-local-variable 'dabbrev-case-fold-search) t)
	     (set (make-local-variable 'dabbrev-case-replace) t)))

;; C++ and C mode...
(defun my-c++-mode-hook ()
  (setq tab-width 4)
  (define-key c++-mode-map "\C-m" 'reindent-then-newline-and-indent)
  (define-key c++-mode-map "\C-ce" 'c-comment-edit)
  (setq c++-auto-hungry-initial-state 'none)
  (setq c++-delete-function 'backward-delete-char)
  (setq c++-tab-always-indent t)
  (setq c-indent-level 4)
  (setq c-continued-statement-offset 4)
  (setq c++-empty-arglist-indent 4))

(defun my-c-mode-hook ()
  (setq tab-width 4)
  (define-key c-mode-map "\C-m" 'reindent-then-newline-and-indent)
  (define-key c-mode-map "\C-ce" 'c-comment-edit)
  (setq c-auto-hungry-initial-state 'none)
  (setq c-delete-function 'backward-delete-char)
  (setq c-tab-always-indent t)
;; BSD-ish indentation style
  (setq c-indent-level 4)
  (setq c-continued-statement-offset 4)
  (setq c-brace-offset -4)
  (setq c-argdecl-indent 0)
  (setq c-label-offset -4))

;; Perl mode
(defun my-perl-mode-hook ()
  (setq tab-width 4)
  (define-key c++-mode-map "\C-m" 'reindent-then-newline-and-indent)
  (setq perl-indent-level 4)
  (setq perl-continued-statement-offset 4))

;; Scheme mode...
(defun my-scheme-mode-hook ()
  (define-key scheme-mode-map "\C-m" 'reindent-then-newline-and-indent))

;; Emacs-Lisp mode...
(defun my-lisp-mode-hook ()
  (define-key lisp-mode-map "\C-m" 'reindent-then-newline-and-indent)
  (define-key lisp-mode-map "\C-i" 'lisp-indent-line)
  (define-key lisp-mode-map "\C-j" 'eval-print-last-sexp))

;; Add all of the hooks...
(add-hook 'c++-mode-hook 'my-c++-mode-hook)
(add-hook 'c-mode-hook 'my-c-mode-hook)
(add-hook 'scheme-mode-hook 'my-scheme-mode-hook)
(add-hook 'emacs-lisp-mode-hook 'my-lisp-mode-hook)
(add-hook 'lisp-mode-hook 'my-lisp-mode-hook)
(add-hook 'perl-mode-hook 'my-perl-mode-hook)

;; Complement to next-error
(defun previous-error (n)
  "Visit previous compilation error message and corresponding source code."
  (interactive "p")
  (next-error (- n)))

;; Misc...
(transient-mark-mode 1)
(setq mark-even-if-inactive t)
(setq visible-bell nil)
(setq next-line-add-newlines nil)
(setq compile-command "make")
(setq suggest-key-bindings nil)
(put 'eval-expression 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)
(if (&gt;= emacs-major-version 21)
	(setq show-trailing-whitespace t))

;; Elisp archive searching
(autoload 'format-lisp-code-directory "lispdir" nil t)
(autoload 'lisp-dir-apropos "lispdir" nil t)
(autoload 'lisp-dir-retrieve "lispdir" nil t)
(autoload 'lisp-dir-verify "lispdir" nil t)

;; Font lock mode
(defun my-make-face (face color &amp;optional bold)
  "Create a face from a color and optionally make it bold"
  (make-face face)
  (copy-face 'default face)
  (set-face-foreground face color)
  (if bold (make-face-bold face))
  )

(if (eq window-system 'x)
    (progn
      (my-make-face 'blue "blue")
      (my-make-face 'red "red")
      (my-make-face 'green "dark green")
      (setq font-lock-comment-face 'blue)
      (setq font-lock-string-face 'bold)
      (setq font-lock-type-face 'bold)
      (setq font-lock-keyword-face 'bold)
      (setq font-lock-function-name-face 'red)
      (setq font-lock-doc-string-face 'green)
      (add-hook 'find-file-hooks 'font-lock-auto-mode-select)

      (setq baud-rate 1000000)
      (global-set-key "\C-cmm" 'menu-bar-mode)
      (global-set-key "\C-cms" 'scroll-bar-mode)
      (global-set-key [backspace] 'backward-delete-char)
					;      (global-set-key [delete] 'delete-char)
      (standard-display-european t)
      (load-library "iso-transl")))

;; X11 or PC using direct screen writes
(if window-system
    (progn
      ;;      (global-set-key [M-f1] 'hilit-repaint-command)
      ;;      (global-set-key [M-f2] [?\C-u M-f1])
      (setq hilit-mode-enable-list
	    '(not text-mode c-mode c++-mode emacs-lisp-mode lisp-mode
		  scheme-mode)
	    hilit-auto-highlight nil
	    hilit-auto-rehighlight 'visible
	    hilit-inhibit-hooks nil
	    hilit-inhibit-rebinding t)
      (require 'hilit19)
      (require 'paren))
  (setq baud-rate 2400)			; For slow serial connections
  )

;; TTY type terminal
(if (and (not window-system)
	 (not (equal system-type 'ms-dos)))
    (progn
      (if first-time
	  (progn
	    (keyboard-translate ?\C-h ?\C-?)
	    (keyboard-translate ?\C-? ?\C-h)))))

;; Under UNIX
(if (not (equal system-type 'ms-dos))
    (progn
      (if first-time
	  (server-start))))

;; Add any face changes here
(add-hook 'term-setup-hook 'my-term-setup-hook)
(defun my-term-setup-hook ()
  (if (eq window-system 'pc)
      (progn
;;	(set-face-background 'default "red")
	)))

;; Restore the "desktop" - do this as late as possible
(if first-time
    (progn
      (desktop-load-default)
      (desktop-read)))

;; Indicate that this file has been read at least once
(setq first-time nil)

;; No need to debug anything now

(setq debug-on-error nil)

;; All done
(message "All done, %s%s" (user-login-name) ".")</programlisting>
      </example>
    </sect2>

    <sect2>
      <title xml:lang="en">Extending the Range of Languages Emacs
	Understands</title>

      <para xml:lang="en">Now, this is all very well if you only want to program in
	the languages already catered for in
	<filename>.emacs</filename> (C, C++, Perl, Lisp and Scheme),
	but what happens if a new language called
	<quote>whizbang</quote> comes out, full of exciting
	features?</para>

      <para xml:lang="en">The first thing to do is find out if whizbang comes with
	any files that tell Emacs about the language.  These usually
	end in <filename>.el</filename>, short for <quote>Emacs
	  Lisp</quote>.  For example, if whizbang is a FreeBSD port,
	we can locate these files by doing</para>

      <screen xml:lang="en"><prompt>%</prompt> <userinput>find /usr/ports/lang/whizbang -name "*.el" -print</userinput></screen>

      <para xml:lang="en">and install them by copying them into the Emacs site Lisp
	directory.  On FreeBSD, this is
	<filename>/usr/local/share/emacs/site-lisp</filename>.</para>

      <para xml:lang="en">So for example, if the output from the find command
	was</para>

      <screen xml:lang="en">/usr/ports/lang/whizbang/work/misc/whizbang.el</screen>

      <para xml:lang="en">we would do</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>cp /usr/ports/lang/whizbang/work/misc/whizbang.el /usr/local/share/emacs/site-lisp</userinput></screen>

      <para xml:lang="en">Next, we need to decide what extension whizbang source
	files have.  Let us say for the sake of argument that they all
	end in <filename>.wiz</filename>.  We need to add an entry to
	our <filename>.emacs</filename> to make sure Emacs will be
	able to use the information in
	<filename>whizbang.el</filename>.</para>

      <para xml:lang="en">Find the <symbol>auto-mode-alist entry</symbol> in
	<filename>.emacs</filename> and add a line for whizbang, such
	as:</para>

      <programlisting xml:lang="en"><lineannotation>…</lineannotation>
("\\.lsp$" . lisp-mode)
("\\.wiz$" . whizbang-mode)
("\\.scm$" . scheme-mode)
<lineannotation>…</lineannotation></programlisting>

      <para xml:lang="en">This means that Emacs will automatically go into
	<function>whizbang-mode</function> when you edit a file ending
	in <filename>.wiz</filename>.</para>

      <para xml:lang="en">Just below this, you will find the
	<symbol>font-lock-auto-mode-list</symbol> entry.  Add
	<function>whizbang-mode</function> to it like so:</para>

      <programlisting xml:lang="en">;; Auto font lock mode
(defvar font-lock-auto-mode-list
  (list 'c-mode 'c++-mode 'c++-c-mode 'emacs-lisp-mode 'whizbang-mode 'lisp-mode 'perl-mode 'scheme-mode)
  "List of modes to always start in font-lock-mode")</programlisting>

      <para xml:lang="en">This means that Emacs will always enable
	<function>font-lock-mode</function> (ie syntax highlighting)
	when editing a <filename>.wiz</filename> file.</para>

      <para xml:lang="en">And that is all that is needed.  If there is anything else
	you want done automatically when you open up
	<filename>.wiz</filename>, you can add a
	<function>whizbang-mode hook</function> (see
	<function>my-scheme-mode-hook</function> for a simple example
	that adds <function>auto-indent</function>).</para>
    </sect2>
  </sect1>

  <sect1 xml:id="tools-reading">
    <title xml:lang="en">Further Reading</title>

    <para xml:lang="en">For information about setting up a development environment
      for contributing fixes to FreeBSD itself, please see
      <citerefentry><refentrytitle>development</refentrytitle><manvolnum>7</manvolnum></citerefentry>.</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en">Brian Harvey and Matthew Wright
	  <emphasis>Simply Scheme</emphasis>
	  MIT 1994.<!-- <br> -->
	  ISBN 0-262-08226-8</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Randall Schwartz
	  <emphasis>Learning Perl</emphasis>
	  O'Reilly 1993<!-- <br> -->
	  ISBN 1-56592-042-2</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Patrick Henry Winston and Berthold Klaus Paul Horn
	  <emphasis>Lisp (3rd Edition)</emphasis>
	  Addison-Wesley 1989<!-- <br> -->
	  ISBN 0-201-08319-1</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Brian W. Kernighan and Rob Pike
	  <emphasis>The Unix Programming Environment</emphasis>
	  Prentice-Hall 1984<!-- <br> -->
	  ISBN 0-13-937681-X</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Brian W. Kernighan and Dennis M. Ritchie <emphasis>The C
	    Programming Language (2nd Edition)</emphasis>
	  Prentice-Hall 1988<!-- <br> -->
	  ISBN 0-13-110362-8</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Bjarne Stroustrup
	<emphasis>The C++ Programming Language</emphasis>
	Addison-Wesley 1991<!-- <br> -->
	ISBN 0-201-53992-6</para>
      </listitem>

      <listitem>
	<para xml:lang="en">W. Richard Stevens <emphasis>Advanced Programming in the
	    Unix Environment</emphasis>
	  Addison-Wesley 1992<!-- <br> -->
	  ISBN 0-201-56317-7</para>
      </listitem>

      <listitem>
	<para xml:lang="en">W. Richard Stevens
	  <emphasis>Unix Network Programming</emphasis>
	  Prentice-Hall 1990<!-- <br> -->
	  ISBN 0-13-949876-1</para>
      </listitem>
    </itemizedlist>
  </sect1>

</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD: head/en_US.ISO8859-1/books/developers-handbook/secure/chapter.xml 48240 2016-02-22 23:37:45Z jgh $
-->
<chapter version="5.0" xml:id="secure">
      <info><title xml:lang="en">Secure Programming</title>
	<authorgroup>
	  <author xml:lang="en"><personname><firstname>Murray</firstname><surname>Stokely</surname></personname><contrib>Contributed by </contrib></author>
	</authorgroup>
      </info>

      

      <sect1 xml:id="secure-synopsis"><title xml:lang="en">Synopsis</title>

      <para xml:lang="en">This chapter describes some of the security issues that
      have plagued <trademark class="registered">UNIX</trademark> programmers for decades and some of the new
      tools available to help programmers avoid writing exploitable
      code.</para>
      </sect1>

      <sect1 xml:id="secure-philosophy"><title xml:lang="en">Secure Design
      Methodology</title>

      <para xml:lang="en">Writing secure applications takes a very scrutinous and
      pessimistic outlook on life.  Applications should be run with
      the principle of <quote>least privilege</quote> so that no
      process is ever running with more than the bare minimum access
      that it needs to accomplish its function.  Previously tested
      code should be reused whenever possible to avoid common
      mistakes that others may have already fixed.</para>

      <para xml:lang="en">One of the pitfalls of the <trademark class="registered">UNIX</trademark> environment is how easy it
      is to make assumptions about the sanity of the environment.
      Applications should never trust user input (in all its forms),
      system resources, inter-process communication, or the timing of
      events.  <trademark class="registered">UNIX</trademark> processes do not execute synchronously so logical
      operations are rarely atomic.</para>
      </sect1>

      <sect1 xml:id="secure-bufferov"><title xml:lang="en">Buffer Overflows</title>

      <para xml:lang="en">Buffer Overflows have been around since the very
      beginnings of the von Neumann <xref linkend="COD"/> architecture.

      <indexterm xml:lang="en"><primary>buffer overflow</primary></indexterm>
      <indexterm xml:lang="en"><primary>von Neumann</primary></indexterm>

      They first gained widespread notoriety in 1988 with the Morris
      Internet worm.  Unfortunately, the same basic attack remains

      <indexterm xml:lang="en"><primary>Morris Internet worm</primary></indexterm>

      effective today.
      By far the most common type of buffer overflow attack is based
      on corrupting the stack.</para>

      <indexterm xml:lang="en"><primary>stack</primary></indexterm>
      <indexterm xml:lang="en"><primary>arguments</primary></indexterm>

      <para xml:lang="en">Most modern computer systems use a stack to pass arguments
      to procedures and to store local variables.  A stack is a last
      in first out (LIFO) buffer in the high memory area of a process
      image.  When a program invokes a function a new "stack frame" is

      <indexterm xml:lang="en"><primary>LIFO</primary></indexterm>
      <indexterm xml:lang="en">
        <primary>process image</primary>
	  <secondary>stack pointer</secondary>
      </indexterm>

      created.  This stack frame consists of the arguments passed to
      the function as well as a dynamic amount of local variable
      space.  The "stack pointer" is a register that holds the current

      <indexterm xml:lang="en"><primary>stack frame</primary></indexterm>
      <indexterm xml:lang="en"><primary>stack pointer</primary></indexterm>

      location of the top of the stack.  Since this value is
      constantly changing as new values are pushed onto the top of the
      stack, many implementations also provide a "frame pointer" that
      is located near the beginning of a stack frame so that local
      variables can more easily be addressed relative to this
      value. <xref linkend="COD"/> The return address for function

      <indexterm xml:lang="en"><primary>frame pointer</primary></indexterm>
      <indexterm xml:lang="en">
        <primary>process image</primary>
        <secondary>frame pointer</secondary>
      </indexterm>
      <indexterm xml:lang="en"><primary>return address</primary></indexterm>
      <indexterm xml:lang="en"><primary>stack-overflow</primary></indexterm>

      calls is also stored on the stack, and this is the cause of
      stack-overflow exploits since overflowing a local variable in a
      function can overwrite the return address of that function,
      potentially allowing a malicious user to execute any code he or
      she wants.</para>

      <para xml:lang="en">Although stack-based attacks are by far the most common,
      it would also be possible to overrun the stack with a heap-based
      (malloc/free) attack.</para>

      <para xml:lang="en">The C programming language does not perform automatic
      bounds checking on arrays or pointers as many other languages
      do.  In addition, the standard C library is filled with a
      handful of very dangerous functions.</para>

      <informaltable frame="none" pgwide="1">
        <tgroup cols="2">
          <tbody>
          <row><entry xml:lang="en"><function>strcpy</function>(char *dest, const char
          *src)</entry>
          <entry><simpara xml:lang="en">May overflow the dest buffer</simpara></entry>
          </row>

          <row><entry xml:lang="en"><function>strcat</function>(char *dest, const char
          *src)</entry>
          <entry><simpara xml:lang="en">May overflow the dest buffer</simpara></entry>
          </row>

          <row><entry xml:lang="en"><function>getwd</function>(char *buf)</entry>
          <entry><simpara xml:lang="en">May overflow the buf buffer</simpara></entry>
          </row>

          <row><entry xml:lang="en"><function>gets</function>(char *s)</entry>
          <entry><simpara xml:lang="en">May overflow the s buffer</simpara></entry>
          </row>

          <row><entry xml:lang="en"><function>[vf]scanf</function>(const char *format,
          ...)</entry>
          <entry><simpara xml:lang="en">May overflow its arguments.</simpara></entry>
          </row>

          <row><entry xml:lang="en"><function>realpath</function>(char *path, char
          resolved_path[])</entry>
          <entry><simpara xml:lang="en">May overflow the path buffer</simpara></entry>
          </row>

          <row><entry xml:lang="en"><function>[v]sprintf</function>(char *str, const char
          *format, ...)</entry>
          <entry><simpara xml:lang="en">May overflow the str buffer.</simpara></entry>
          </row>
          </tbody>
        </tgroup>
      </informaltable>

      <sect2><title xml:lang="en">Example Buffer Overflow</title>

      <para xml:lang="en">The following example code contains a buffer overflow
      designed to overwrite the return address and skip the
      instruction immediately following the function call.  (Inspired
      by <xref linkend="Phrack"/>)</para>

<programlisting xml:lang="en">#include &lt;stdio.h&gt;

void manipulate(char *buffer) {
  char newbuffer[80];
  strcpy(newbuffer,buffer);
}

int main() {
  char ch,buffer[4096];
  int i=0;

  while ((buffer[i++] = getchar()) != '\n') {};

  i=1;
  manipulate(buffer);
  i=2;
  printf("The value of i is : %d\n",i);
  return 0;
}</programlisting>

      <para xml:lang="en">Let us examine what the memory image of this process would
      look like if we were to input 160 spaces into our little program
      before hitting return.</para>

      <para xml:lang="en">[XXX figure here!]</para>

      <para xml:lang="en">Obviously more malicious input can be devised to execute
      actual compiled instructions (such as exec(/bin/sh)).</para>
      </sect2>

      <sect2><title xml:lang="en">Avoiding Buffer Overflows</title>

      <para xml:lang="en">The most straightforward solution to the problem of
      stack-overflows is to always use length restricted memory and
      string copy functions.  <function>strncpy</function> and
      <function>strncat</function> are part of the standard C library.

      <indexterm xml:lang="en">
        <primary>string copy functions</primary>
	  <secondary>strncpy</secondary>
      </indexterm>
      <indexterm xml:lang="en">
        <primary>string copy functions</primary>
	  <secondary>strncat</secondary>
      </indexterm>

      These functions accept a length value as a parameter which
      should be no larger than the size of the destination buffer.
      These functions will then copy up to `length' bytes from the
      source to the destination.  However there are a number of
      problems with these functions.  Neither function guarantees NUL
      termination if the size of the input buffer is as large as the

      <indexterm xml:lang="en"><primary>NUL termination</primary></indexterm>

      destination.  The length parameter is also used inconsistently
      between strncpy and strncat so it is easy for programmers to get
      confused as to their proper usage.  There is also a significant
      performance loss compared to <function>strcpy</function> when
      copying a short string into a large buffer since
      <function>strncpy</function> NUL fills up the size
      specified.</para>

      <para xml:lang="en">Another memory copy implementation exists
      to get around these problems.  The
      <function>strlcpy</function> and <function>strlcat</function>
      functions guarantee that they will always null terminate the
      destination string when given a non-zero length argument.</para>

      <indexterm xml:lang="en">
        <primary>string copy functions</primary>
	  <secondary>strlcpy</secondary>
      </indexterm>

      <indexterm xml:lang="en">
	<primary>string copy functions</primary>
          <secondary>strlcat</secondary>
      </indexterm>

        <sect3><title xml:lang="en">Compiler based run-time bounds checking</title>

	<indexterm xml:lang="en"><primary>bounds checking</primary>
	<secondary>compiler-based</secondary></indexterm>

        <para xml:lang="en">Unfortunately there is still a very large assortment of
        code in public use which blindly copies memory around without
        using any of the bounded copy routines we just discussed.
        Fortunately, there is a way to help prevent such attacks —
        run-time bounds checking, which is implemented by several
        C/C++ compilers.</para>

	<indexterm xml:lang="en"><primary>ProPolice</primary></indexterm>
	<indexterm xml:lang="en"><primary>StackGuard</primary></indexterm>
	<indexterm xml:lang="en"><primary>gcc</primary></indexterm>

	<para xml:lang="en">ProPolice is one such compiler feature, and is integrated
	  into <citerefentry><refentrytitle>gcc</refentrytitle><manvolnum>1</manvolnum></citerefentry> versions 4.1 and later.  It replaces and
	  extends the earlier StackGuard <citerefentry><refentrytitle>gcc</refentrytitle><manvolnum>1</manvolnum></citerefentry> extension.</para>

	<para xml:lang="en">ProPolice helps to protect against stack-based buffer
	  overflows and other attacks by laying pseudo-random numbers in
	  key areas of the stack before calling any function.  When a
	  function returns, these <quote>canaries</quote> are checked
	  and if they are found to have been changed the executable is
	  immediately aborted.  Thus any attempt to modify the return
	  address or other variable stored on the stack in an attempt to
	  get malicious code to run is unlikely to succeed, as the
	  attacker would have to also manage to leave the pseudo-random
	  canaries untouched.</para>

        <indexterm xml:lang="en"><primary>buffer overflow</primary></indexterm>

        <para xml:lang="en">Recompiling your application with ProPolice is an
        effective means of stopping most buffer-overflow attacks, but
        it can still be compromised.</para>

        </sect3>

        <sect3><title xml:lang="en">Library based run-time bounds checking</title>

  	<indexterm xml:lang="en">
	  <primary>bounds checking</primary>
	  <secondary>library-based</secondary>
	</indexterm>

        <para xml:lang="en">Compiler-based mechanisms are completely useless for
        binary-only software for which you cannot recompile.  For
        these situations there are a number of libraries which
        re-implement the unsafe functions of the C-library
        (<function>strcpy</function>, <function>fscanf</function>,
        <function>getwd</function>, etc..) and ensure that these
        functions can never write past the stack pointer.</para>

        <itemizedlist>
        <listitem><simpara xml:lang="en">libsafe</simpara></listitem>
        <listitem><simpara xml:lang="en">libverify</simpara></listitem>
        <listitem><simpara xml:lang="en">libparanoia</simpara></listitem>
        </itemizedlist>

	<para xml:lang="en">Unfortunately these library-based defenses have a number
        of shortcomings.  These libraries only protect against a very
        small set of security related issues and they neglect to fix
        the actual problem.  These defenses may fail if the
        application was compiled with -fomit-frame-pointer.  Also, the
        LD_PRELOAD and LD_LIBRARY_PATH environment variables can be
        overwritten/unset by the user.</para>
        </sect3>

        </sect2>
      </sect1>

      <sect1 xml:id="secure-setuid"><title xml:lang="en">SetUID issues</title>

      <indexterm xml:lang="en"><primary>seteuid</primary></indexterm>

      <para xml:lang="en">There are at least 6 different IDs associated with any
      given process.  Because of this you have to be very careful with
      the access that your process has at any given time.  In
      particular, all seteuid applications should give up their
      privileges as soon as it is no longer required.</para>

      <indexterm xml:lang="en">
        <primary>user IDs</primary>
          <secondary>real user ID</secondary>
      </indexterm>
      <indexterm xml:lang="en">
        <primary>user IDs</primary>
          <secondary>effective user ID</secondary>
      </indexterm>

      <para xml:lang="en">The real user ID can only be changed by a superuser
      process.  The <application>login</application> program sets this
      when a user initially logs in and it is seldom changed.</para>

      <para xml:lang="en">The effective user ID is set by the
      <function>exec()</function> functions if a program has its
      seteuid bit set.  An application can call
      <function>seteuid()</function> at any time to set the effective
      user ID to either the real user ID or the saved set-user-ID.
      When the effective user ID is set by <function>exec()</function>
      functions, the previous value is saved in the saved set-user-ID.</para>

      </sect1>

      <sect1 xml:id="secure-chroot"><title xml:lang="en">Limiting your program's environment</title>

      <indexterm xml:lang="en"><primary>chroot()</primary></indexterm>

      <para xml:lang="en">The traditional method of restricting a process
      is with the <function>chroot()</function> system call.  This
      system call changes the root directory from which all other
      paths are referenced for a process and any child processes.  For
      this call to succeed the process must have execute (search)
      permission on the directory being referenced.  The new
      environment does not actually take effect until you
      <function>chdir()</function> into your new environment.  It
      should also be noted that a process can easily break out of a
      chroot environment if it has root privilege.  This could be
      accomplished by creating device nodes to read kernel memory,
      attaching a debugger to a process outside of the <citerefentry><refentrytitle>chroot</refentrytitle><manvolnum>8</manvolnum></citerefentry>
      environment, or in
      many other creative ways.</para>

      <para xml:lang="en">The behavior of the <function>chroot()</function> system
      call can be controlled somewhat with the
      kern.chroot_allow_open_directories <command>sysctl</command>
      variable.  When this value is set to 0,
      <function>chroot()</function> will fail with EPERM if there are
      any directories open.  If set to the default value of 1, then
      <function>chroot()</function> will fail with EPERM if there are
      any directories open and the process is already subject to a
      <function>chroot()</function> call.  For any other value, the
      check for open directories will be bypassed completely.</para>

      <sect2><title xml:lang="en">FreeBSD's jail functionality</title>

      <indexterm xml:lang="en"><primary>jail</primary></indexterm>

      <para xml:lang="en">The concept of a Jail extends upon the
      <function>chroot()</function> by limiting the powers of the
      superuser to create a true `virtual server'.  Once a prison is
      set up all network communication must take place through the
      specified IP address, and the power of "root privilege" in this
      jail is severely constrained.</para>

      <para xml:lang="en">While in a prison, any tests of superuser power within the
      kernel using the <function>suser()</function> call will fail.
      However, some calls to <function>suser()</function> have been
      changed to a new interface <function>suser_xxx()</function>.
      This function is responsible for recognizing or denying access
      to superuser power for imprisoned processes.</para>

      <para xml:lang="en">A superuser process within a jailed environment has the
      power to:</para>

      <itemizedlist>
      <listitem><simpara xml:lang="en">Manipulate credential with
        <function>setuid</function>, <function>seteuid</function>,
        <function>setgid</function>, <function>setegid</function>,
        <function>setgroups</function>, <function>setreuid</function>,
        <function>setregid</function>, <function>setlogin</function></simpara></listitem>
      <listitem><simpara xml:lang="en">Set resource limits with <function>setrlimit</function></simpara></listitem>
      <listitem><simpara xml:lang="en">Modify some sysctl nodes
        (kern.hostname)</simpara></listitem>
      <listitem><simpara xml:lang="en"><function>chroot()</function></simpara></listitem>
      <listitem><simpara xml:lang="en">Set flags on a vnode:
        <function>chflags</function>,
        <function>fchflags</function></simpara></listitem>
      <listitem><simpara xml:lang="en">Set attributes of a vnode such as file
        permission, owner, group, size, access time, and modification
        time.</simpara></listitem>
      <listitem><simpara xml:lang="en">Bind to privileged ports in the Internet
        domain (ports &lt; 1024)</simpara></listitem>
      </itemizedlist>

      <para xml:lang="en"><function>Jail</function> is a very useful tool for
      running applications in a secure environment but it does have
      some shortcomings.  Currently, the IPC mechanisms have not been
      converted to the <function>suser_xxx</function> so applications
      such as MySQL cannot be run within a jail.  Superuser access
      may have a very limited meaning within a jail, but there is
      no way to specify exactly what "very limited" means.</para>
      </sect2>

      <sect2><title xml:lang="en"><trademark class="registered">POSIX</trademark>.1e Process Capabilities</title>

      <indexterm xml:lang="en"><primary>POSIX.1e Process Capabilities</primary></indexterm>
      <indexterm xml:lang="en"><primary>TrustedBSD</primary></indexterm>

      <para xml:lang="en"><trademark class="registered">POSIX</trademark> has released a working draft that adds event
      auditing, access control lists, fine grained privileges,
      information labeling, and mandatory access control.</para>
      <para xml:lang="en">This is a work in progress and is the focus of the <link xlink:href="http://www.trustedbsd.org/">TrustedBSD</link> project.  Some
      of the initial work has been committed to FreeBSD-CURRENT
      (cap_set_proc(3)).</para>

      </sect2>

      </sect1>

      <sect1 xml:id="secure-trust"><title xml:lang="en">Trust</title>

      <para xml:lang="en">An application should never assume that anything about the
      users environment is sane.  This includes (but is certainly not
      limited to): user input, signals, environment variables,
      resources, IPC, mmaps, the filesystem working directory, file
      descriptors, the # of open files, etc.</para>

      <indexterm xml:lang="en"><primary>positive filtering</primary></indexterm>
      <indexterm xml:lang="en"><primary>data validation</primary></indexterm>

      <para xml:lang="en">You should never assume that you can catch all forms of
      invalid input that a user might supply.  Instead, your
      application should use positive filtering to only allow a
      specific subset of inputs that you deem safe.  Improper data
      validation has been the cause of many exploits, especially with
      CGI scripts on the world wide web.  For filenames you need to be
      extra careful about paths ("../", "/"), symbolic links, and
      shell escape characters.</para>

      <indexterm xml:lang="en"><primary>Perl Taint mode</primary></indexterm>

      <para xml:lang="en">Perl has a really cool feature called "Taint" mode which
      can be used to prevent scripts from using data derived outside
      the program in an unsafe way.  This mode will check command line
      arguments, environment variables, locale information, the
      results of certain syscalls (<function>readdir()</function>,
      <function>readlink()</function>,
      <function>getpwxxx()</function>), and all file input.</para>

      </sect1>

      <sect1 xml:id="secure-race-conditions">
      <title xml:lang="en">Race Conditions</title>

      <para xml:lang="en">A race condition is anomalous behavior caused by the
      unexpected dependence on the relative timing of events.  In
      other words, a programmer incorrectly assumed that a particular
      event would always happen before another.</para>

      <indexterm xml:lang="en"><primary>race conditions</primary>
      <secondary>signals</secondary></indexterm>

      <indexterm xml:lang="en"><primary>race conditions</primary>
      <secondary>access checks</secondary></indexterm>

      <indexterm xml:lang="en"><primary>race conditions</primary>
      <secondary>file opens</secondary></indexterm>

      <para xml:lang="en">Some of the common causes of race conditions are signals,
      access checks, and file opens.  Signals are asynchronous events
      by nature so special care must be taken in dealing with them.
      Checking access with <function>access(2)</function> then
      <function>open(2)</function> is clearly non-atomic.  Users can
      move files in between the two calls.  Instead, privileged
      applications should <function>seteuid()</function> and then call
      <function>open()</function> directly.  Along the same lines, an
      application should always set a proper umask before
      <function>open()</function> to obviate the need for spurious
      <function>chmod()</function> calls.</para>

      </sect1>

     </chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD: head/en_US.ISO8859-1/books/developers-handbook/l10n/chapter.xml 48482 2016-03-27 19:17:51Z jgh $
-->
<chapter version="5.0" xml:id="l10n">
    <title xml:lang="en">Localization and Internationalization - L10N and I18N</title>

    <sect1 xml:id="l10n-programming">
      <title xml:lang="en">Programming I18N Compliant Applications</title>
      <indexterm xml:lang="en"><primary>Qt</primary></indexterm>
      <indexterm xml:lang="en"><primary>GTK</primary></indexterm>
      <para xml:lang="en">To make your application more useful for speakers of other
	languages, we hope that you will program I18N compliant.  The GNU
	gcc compiler and GUI libraries like QT and GTK support I18N through
	special handling of strings.  Making a program I18N compliant is
	very easy.  It allows contributors to port your application to
	other languages quickly.  Refer to the library specific I18N
	documentation for more details.</para>

      <para xml:lang="en">In contrast with common perception, I18N compliant code is
	easy to write.  Usually, it only involves wrapping your strings
	with library specific functions.  In addition, please be sure to
	allow for wide or multibyte character support.</para>

      <sect2>
	<title xml:lang="en">A Call to Unify the I18N Effort</title>

	<para xml:lang="en">It has come to our attention that the individual I18N/L10N
	  efforts for each country has been repeating each others'
	  efforts.  Many of us have been reinventing the wheel repeatedly
	  and inefficiently.  We hope that the various major groups in
	  I18N could congregate into a group effort similar to the Core
	  Team's responsibility.</para>

	<para xml:lang="en">Currently, we hope that, when you write or port I18N
	  programs, you would send it out to each country's related
	  FreeBSD mailing list for testing.  In the future, we hope to
	  create applications that work in all the languages
	  out-of-the-box without dirty hacks.</para>

	<para xml:lang="en">The <link xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-i18n">FreeBSD internationalization mailing list</link> has been established.  If you are an I18N/L10N
	  developer, please send your comments, ideas, questions, and
	  anything you deem related to it.</para>
      </sect2>

      <sect2>
	<title xml:lang="en">Perl and Python</title>
        <indexterm xml:lang="en">
         <primary>Perl</primary>
        </indexterm>
        <indexterm xml:lang="en">
          <primary>Python</primary>
        </indexterm>

	<para xml:lang="en">Perl and Python have I18N and wide character handling
	  libraries.  Please use them for I18N compliance.</para>
      </sect2>
    </sect1>

    <sect1 xml:id="posix-nls">
      <info><title xml:lang="en">Localized Messages with POSIX.1 Native Language Support (NLS)</title>
	<authorgroup>
	  <author xml:lang="en"><personname><firstname>Gábor</firstname><surname>Kövesdán</surname></personname><contrib>Contributed by </contrib></author>
	</authorgroup>
      </info>

      

      <para xml:lang="en">Beyond the basic I18N functions, like supporting various input
	encodings or supporting national conventions, such as the different
	decimal	separators, at a higher level of I18N, it is possible to localize the
	messages written to the output by the various programs.  A common way of doing
	this is using the POSIX.1 NLS functions, which are provided as a part
	of the FreeBSD base system.</para>

      <sect2 xml:id="nls-catalogs">
	<title xml:lang="en">Organizing Localized Messages into Catalog Files</title>

	<para xml:lang="en">POSIX.1 NLS is based on catalog files, which contain the
	  localized messages in the desired encoding.  The messages are
	  organized into sets and each message is identified by an integer
	  number in the containing set.  The catalog files are conventionally
	  named after the locale they contain localized messages for, followed
	  by the <literal>.msg</literal> extension.  For instance, the
	  Hungarian messages for ISO8859-2 encoding should be stored in a file
	  called <filename>hu_HU.ISO8859-2</filename>.</para>

	<para xml:lang="en">These catalog files are common text files that contain the
	  numbered messages.  It is possible to write comments by starting
	  the line with a <literal>$</literal> sign.  Set boundaries are also separated by
	  special comments, where the keyword <literal>set</literal> must
	  directly follow the <literal>$</literal> sign.  The <literal>set</literal> keyword
	  is then followed by the set number.  For example:</para>

	<programlisting xml:lang="en">$set 1</programlisting>

	<para xml:lang="en">The actual message entries start with the message number and
	  followed by the localized message.  The well-known
	  modifiers from <citerefentry><refentrytitle>printf</refentrytitle><manvolnum>3</manvolnum></citerefentry> are accepted:</para>

	<programlisting xml:lang="en">15 "File not found: %s\n"</programlisting>

	<para xml:lang="en">The language catalog files have to be compiled into a binary
	  form before they can be opened from the program.  This conversion
	  is done with the <citerefentry><refentrytitle>gencat</refentrytitle><manvolnum>1</manvolnum></citerefentry> utility.  Its first argument is the
	  filename of the compiled catalog and its further arguments are the
	  input catalogs.  The localized messages can also be organized into
	  more catalog files and then all of them can be processed with
	  <citerefentry><refentrytitle>gencat</refentrytitle><manvolnum>1</manvolnum></citerefentry>.</para>
      </sect2>

      <sect2 xml:id="nls-using">
	<title xml:lang="en">Using the Catalog Files from the Source Code</title>

	<para xml:lang="en">Using the catalog files is simple.  To use
	  the related functions, <filename>nl_types.h</filename> must be included.  Before
	  using a catalog, it has to be opened with <citerefentry><refentrytitle>catopen</refentrytitle><manvolnum>3</manvolnum></citerefentry>.
	  The function takes two arguments.  The first parameter is the name of the
	  installed and compiled catalog.  Usually, the name of the
	  program is used, such as <application>grep</application>.
	  This name will be used when looking for the compiled
	  catalog file.  The <citerefentry><refentrytitle>catopen</refentrytitle><manvolnum>3</manvolnum></citerefentry> call looks for this file
	  in <filename>/usr/share/nls/<replaceable>locale</replaceable>/<replaceable>catname</replaceable></filename>
	  and in <filename>/usr/local/share/nls/<replaceable>locale</replaceable>/<replaceable>catname</replaceable></filename>,
	  where <literal>locale</literal> is the locale set and
	  <literal>catname</literal> is the catalog name being
	  discussed.  The second parameter is a constant, which can have
	  two values:</para>

	<itemizedlist>
	  <listitem>
	    <para xml:lang="en"><literal>NL_CAT_LOCALE</literal>, which means that
	      the used catalog file will be based on
	      <envar>LC_MESSAGES</envar>.</para>
	  </listitem>
	  <listitem>
	    <para xml:lang="en"><literal>0</literal>, which means that
	      <envar>LANG</envar> has to be used to open
	      the proper catalog.</para>
	  </listitem>
	</itemizedlist>

	<para xml:lang="en">The <citerefentry><refentrytitle>catopen</refentrytitle><manvolnum>3</manvolnum></citerefentry> call returns a catalog identifier of
	  type <literal>nl_catd</literal>.  Please refer to the manual page for a list of possible returned error
	  codes.</para>

	<para xml:lang="en">After opening a catalog <citerefentry><refentrytitle>catgets</refentrytitle><manvolnum>3</manvolnum></citerefentry> can be used to retrieve
	  a message.  The first parameter is the catalog identifier returned
	  by <citerefentry><refentrytitle>catopen</refentrytitle><manvolnum>3</manvolnum></citerefentry>, the second one is the number of the set, the
	  third one is the number of the messages, and the fourth one is a
	  fallback message, which will be returned if the requested message
	  cannot be retrieved from the catalog file.</para>

	<para xml:lang="en">After using the catalog file, it must be closed by calling
	  <citerefentry><refentrytitle>catclose</refentrytitle><manvolnum>3</manvolnum></citerefentry>, which has one argument, the catalog id.</para>
      </sect2>

      <sect2 xml:id="nls-example">
	<title xml:lang="en">A Practical Example</title>

	<para xml:lang="en">The following example will demonstrate an easy solution on how to
	  use NLS catalogs in a flexible way.</para>

	<para xml:lang="en">The below lines need to be put into a common header file of
	  the program, which is included into all source files where
	  localized messages are necessary:</para>

	<programlisting xml:lang="en">
#ifdef WITHOUT_NLS
#define getstr(n)	 nlsstr[n]
#else
#include &lt;nl_types.h&gt;

extern nl_catd		 catalog;
#define getstr(n)	 catgets(catalog, 1, n, nlsstr[n])
#endif

extern char		*nlsstr[];</programlisting>

	<para xml:lang="en">Next, put these lines into the global declaration part of the
	  main source file:</para>

	<programlisting xml:lang="en">
#ifndef WITHOUT_NLS
#include &lt;nl_types.h&gt;
nl_catd	 catalog;
#endif

/*
 * Default messages to use when NLS is disabled or no catalog
 * is found.
 */
char    *nlsstr[] = {
        "",
/* 1*/  "some random message",
/* 2*/  "some other message"
};</programlisting>

	<para xml:lang="en">Next come the real code snippets, which open, read, and
	  close the catalog:</para>

	<programlisting xml:lang="en">
#ifndef WITHOUT_NLS
	catalog = catopen("myapp", NL_CAT_LOCALE);
#endif

...

printf(getstr(1));

...

#ifndef WITHOUT_NLS
	catclose(catalog);
#endif</programlisting>

	<sect3>
	  <title xml:lang="en">Reducing Strings to Localize</title>

	  <para xml:lang="en">There is a good way of reducing the strings that
	    need to be localized by using <application>libc</application>
	    error messages.  This is also useful to just avoid duplication
	    and provide consistent error messages for the common errors
	    that can be encountered by a great many of programs.</para>

	  <para xml:lang="en">First, here is an example that does not use
	    <application>libc</application> error messages:</para>

	  <programlisting xml:lang="en">
#include &lt;err.h&gt;
...
if (!S_ISDIR(st.st_mode))
	errx(1, "argument is not a directory");
	  </programlisting>

	  <para xml:lang="en">This can be transformed to print an error message by
	    reading <varname>errno</varname> and printing an error message
	    accordingly:</para>

	  <programlisting xml:lang="en">
#include &lt;err.h&gt;
#include &lt;errno.h&gt;
...
if (!S_ISDIR(st.st_mode)) {
	errno = ENOTDIR;
	err(1, NULL);
}
	  </programlisting>

	  <para xml:lang="en">In this example, the custom string is eliminated, thus
	    translators will have less work when localizing the program
	    and users will see the usual <quote>Not a directory</quote>
	    error message when they encounter this error.  This message
	    will probably seem more familiar to them.  Please note that
	    it was necessary to include <filename>errno.h</filename> in order to directly
	    access <varname>errno</varname>.</para>

	  <para xml:lang="en">It is worth to note that there are cases when
	    <varname>errno</varname> is set automatically by a preceding
	    call, so it is not necessary to set it explicitly:</para>

	  <programlisting xml:lang="en">
#include &lt;err.h&gt;
...
if ((p = malloc(size)) == NULL)
	err(1, NULL);
	  </programlisting>
	</sect3>
      </sect2>

      <sect2 xml:id="nls-mk">
	<title xml:lang="en">Making use of <filename>bsd.nls.mk</filename></title>

	<para xml:lang="en">Using the catalog files requires few repeatable steps,
	  such as compiling the catalogs and installing them to the
	  proper location.  In order to simplify this process even
	  more, <filename>bsd.nls.mk</filename> introduces some macros.
	  It is not necessary to include <filename>bsd.nls.mk</filename>
	  explicitly, it is pulled in from the common Makefiles,
	  such as <filename>bsd.prog.mk</filename> or
	  <filename>bsd.lib.mk</filename>.</para>

	<para xml:lang="en">Usually it is enough to define <varname>NLSNAME</varname>,
	  which should have the catalog name mentioned as the first
	  argument of <citerefentry><refentrytitle>catopen</refentrytitle><manvolnum>3</manvolnum></citerefentry> and list the catalog files in
	  <varname>NLS</varname> without their <literal>.msg</literal>
	  extension.  Here is an example, which makes it possible to
	  to disable NLS when used with the code examples before.
	  The <varname>WITHOUT_NLS</varname> <citerefentry><refentrytitle>make</refentrytitle><manvolnum>1</manvolnum></citerefentry> variable has
	  to be defined in order to build the program without NLS
	  support.</para>

	<programlisting xml:lang="en">
.if !defined(WITHOUT_NLS)
NLS=	es_ES.ISO8859-1
NLS+=	hu_HU.ISO8859-2
NLS+=	pt_BR.ISO8859-1
.else
CFLAGS+=	-DWITHOUT_NLS
.endif</programlisting>

	<para xml:lang="en">Conventionally, the catalog files are placed under the
	  <filename>nls</filename> subdirectory and
	  this is the default behavior of <filename>bsd.nls.mk</filename>.
	  It is possible, though to override the location of the
	  catalogs with the <varname>NLSSRCDIR</varname> <citerefentry><refentrytitle>make</refentrytitle><manvolnum>1</manvolnum></citerefentry>
	  variable.  The default name of the precompiled catalog files
	  also follow the naming convention mentioned before.  It can be
	  overridden by setting the <varname>NLSNAME</varname> variable.
	  There are other options to fine tune the processing of the catalog
	  files but usually it is not needed, thus they are not described
	  here.  For further information on <filename>bsd.nls.mk</filename>,
	  please refer to the file itself, it is short and easy to
	  understand.</para>
      </sect2>
    </sect1>
  </chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD: head/en_US.ISO8859-1/books/developers-handbook/policies/chapter.xml 52145 2018-08-17 12:37:22Z bcr $
-->
<chapter version="5.0" xml:id="policies">
  <info>
    <title xml:lang="en">Source Tree Guidelines and Policies</title>

    <authorgroup>
      <author xml:lang="en">
	<personname>
	  <firstname>Poul-Henning</firstname>
	  <surname>Kamp</surname>
	</personname>
	<contrib>Contributed by </contrib>
      </author>
      <author xml:lang="en">
	<personname>
	  <firstname>Giorgos</firstname>
	  <surname>Keramidas</surname>
	</personname>
      </author>
    </authorgroup>
  </info>

  <para xml:lang="en">This chapter documents various guidelines and policies in
    force for the FreeBSD source tree.</para>

  <sect1 xml:id="policies-style">
    <title xml:lang="en">Style Guidelines</title>

    <indexterm xml:lang="en"><primary>style</primary></indexterm>

    <para xml:lang="en">Consistent coding style is extremely important, particularly
      with large projects like FreeBSD.  Code should follow the FreeBSD
      coding styles described in <citerefentry><refentrytitle>style</refentrytitle><manvolnum>9</manvolnum></citerefentry> and
      <citerefentry><refentrytitle>style.Makefile</refentrytitle><manvolnum>5</manvolnum></citerefentry>.</para>
  </sect1>

  <sect1 xml:id="policies-maintainer">
    <title xml:lang="en"><varname>MAINTAINER</varname> on Makefiles</title>

    <indexterm xml:lang="en"><primary>ports maintainer</primary></indexterm>

    <para xml:lang="en">If a particular portion of the FreeBSD
      <filename>src/</filename> distribution is being maintained by a
      person or group of persons, this is communicated through an
      entry in <filename>src/MAINTAINERS</filename>.  Maintainers of
      ports within the Ports Collection express their maintainership
      to the world by adding a <varname>MAINTAINER</varname> line to
      the <filename>Makefile</filename> of the port in
      question:</para>

    <programlisting xml:lang="en"><varname>MAINTAINER</varname>= <replaceable>email-addresses</replaceable></programlisting>

    <tip>
      <para xml:lang="en">For other parts of the repository, or for sections not
	listed as having a maintainer, or when you are unsure who the
	active maintainer is, try looking at the recent commit history
	of the relevant parts of the source tree.  It is quite often
	the case that a maintainer is not explicitly named, but the
	people who are actively working in a part of the source tree
	for, say, the last couple of years are interested in reviewing
	changes.  Even if this is not specifically mentioned in the
	documentation or the source itself, asking for a review as a
	form of courtesy is a very reasonable thing to do.</para>
    </tip>

    <para xml:lang="en">The role of the maintainer is as follows:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en">The maintainer owns and is responsible for that code.
	  This means that he or she is responsible for fixing bugs and
	  answering problem reports pertaining to that piece of the
	  code, and in the case of contributed software, for tracking
	  new versions, as appropriate.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Changes to directories which have a maintainer defined
	  shall be sent to the maintainer for review before being
	  committed.  Only if the maintainer does not respond for an
	  unacceptable period of time, to several emails, will it be
	  acceptable to commit changes without review by the
	  maintainer.  However, it is suggested that you try to have
	  the changes reviewed by someone else if at all
	  possible.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">It is of course not acceptable to add a person or group
	  as maintainer unless they agree to assume this duty.  On the
	  other hand it does not have to be a committer and it can
	  easily be a group of people.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 xml:id="policies-contributed">
    <info>
      <title xml:lang="en">Contributed Software</title>

      <authorgroup>
	<author xml:lang="en">
	  <personname>
	    <firstname>Poul-Henning</firstname>
	    <surname>Kamp</surname>
	  </personname>
	  <contrib>Contributed by </contrib>
	</author>
	<author xml:lang="en">
	  <personname>
	    <firstname>David</firstname>
	    <surname>O'Brien</surname>
	  </personname>
	</author>
	<author xml:lang="en">
	  <personname>
	    <firstname>Gavin</firstname>
	    <surname>Atkinson</surname>
	  </personname>
	</author>
      </authorgroup>
    </info>

    <indexterm xml:lang="en"><primary>contributed software</primary></indexterm>

    <para xml:lang="en">Some parts of the FreeBSD distribution consist of software
      that is actively being maintained outside the FreeBSD project.
      For historical reasons, we call this
      <emphasis>contributed</emphasis> software.  Some examples are
      <application>sendmail</application>,
      <application>gcc</application> and
      <application>patch</application>.</para>

    <para xml:lang="en">Over the last couple of years, various methods have been
      used in dealing with this type of software and all have some
      number of advantages and drawbacks.  No clear winner has
      emerged.</para>

    <para xml:lang="en">Since this is the case, after some debate one of these
      methods has been selected as the <quote>official</quote> method
      and will be required for future imports of software of this
      kind.  Furthermore, it is strongly suggested that existing
      contributed software converge on this model over time, as it has
      significant advantages over the old method, including the
      ability to easily obtain diffs relative to the
      <quote>official</quote> versions of the source by everyone (even
      without direct repository access).  This will make it
      significantly easier to return changes to the primary developers
      of the contributed software.</para>

    <para xml:lang="en">Ultimately, however, it comes down to the people actually
      doing the work.  If using this model is particularly unsuited to
      the package being dealt with, exceptions to these rules may be
      granted only with the approval of the core team and with the
      general consensus of the other developers.  The ability to
      maintain the package in the future will be a key issue in the
      decisions.</para>

    <note>
      <para xml:lang="en">Because it makes it harder to import future versions
	minor, trivial and/or cosmetic changes are
	<emphasis>strongly discouraged</emphasis> on files that are
	still tracking the vendor branch.</para>
    </note>

    <sect2 xml:id="vendor-import-svn">
      <info>
	<title xml:lang="en">Vendor Imports with SVN</title>

	<authorgroup>
	  <author xml:lang="en">
	    <personname>
	      <firstname>Dag-Erling</firstname>
	      <surname>Smørgrav</surname>
	    </personname>
	    <contrib>Contributed by </contrib>
	  </author>
	</authorgroup>
      </info>

      <para xml:lang="en">This section describes the vendor import procedure with
	<application>Subversion</application> in details.</para>

      <procedure>
	<step>
	  <title xml:lang="en">Preparing the Tree</title>

	  <para xml:lang="en">If this is your first import after the switch to
	    <acronym>SVN</acronym>, you will have to flatten and clean
	    up the vendor tree, and bootstrap merge history in the
	    main tree.  If not, you can safely omit this step.</para>

	  <para xml:lang="en">During the conversion from <acronym>CVS</acronym> to
	    <acronym>SVN</acronym>, vendor branches were imported with
	    the same layout as the main tree.  For example, the
	    <application>foo</application> vendor sources ended up in
	    <filename>vendor/<replaceable>foo</replaceable>/dist/contrib/<replaceable>foo</replaceable></filename>,
	    but it is pointless and rather inconvenient.  What we
	    really want is to have the vendor source directly in
	    <filename>vendor/<replaceable>foo</replaceable>/dist</filename>,
	    like this:</para>

	  <screen xml:lang="en"><prompt>%</prompt> <userinput>cd vendor/<replaceable>foo</replaceable>/dist/contrib/<replaceable>foo</replaceable></userinput>
<prompt>%</prompt> <userinput>svn move $(svn list) ../..</userinput>
<prompt>%</prompt> <userinput>cd ../..</userinput>
<prompt>%</prompt> <userinput>svn remove contrib</userinput>
<prompt>%</prompt> <userinput>svn propdel -R svn:mergeinfo</userinput>
<prompt>%</prompt> <userinput>svn commit</userinput></screen>

	  <para xml:lang="en">Note that, the <literal>propdel</literal> bit is
	    necessary because starting with 1.5, Subversion will
	    automatically add <literal>svn:mergeinfo</literal> to any
	    directory you copy or move.  In this case, you will not
	    need this information, since you are not going to merge
	    anything from the tree you deleted.</para>

	  <note>
	    <para xml:lang="en">You may want to flatten the tags as well.  The
	      procedure is exactly the same.  If you do this, put off
	      the commit until the end.</para>
	  </note>

	  <para xml:lang="en">Check the <filename>dist</filename> tree and perform
	    any cleanup that is deemed to be necessary.  You may want
	    to disable keyword expansion, as it makes no sense on
	    unmodified vendor code.  In some cases, it can be even be
	    harmful.</para>

	  <screen xml:lang="en"><prompt>%</prompt> <userinput>svn propdel svn:keywords -R .</userinput>
<prompt>%</prompt> <userinput>svn commit</userinput></screen>

	  <para xml:lang="en">Bootstrapping of <literal>svn:mergeinfo</literal> on
	    the target directory (in the main tree) to the revision
	    that corresponds to the last change was made to the vendor
	    tree prior to importing new sources is also needed:</para>

	  <screen xml:lang="en"><prompt>%</prompt> <userinput>cd head/contrib/<replaceable>foo</replaceable></userinput>
<prompt>%</prompt> <userinput>svn merge --record-only <replaceable>svn_base</replaceable>/vendor/<replaceable>foo</replaceable>/dist@<replaceable>12345678</replaceable> .</userinput>
<prompt>%</prompt> <userinput>svn commit</userinput></screen>

	  <para xml:lang="en">where <replaceable>svn_base</replaceable> is the base
	    directory of your <acronym>SVN</acronym> repository, e.g.,
	    <literal>svn+ssh://svn.FreeBSD.org/base</literal>.</para>
	</step>

	<step>
	  <title xml:lang="en">Importing New Sources</title>

	  <para xml:lang="en">Prepare a full, clean tree of the vendor sources.
	    With <acronym>SVN</acronym>, we can keep a full
	    distribution in the vendor tree without bloating the main
	    tree.  Import everything but merge only what is
	    needed.</para>

	  <para xml:lang="en">Note that you will need to add any files that were
	    added since the last vendor import, and remove any that
	    were removed.  To facilitate this, you should prepare
	    sorted lists of the contents of the vendor tree and of the
	    sources you are about to import:</para>

	  <screen xml:lang="en"><prompt>%</prompt> <userinput>cd vendor/<replaceable>foo</replaceable>/dist</userinput>
<prompt>%</prompt> <userinput>svn list -R | grep -v '/$' | sort &gt; ../<replaceable>old</replaceable></userinput>
<prompt>%</prompt> <userinput>cd ../<replaceable>foo-9.9</replaceable></userinput>
<prompt>%</prompt> <userinput>find . -type f | cut -c 3- | sort &gt; ../<replaceable>new</replaceable></userinput></screen>

	  <para xml:lang="en">With these two files, the following command will list
	    removed files (files only in
	    <filename><replaceable>old</replaceable></filename>):</para>

	  <screen xml:lang="en"><prompt>%</prompt> <userinput>comm -23 ../<replaceable>old</replaceable> ../<replaceable>new</replaceable></userinput></screen>

	  <para xml:lang="en">While the command below will list added files (files
	    only in
	    <filename><replaceable>new</replaceable></filename>):</para>

	  <screen xml:lang="en"><prompt>%</prompt> <userinput>comm -13 ../<replaceable>old</replaceable> ../<replaceable>new</replaceable></userinput></screen>

	  <para xml:lang="en">Let us put this together:</para>

	  <screen xml:lang="en"><prompt>%</prompt> <userinput>cd vendor/<replaceable>foo</replaceable>/<replaceable>foo-9.9</replaceable></userinput>
<prompt>%</prompt> <userinput>tar cf - . | tar xf - -C ../dist</userinput>
<prompt>%</prompt> <userinput>cd ../dist</userinput>
<prompt>%</prompt> <userinput>comm -23 ../<replaceable>old</replaceable> ../<replaceable>new</replaceable> | xargs svn remove</userinput>
<prompt>%</prompt> <userinput>comm -13 ../<replaceable>old</replaceable> ../<replaceable>new</replaceable> | xargs svn add</userinput></screen>

	  <warning>
	    <para xml:lang="en">If there are new directories in the new
	      distribution, the last command will fail.  You will have
	      to add the directories, and run it again.  Conversely,
	      if any directories were removed, you will have to remove
	      them manually.</para>
	  </warning>

	  <para xml:lang="en">Check properties on any new files:</para>

	  <itemizedlist>
	    <listitem>
	      <para xml:lang="en">All text files
		should have <literal>svn:eol-style</literal> set to
		<literal>native</literal>.</para>
	    </listitem>

	    <listitem>
	      <para xml:lang="en">All binary files should have
		<literal>svn:mime-type</literal> set to
		<literal>application/octet-stream</literal>, unless
		there is a more appropriate media type.</para>
	    </listitem>

	    <listitem>
	      <para xml:lang="en">Executable files should have
		<literal>svn:executable</literal> set to
		<literal>*</literal>.</para>
	    </listitem>

	    <listitem>
	      <para xml:lang="en">There should be no other properties on any file in
		the tree.</para>
	    </listitem>
	  </itemizedlist>

	  <note>
	    <para xml:lang="en">You are ready to commit, but you should first check
	      the output of <command>svn stat</command> and
	      <command>svn diff</command> to make sure everything is
	      in order.</para>
	  </note>

	  <para xml:lang="en">Once you have committed the new vendor release, you
	    should tag it for future reference.  The best and quickest
	    way is to do it directly in the repository:</para>

	  <screen xml:lang="en"><prompt>%</prompt> <userinput>svn copy <replaceable>svn_base</replaceable>/vendor/<replaceable>foo</replaceable>/dist <replaceable>svn_base</replaceable>/vendor/<replaceable>foo</replaceable>/<replaceable>9.9</replaceable></userinput></screen>

	  <para xml:lang="en">To get the new tag, you can update your working copy
	    of
	    <filename>vendor/<replaceable>foo</replaceable></filename>.</para>

	  <note>
	    <para xml:lang="en">If you choose to do the copy in the checkout
	      instead, do not forget to remove the generated
	      <literal>svn:mergeinfo</literal> as described
	      above.</para>
	  </note>
	</step>

	<step>
	  <title xml:lang="en">Merging to <emphasis>-HEAD</emphasis></title>

	  <para xml:lang="en">After you have prepared your import, it is time to
	    merge.  Option <option>--accept=postpone</option> tells
	    <acronym>SVN</acronym> not to handle merge conflicts yet,
	    because they will be taken care of manually:</para>

	  <screen xml:lang="en"><prompt>%</prompt> <userinput>cd head/contrib/<replaceable>foo</replaceable></userinput>
<prompt>%</prompt> <userinput>svn update</userinput>
<prompt>%</prompt> <userinput>svn merge --accept=postpone <replaceable>svn_base</replaceable>/vendor/<replaceable>foo</replaceable>/dist</userinput></screen>

	  <para xml:lang="en">Resolve any conflicts, and make sure that any files
	    that were added or removed in the vendor tree have been
	    properly added or removed in the main tree.  It is always
	    a good idea to check differences against the vendor
	    branch:</para>

	  <screen xml:lang="en"><prompt>%</prompt> <userinput>svn diff --no-diff-deleted --old=<replaceable>svn_base</replaceable>/vendor/<replaceable>foo</replaceable>/dist --new=.</userinput></screen>

	  <para xml:lang="en"><option>--no-diff-deleted</option> tells
	    <acronym>SVN</acronym> not to check files that are in the
	    vendor tree but not in the main tree.</para>

	  <note>
	    <para xml:lang="en">With <acronym>SVN</acronym>, there is no concept of
	      on or off the vendor branch.  If a file that previously
	      had local modifications no longer does, just remove any
	      left-over cruft, such as FreeBSD version tags, so it no
	      longer shows up in diffs against the vendor tree.</para>
	  </note>

	  <para xml:lang="en">If any changes are required for the world to build
	    with the new sources, make them now — and test until
	    you are satisfied that everything build and runs
	    correctly.</para>
	</step>

	<step>
	  <title xml:lang="en">Commit</title>

	  <para xml:lang="en">Now, you are ready to commit.  Make sure you get
	    everything in one go.  Ideally, you would have done all
	    steps in a clean tree, in which case you can just commit
	    from the top of that tree.  That is the best way to avoid
	    surprises.  If you do it properly, the tree will move
	    atomically from a consistent state with the old code to a
	    consistent state with the new code.</para>
	</step>
      </procedure>
    </sect2>
  </sect1>

  <sect1 xml:id="policies-encumbered">
    <title xml:lang="en">Encumbered Files</title>

    <para xml:lang="en">It might occasionally be necessary to include an encumbered
      file in the FreeBSD source tree.  For example, if a device
      requires a small piece of binary code to be loaded to it before
      the device will operate, and we do not have the source to that
      code, then the binary file is said to be encumbered.  The
      following policies apply to including encumbered files in the
      FreeBSD source tree.</para>

    <orderedlist>
      <listitem>
	<para xml:lang="en">Any file which is interpreted or executed by the system
	  CPU(s) and not in source format is encumbered.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Any file with a license more restrictive than BSD or GNU
	  is encumbered.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">A file which contains downloadable binary data for use
	  by the hardware is not encumbered, unless (1) or (2) apply
	  to it.  It must be stored in an architecture neutral ASCII
	  format (file2c or uuencoding is recommended).</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Any encumbered file requires specific approval from the
	  <link xlink:href="@@URL_RELPREFIX@@/administration.html#t-core">Core
	    Team</link> before it is added to the repository.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Encumbered files go in <filename>src/contrib</filename>
	  or <filename>src/sys/contrib</filename>.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">The entire module should be kept together.  There is no
	  point in splitting it, unless there is code-sharing with
	  non-encumbered code.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Object files are named
	  <filename><replaceable>arch</replaceable>/<replaceable>filename</replaceable>.o.uu&gt;</filename>.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Kernel files:</para>

	<orderedlist>
	  <listitem>
	    <para xml:lang="en">Should always be referenced in
	      <filename>conf/files.*</filename> (for build
	      simplicity).</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">Should always be in <filename>LINT</filename>, but
	      the <link xlink:href="@@URL_RELPREFIX@@/administration.html#t-core">Core
		Team</link> decides per case if it should be commented
	      out or not.  The <link xlink:href="@@URL_RELPREFIX@@/administration.html#t-core">Core
		Team</link> can, of course, change their minds later
	      on.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">The <firstterm>Release Engineer</firstterm>
	      decides whether or not it goes into the release.</para>
	  </listitem>
	</orderedlist>
      </listitem>

      <listitem>
	<para xml:lang="en">User-land files:</para>

	<orderedlist>
	  <listitem>
	    <para xml:lang="en">The <link xlink:href="@@URL_RELPREFIX@@/administration.html#t-core">Core
		team</link><indexterm xml:lang="en"><primary>core
		  team</primary></indexterm> decides if the code
	      should be part of <command>make world</command>.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">The <link xlink:href="@@URL_RELPREFIX@@/administration.html#t-re">Release
		Engineering</link><indexterm xml:lang="en"><primary>release
		  engineering</primary></indexterm> decides if it goes
	      into the release.</para>
	  </listitem>
	</orderedlist>
      </listitem>
    </orderedlist>
  </sect1>

  <sect1 xml:id="policies-shlib">
    <info>
      <title xml:lang="en">Shared Libraries</title>

      <authorgroup>
	<author xml:lang="en">
	  <personname>
	    <firstname>Satoshi</firstname>
	    <surname>Asami</surname>
	  </personname>
	  <contrib>Contributed by </contrib>
	</author>
	<author xml:lang="en">
	  <personname>
	    <firstname>Peter</firstname>
	    <surname>Wemm</surname>
	  </personname>
	</author>
	<author xml:lang="en">
	  <personname>
	    <firstname>David</firstname>
	    <surname>O'Brien</surname>
	  </personname>
	</author>
      </authorgroup>
    </info>

    <para xml:lang="en">If you are adding shared library support to a port or other
      piece of software that does not have one, the version numbers
      should follow these rules.  Generally, the resulting numbers
      will have nothing to do with the release version of the
      software.</para>

    <para xml:lang="en">The three principles of shared library building are:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en">Start from <literal>1.0</literal></para>
      </listitem>

      <listitem>
	<para xml:lang="en">If there is a change that is backwards compatible, bump
	  minor number (note that ELF systems ignore the minor
	  number)</para>
      </listitem>

      <listitem>
	<para xml:lang="en">If there is an incompatible change, bump major
	  number</para>
      </listitem>
    </itemizedlist>

    <para xml:lang="en">For instance, added functions and bugfixes result in the
      minor version number being bumped, while deleted functions,
      changed function call syntax, etc. will force the major version
      number to change.</para>

    <para xml:lang="en">Stick to version numbers of the form major.minor
      (<replaceable>x</replaceable>.<replaceable>y</replaceable>).
      Our a.out dynamic linker does not handle version numbers of the
      form
      <replaceable>x</replaceable>.<replaceable>y</replaceable>.<replaceable>z</replaceable>
      well.  Any version number after the <replaceable>y</replaceable>
      (i.e., the third digit) is totally ignored when comparing shared
      lib version numbers to decide which library to link with.  Given
      two shared libraries that differ only in the
      <quote>micro</quote> revision, <command>ld.so</command> will
      link with the higher one.  That is, if you link with
      <filename>libfoo.so.3.3.3</filename>, the linker only records
      <literal>3.3</literal> in the headers, and will link with
      anything starting with
      <replaceable>libfoo.so.3</replaceable>.<replaceable>(anything
	&gt;= 3)</replaceable>.<replaceable>(highest
	available)</replaceable>.</para>

    <note>
      <para xml:lang="en"><command>ld.so</command> will always use the highest
	<quote>minor</quote> revision.  For instance, it will use
	<filename>libc.so.2.2</filename> in preference to
	<filename>libc.so.2.0</filename>, even if the program was
	initially linked with <filename>libc.so.2.0</filename>.</para>
    </note>

    <para xml:lang="en">In addition, our ELF dynamic linker does not handle minor
      version numbers at all.  However, one should still specify a
      major and minor version number as our
      <filename>Makefile</filename>s <quote>do the right thing</quote>
      based on the type of system.</para>

    <para xml:lang="en">For non-port libraries, it is also our policy to change the
      shared library version number only once between releases.  In
      addition, it is our policy to change the major shared library
      version number only once between major OS releases (i.e., from
      6.0 to 7.0).  When you make a change to a system library that
      requires the version number to be bumped, check the
      <filename>Makefile</filename>'s commit logs.  It is the
      responsibility of the committer to ensure that the first such
      change since the release will result in the shared library
      version number in the <filename>Makefile</filename> to be
      updated, and any subsequent changes will not.</para>
  </sect1>
</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD: head/en_US.ISO8859-1/books/developers-handbook/testing/chapter.xml 52139 2018-08-16 14:55:29Z bcr $
-->
<chapter version="5.0" xml:id="testing">
  <title xml:lang="en">Regression and Performance Testing</title>

  <para xml:lang="en">Regression tests are used to exercise a particular bit of the
    system to check that it works as expected, and to make sure that
    old bugs are not reintroduced.</para>

  <para xml:lang="en">The FreeBSD regression testing tools can be found in the FreeBSD
    source tree in the directory
    <filename>src/tools/regression</filename>.</para>

  <section xml:id="testing-micro-benchmark">
    <title xml:lang="en">Micro Benchmark Checklist</title>

    <para xml:lang="en">This section contains hints for doing proper
      micro-benchmarking on FreeBSD or of FreeBSD itself.</para>

    <para xml:lang="en">It is not possible to use all of the suggestions below every
      single time, but the more used, the better the benchmark's
      ability to test small differences will be.</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en">Disable <acronym>APM</acronym> and any other kind of
	  clock fiddling (<acronym>ACPI</acronym> ?).</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Run in single user mode.  E.g., <citerefentry><refentrytitle>cron</refentrytitle><manvolnum>8</manvolnum></citerefentry>, and other
	  daemons only add noise.  The <citerefentry><refentrytitle>sshd</refentrytitle><manvolnum>8</manvolnum></citerefentry> daemon can also
	  cause problems.  If ssh access is required during testing
	  either disable the SSHv1 key regeneration, or kill the
	  parent <command>sshd</command> daemon during the
	  tests.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Do not run <citerefentry><refentrytitle>ntpd</refentrytitle><manvolnum>8</manvolnum></citerefentry>.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">If <citerefentry><refentrytitle>syslog</refentrytitle><manvolnum>3</manvolnum></citerefentry> events are generated, run
	  <citerefentry><refentrytitle>syslogd</refentrytitle><manvolnum>8</manvolnum></citerefentry> with an empty
	  <filename>/etc/syslogd.conf</filename>, otherwise, do not
	  run it.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Minimize disk-I/O, avoid it entirely if possible.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Do not mount file systems that are not needed.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Mount <filename>/</filename>,
	  <filename>/usr</filename>, and any other
	  file system as read-only if possible.  This removes atime
	  updates to disk (etc.) from the I/O picture.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Reinitialize the read/write test file system with
	  <citerefentry><refentrytitle>newfs</refentrytitle><manvolnum>8</manvolnum></citerefentry> and populate it from a <citerefentry><refentrytitle>tar</refentrytitle><manvolnum>1</manvolnum></citerefentry> or
	  <citerefentry><refentrytitle>dump</refentrytitle><manvolnum>8</manvolnum></citerefentry> file before every run.  Unmount and mount it
	  before starting the test.  This results in a consistent file
	  system layout.  For a worldstone test this would apply to
	  <filename>/usr/obj</filename> (just
	  reinitialize with <command>newfs</command> and mount).  To
	  get 100% reproducibility, populate the file system from a
	  <citerefentry><refentrytitle>dd</refentrytitle><manvolnum>1</manvolnum></citerefentry> file (i.e.: <command>dd
	    if=myimage of=/dev/ad0s1h
	    bs=1m</command>)</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Use malloc backed or preloaded <citerefentry><refentrytitle>md</refentrytitle><manvolnum>4</manvolnum></citerefentry>
	  partitions.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Reboot between individual iterations of the test, this
	  gives a more consistent state.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Remove all non-essential device drivers from the kernel.
	  For instance if USB is not needed for the test, do not put
	  USB in the kernel.  Drivers which attach often have timeouts
	  ticking away.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Unconfigure hardware that are not in use.  Detach disks
	  with <citerefentry><refentrytitle>atacontrol</refentrytitle><manvolnum>8</manvolnum></citerefentry> and <citerefentry><refentrytitle>camcontrol</refentrytitle><manvolnum>8</manvolnum></citerefentry> if the disks
	  are not used for the test.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Do not configure the network unless it is being tested,
	  or wait until after the test has been performed to ship the
	  results off to another computer.</para>

	<para xml:lang="en">If the system must be connected to a public network,
	  watch out for spikes of broadcast traffic.  Even though it
	  is hardly noticeable, it will take up CPU cycles.  Multicast
	  has similar caveats.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Put each file system on its own disk.  This minimizes
	  jitter from head-seek optimizations.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Minimize output to serial or VGA consoles.  Running
	  output into files gives less jitter.  (Serial consoles
	  easily become a bottleneck.)  Do not touch keyboard while
	  the test is running, even <keycap>space</keycap> or
	  <keycap>back-space</keycap> shows up in the numbers.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Make sure the test is long enough, but not too long.  If
	  the test is too short, timestamping is a problem.  If it is
	  too long temperature changes and drift will affect the
	  frequency of the quartz crystals in the computer.  Rule of
	  thumb: more than a minute, less than an hour.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Try to keep the temperature as stable as possible around
	  the machine.  This affects both quartz crystals and disk
	  drive algorithms.  To get real stable clock, consider
	  stabilized clock injection.  E.g., get a OCXO + PLL, inject
	  output into clock circuits instead of motherboard xtal.
	  Contact Poul-Henning Kamp <email>phk@FreeBSD.org</email> for more information about
	  this.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Run the test at least 3 times but it is better to run
	  more than 20 times both for <quote>before</quote> and
	  <quote>after</quote> code.  Try to interleave if possible
	  (i.e.: do not run 20 times before then 20 times after), this
	  makes it possible to spot environmental effects.  Do not
	  interleave 1:1, but 3:3, this makes it possible to spot
	  interaction effects.</para>

	<para xml:lang="en">A good pattern is: <literal>bababa{bbbaaa}*</literal>.
	  This gives hint after the first 1+1 runs (so it is possible
	  to stop the test if it goes entirely the wrong way), a
	  standard deviation after the first 3+3 (gives a good
	  indication if it is going to be worth a long run) and
	  trending and interaction numbers later on.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Use <citerefentry><refentrytitle>ministat</refentrytitle><manvolnum>1</manvolnum></citerefentry>
	  to see if the numbers are significant.  Consider buying
	  <quote>Cartoon guide to statistics</quote> ISBN:
	  0062731025, highly recommended, if you have forgotten or
	  never learned about standard deviation and Student's
	  T.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Do not use background <citerefentry><refentrytitle>fsck</refentrytitle><manvolnum>8</manvolnum></citerefentry> unless the test is a
	  benchmark of background <command>fsck</command>.  Also,
	  disable <varname>background_fsck</varname> in
	  <filename>/etc/rc.conf</filename> unless the benchmark is
	  not started at least 60+<quote><command>fsck</command>
	    runtime</quote> seconds after the boot, as <citerefentry><refentrytitle>rc</refentrytitle><manvolnum>8</manvolnum></citerefentry>
	  wakes up and checks if <command>fsck</command> needs to run
	  on any file systems when background <command>fsck</command>
	  is enabled.  Likewise, make sure there are no snapshots
	  lying around unless the benchmark is a test with
	  snapshots.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">If the benchmark show unexpected bad performance, check
	  for things like high interrupt volume from an unexpected
	  source.  Some versions of <acronym>ACPI</acronym> have been
	  reported to <quote>misbehave</quote> and generate excess
	  interrupts.  To help diagnose odd test results, take a few
	  snapshots of <command>vmstat -i</command> and look for
	  anything unusual.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Make sure to be careful about optimization parameters
	  for kernel and userspace, likewise debugging.  It is easy to
	  let something slip through and realize later the test was
	  not comparing the same thing.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Do not ever benchmark with the
	  <literal>WITNESS</literal> and <literal>INVARIANTS</literal>
	  kernel options enabled unless the test is interested to
	  benchmarking those features.  <literal>WITNESS</literal> can
	  cause 400%+ drops in performance.  Likewise, userspace
	  <citerefentry><refentrytitle>malloc</refentrytitle><manvolnum>3</manvolnum></citerefentry> parameters default differently in -CURRENT
	  from the way they ship in production releases.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="testing-tinderbox">
    <title xml:lang="en">The FreeBSD Source Tinderbox</title>

    <para xml:lang="en">The source Tinderbox consists of:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en">A build script, <filename>tinderbox</filename>, that
	  automates checking out a specific version of the FreeBSD source
	  tree and building it.</para>
      </listitem>
      <listitem>
	<para xml:lang="en">A supervisor script, <filename>tbmaster</filename>, that
	  monitors individual Tinderbox instances, logs their output,
	  and emails failure notices.</para>
      </listitem>
      <listitem>
	<para xml:lang="en">A <acronym>CGI</acronym> script named
	  <filename>index.cgi</filename> that reads a set of tbmaster
	  logs and presents an easy-to-read <acronym>HTML</acronym>
	  summary of them.</para>
      </listitem>
      <listitem>
	<para xml:lang="en">A set of build servers that continually test the tip of
	  the most important FreeBSD code branches.</para>
      </listitem>
      <listitem>
	<para xml:lang="en">A webserver that keeps a complete set of Tinderbox logs
	  and displays an up-to-date summary.</para>
      </listitem>
    </itemizedlist>

    <para xml:lang="en">The scripts are maintained and were developed by
      Dag-Erling Smørgrav <email>des@FreeBSD.org</email>, and are now written in Perl, a move on from their
      original incarnation as shell scripts.  All scripts and
      configuration files are kept in <link xlink:href="https://www.freebsd.org/cgi/cvsweb.cgi/projects/tinderbox/">/projects/tinderbox/</link>.</para>

    <para xml:lang="en">For more information about the tinderbox and tbmaster
      scripts at this stage, see their respective man pages:
      tinderbox(1) and tbmaster(1).</para>

    <section>
      <title xml:lang="en">The <filename>index.cgi</filename> Script</title>

      <para xml:lang="en">The <filename>index.cgi</filename> script generates the
	<acronym>HTML</acronym> summary of tinderbox and tbmaster
	logs.  Although originally intended to be used as a
	<acronym>CGI</acronym> script, as indicated by its name, this
	script can also be run from the command line or from a
	<citerefentry><refentrytitle>cron</refentrytitle><manvolnum>8</manvolnum></citerefentry> job, in which case it will look for logs in the
	directory where the script is located.  It will automatically
	detect context, generating <acronym>HTTP</acronym> headers
	when it is run as a <acronym>CGI</acronym> script.  It
	conforms to <acronym>XHTML</acronym> standards and is styled
	using <acronym>CSS</acronym>.</para>

      <para xml:lang="en">The script starts in the <function>main()</function> block
	by attempting to verify that it is running on the official
	Tinderbox website.  If it is not, a page indicating it is not
	an official website is produced, and a <acronym>URL</acronym>
	to the official site is provided.</para>

      <para xml:lang="en">Next, it scans the log directory to get an inventory of
	configurations, branches and architectures for which log files
	exist, to avoid hard-coding a list into the script and
	potentially ending up with blank rows or columns.  This
	information is derived from the names of the log files
	matching the following pattern:</para>

      <programlisting xml:lang="en">tinderbox-$config-$branch-$arch-$machine.{brief,full}</programlisting>

      <para xml:lang="en">The configurations used on the official Tinderbox build
	servers are named for the branches they build.  For example,
	the <literal>releng_8</literal> configuration is used to build
	<literal>RELENG_8</literal> as well as all still-supported
	release branches.</para>

      <para xml:lang="en">Once all of this startup procedure has been successfully
	completed, <function>do_config()</function> is called for each
	configuration.</para>

      <para xml:lang="en">The <function>do_config()</function> function generates
	<acronym>HTML</acronym> for a single Tinderbox
	configuration.</para>

      <para xml:lang="en">It works by first generating a header row, then iterating
	over each branch build with the specified configuration,
	producing a single row of results for each in the following
	manner:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en">For each item:</para>
	  <itemizedlist>
	    <listitem>
	      <para xml:lang="en">For each machine within that architecture:</para>
	      <itemizedlist>
		<listitem>
		  <para xml:lang="en">If a brief log file exists, then:</para>
		  <itemizedlist>
		    <listitem>
		      <para xml:lang="en">Call <function>success()</function> to
			determine the outcome of the build.</para>
		    </listitem>
		    <listitem>
		      <para xml:lang="en">Output the modification size.</para>
		    </listitem>
		    <listitem>
		      <para xml:lang="en">Output the size of the brief log file with
			a link to the log file itself.</para>
		    </listitem>
		    <listitem>
		      <para xml:lang="en">If a full log file also exists,
			then:</para>
		      <itemizedlist>
			<listitem>
			  <para xml:lang="en">Output the size of the full log file
			    with a link to the log file itself.</para>
			</listitem>
		      </itemizedlist>
		    </listitem>
		  </itemizedlist>
		</listitem>
		<listitem>
		  <para xml:lang="en">Otherwise:</para>
		  <itemizedlist>
		    <listitem>
		      <para xml:lang="en">No output.</para>
		    </listitem>
		  </itemizedlist>
		</listitem>
	      </itemizedlist>
	    </listitem>
	  </itemizedlist>
	</listitem>
      </itemizedlist>

      <para xml:lang="en">The <function>success()</function> function mentioned
	above scans a brief log file for the string <quote>tinderbox
	  run completed</quote> in order to determine whether the
	build was successful.</para>

      <para xml:lang="en">Configurations and branches are sorted according to their
	branch rank.  This is computed as follows:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en"><literal>HEAD</literal> and <literal>CURRENT</literal>
	    have rank 9999.</para>
	</listitem>
	<listitem>
	  <para xml:lang="en"><literal>RELENG_<replaceable>x</replaceable></literal>
	    has rank <replaceable>xx</replaceable>99.</para>
	</listitem>
	<listitem>
	  <para xml:lang="en"><literal>RELENG_<replaceable>x</replaceable>_<replaceable>y</replaceable></literal>
	    has rank <replaceable>xxyy</replaceable>.</para>
	</listitem>
      </itemizedlist>

      <para xml:lang="en">This means that <literal>HEAD</literal> always ranks
	highest, and <literal>RELENG</literal> branches are ranked in
	numerical order, with each <literal>STABLE</literal> branch
	ranking higher than the release branches forked off of it.
	For instance, for FreeBSD 8, the order from highest to
	lowest would be:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en"><literal>RELENG_8</literal> (branch rank 899).</para>
	</listitem>
	<listitem>
	  <para xml:lang="en"><literal>RELENG_8_3</literal> (branch rank
	    803).</para>
	</listitem>
	<listitem>
	  <para xml:lang="en"><literal>RELENG_8_2</literal> (branch rank
	    802).</para>
	</listitem>
	<listitem>
	  <para xml:lang="en"><literal>RELENG_8_1</literal> (branch rank
	    801).</para>
	</listitem>
	<listitem>
	  <para xml:lang="en"><literal>RELENG_8_0</literal> (branch rank
	    800).</para>
	</listitem>
      </itemizedlist>

      <para xml:lang="en">The colors that Tinderbox uses for each cell in the table
	are defined by <acronym>CSS</acronym>.  Successful builds are
	displayed with green text; unsuccessful builds are displayed
	with red text.  The color fades as time passes since the
	corresponding build, with every half an hour bringing the
	color closer to grey.</para>
    </section>

    <section>
      <title xml:lang="en">Official Build Servers</title>

      <para xml:lang="en">The official Tinderbox build servers are hosted by <link xlink:href="http://www.sentex.ca">Sentex Data
	  Communications</link>, who also host the <link xlink:href="https://www.freebsd.org/projects/netperf/cluster.html">FreeBSD
	  Netperf Cluster</link>.</para>

      <para xml:lang="en">Three build servers currently exist:</para>

      <para xml:lang="en"><emphasis>freebsd-current.sentex.ca</emphasis>
	builds:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en"><literal>HEAD</literal> for amd64, arm, i386,
	    i386/pc98, ia64, mips, powerpc, powerpc64, and
	    sparc64.</para>
	</listitem>
	<listitem>
	  <para xml:lang="en"><literal>RELENG_9</literal> and supported
	    9.<replaceable>X</replaceable> branches for amd64, arm,
	    i386, i386/pc98, ia64, mips, powerpc, powerpc64, and
	    sparc64.</para>
	</listitem>
      </itemizedlist>

      <para xml:lang="en"><emphasis>freebsd-stable.sentex.ca</emphasis>
	builds:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en"><literal>RELENG_8</literal> and supported
	    8.<replaceable>X</replaceable> branches for amd64, i386,
	    i386/pc98, ia64, mips, powerpc and sparc64.</para>
	</listitem>
      </itemizedlist>

      <para xml:lang="en"><emphasis>freebsd-legacy.sentex.ca</emphasis>
	builds:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en"><literal>RELENG_7</literal> and supported
	    7.<replaceable>X</replaceable> branches for amd64, i386,
	    i386/pc98, ia64, powerpc, and sparc64.</para>
	</listitem>
      </itemizedlist>
    </section>

    <section>
      <title xml:lang="en">Official Summary Site</title>

      <para xml:lang="en">Summaries and logs from the official build servers are
	available online at <link xlink:href="http://tinderbox.FreeBSD.org">http://tinderbox.FreeBSD.org</link>,
	hosted by Dag-Erling Smørgrav <email>des@FreeBSD.org</email> and set up as follows:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en">A <citerefentry><refentrytitle>cron</refentrytitle><manvolnum>8</manvolnum></citerefentry> job checks the build servers at regular
	    intervals and downloads any new log files using
	    <citerefentry vendor="ports"><refentrytitle>rsync</refentrytitle><manvolnum>1</manvolnum></citerefentry>.</para>
	</listitem>
	<listitem>
	  <para xml:lang="en">Apache is set up to use <filename>index.cgi</filename>
	    as <literal>DirectoryIndex</literal>.</para>
	</listitem>
      </itemizedlist>
    </section>
  </section>
</chapter>

  </part>

  <part xml:id="ipc">
    <title xml:lang="en">Interprocess Communication</title>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD: head/en_US.ISO8859-1/books/developers-handbook/sockets/chapter.xml 52177 2018-08-26 18:34:50Z bcr $
-->
<chapter version="5.0" xml:id="sockets">
  <info>
    <title xml:lang="en">Sockets</title>

    <authorgroup>
      <author xml:lang="en">
	<personname>
	  <firstname>G. Adam</firstname>
	  <surname>Stanislav</surname>
	</personname>
	<contrib>Contributed by </contrib>
      </author>
    </authorgroup>
  </info>

  <sect1 xml:id="sockets-synopsis">
    <title xml:lang="en">Synopsis</title>

    <para xml:lang="en"><acronym>BSD</acronym> sockets take interprocess
      communications to a new level.  It is no longer necessary for
      the communicating processes to run on the same machine.  They
      still <emphasis>can</emphasis>, but they do not have to.</para>

    <para xml:lang="en">Not only do these processes not have to run on the same
      machine, they do not have to run under the same operating
      system.  Thanks to <acronym>BSD</acronym> sockets, your FreeBSD
      software can smoothly cooperate with a program running on a
      <trademark class="registered">Macintosh</trademark>, another one running on a <trademark>Sun</trademark> workstation, yet
      another one running under <trademark class="registered">Windows</trademark> 2000, all connected with an
      Ethernet-based local area network.</para>

    <para xml:lang="en">But your software can equally well cooperate with processes
      running in another building, or on another continent, inside a
      submarine, or a space shuttle.</para>

    <para xml:lang="en">It can also cooperate with processes that are not part of a
      computer (at least not in the strict sense of the word), but of
      such devices as printers, digital cameras, medical equipment.
      Just about anything capable of digital communications.</para>

  </sect1>

  <sect1 xml:id="sockets-diversity">
    <title xml:lang="en">Networking and Diversity</title>

    <para xml:lang="en">We have already hinted on the <emphasis>diversity</emphasis>
      of networking.  Many different systems have to talk to each
      other.  And they have to speak the same language.  They also
      have to <emphasis>understand</emphasis> the same language the
      same way.</para>

    <para xml:lang="en">People often think that <emphasis>body language</emphasis>
      is universal.  But it is not.  Back in my early teens, my father
      took me to Bulgaria.  We were sitting at a table in a park in
      Sofia, when a vendor approached us trying to sell us some
      roasted almonds.</para>

    <para xml:lang="en">I had not learned much Bulgarian by then, so, instead of
      saying no, I shook my head from side to side, the
      <quote>universal</quote> body language for
      <emphasis>no</emphasis>.  The vendor quickly started serving us
      some almonds.</para>

    <para xml:lang="en">I then remembered I had been told that in Bulgaria shaking
      your head sideways meant <emphasis>yes</emphasis>.  Quickly, I
      started nodding my head up and down.  The vendor noticed, took
      his almonds, and walked away.  To an uninformed observer, I did
      not change the body language: I continued using the language of
      shaking and nodding my head.  What changed was the
      <emphasis>meaning</emphasis> of the body language.  At first,
      the vendor and I interpreted the same language as having
      completely different meaning.  I had to adjust my own
      interpretation of that language so the vendor would
      understand.</para>

    <para xml:lang="en">It is the same with computers: The same symbols may have
      different, even outright opposite meaning.  Therefore, for two
      computers to understand each other, they must not only agree on
      the same <emphasis>language</emphasis>, but on the same
      <emphasis>interpretation</emphasis> of the language.</para>
  </sect1>

  <sect1 xml:id="sockets-protocols">
    <title xml:lang="en">Protocols</title>

    <para xml:lang="en">While various programming languages tend to have complex
      syntax and use a number of multi-letter reserved words (which
      makes them easy for the human programmer to understand), the
      languages of data communications tend to be very terse.  Instead
      of multi-byte words, they often use individual
      <emphasis>bits</emphasis>.  There is a very convincing reason
      for it: While data travels <emphasis>inside</emphasis> your
      computer at speeds approaching the speed of light, it often
      travels considerably slower between two computers.</para>

    <para xml:lang="en">Because the languages used in data communications are so
      terse, we usually refer to them as
      <emphasis>protocols</emphasis> rather than languages.</para>

    <para xml:lang="en">As data travels from one computer to another, it always uses
      more than one protocol.  These protocols are
      <emphasis>layered</emphasis>.  The data can be compared to the
      inside of an onion: You have to peel off several layers of
      <quote>skin</quote> to get to the data.  This is best
      illustrated with a picture:</para>

    <mediaobject xml:lang="en">
      <imageobject>
	<imagedata fileref="sockets/layers"/>
      </imageobject>

      <textobject>
	<literallayout class="monospaced" xml:lang="en">+----------------+
|    Ethernet    |
|+--------------+|
||      IP      ||
||+------------+||
|||     TCP    |||
|||+----------+|||
||||   HTTP   ||||
||||+--------+||||
|||||   PNG  |||||
|||||+------+|||||
|||||| Data ||||||
|||||+------+|||||
||||+--------+||||
|||+----------+|||
||+------------+||
|+--------------+|
+----------------+</literallayout>
      </textobject>

      <textobject>
	<phrase>Protocol Layers</phrase>
      </textobject>
    </mediaobject>

    <para xml:lang="en">In this example, we are trying to get an image from a web
      page we are connected to via an Ethernet.</para>

    <para xml:lang="en">The image consists of raw data, which is simply a sequence
      of <acronym>RGB</acronym> values that our software can process,
      i.e., convert into an image and display on our monitor.</para>

    <para xml:lang="en">Alas, our software has no way of knowing how the raw data is
      organized: Is it a sequence of <acronym>RGB</acronym> values, or
      a sequence of grayscale intensities, or perhaps of
      <acronym>CMYK</acronym> encoded colors? Is the data represented
      by 8-bit quanta, or are they 16 bits in size, or perhaps 4 bits?
      How many rows and columns does the image consist of? Should
      certain pixels be transparent?</para>

    <para xml:lang="en">I think you get the picture...</para>

    <para xml:lang="en">To inform our software how to handle the raw data, it is
      encoded as a <acronym>PNG</acronym> file.  It could be a
      <acronym>GIF</acronym>, or a <acronym>JPEG</acronym>, but it is
      a <acronym>PNG</acronym>.</para>

    <para xml:lang="en">And <acronym>PNG</acronym> is a protocol.</para>

    <para xml:lang="en">At this point, I can hear some of you yelling,
      <emphasis><quote>No, it is not! It is a file
	  format!</quote></emphasis></para>

    <para xml:lang="en">Well, of course it is a file format.  But from the
      perspective of data communications, a file format is a protocol:
      The file structure is a <emphasis>language</emphasis>, a terse
      one at that, communicating to our <emphasis>process</emphasis>
      how the data is organized.  Ergo, it is a
      <emphasis>protocol</emphasis>.</para>

    <para xml:lang="en">Alas, if all we received was the <acronym>PNG</acronym>
      file, our software would be facing a serious problem: How is it
      supposed to know the data is representing an image, as opposed
      to some text, or perhaps a sound, or what not? Secondly, how is
      it supposed to know the image is in the <acronym>PNG</acronym>
      format as opposed to <acronym>GIF</acronym>, or
      <acronym>JPEG</acronym>, or some other image format?</para>

    <para xml:lang="en">To obtain that information, we are using another protocol:
      <acronym>HTTP</acronym>.  This protocol can tell us exactly that
      the data represents an image, and that it uses the
      <acronym>PNG</acronym> protocol.  It can also tell us some other
      things, but let us stay focused on protocol layers here.</para>

    <para xml:lang="en">So, now we have some data wrapped in the
      <acronym>PNG</acronym> protocol, wrapped in the
      <acronym>HTTP</acronym> protocol.  How did we get it from the
      server?</para>

    <para xml:lang="en">By using <acronym>TCP/IP</acronym> over Ethernet, that is
      how.  Indeed, that is three more protocols.  Instead of
      continuing inside out, I am now going to talk about Ethernet,
      simply because it is easier to explain the rest that way.</para>

    <para xml:lang="en">Ethernet is an interesting system of connecting computers in
      a <emphasis>local area network</emphasis>
      (<acronym>LAN</acronym>).  Each computer has a <emphasis>network
	interface card</emphasis> (<acronym>NIC</acronym>), which has
      a unique 48-bit <acronym>ID</acronym> called its
      <emphasis>address</emphasis>.  No two Ethernet
      <acronym>NIC</acronym>s in the world have the same
      address.</para>

    <para xml:lang="en">These <acronym>NIC</acronym>s are all connected with each
      other.  Whenever one computer wants to communicate with another
      in the same Ethernet <acronym>LAN</acronym>, it sends a message
      over the network.  Every <acronym>NIC</acronym> sees the
      message.  But as part of the Ethernet
      <emphasis>protocol</emphasis>, the data contains the address of
      the destination <acronym>NIC</acronym> (among other things).
      So, only one of all the network interface cards will pay
      attention to it, the rest will ignore it.</para>

    <para xml:lang="en">But not all computers are connected to the same network.
      Just because we have received the data over our Ethernet does
      not mean it originated in our own local area network.  It could
      have come to us from some other network (which may not even be
      Ethernet based) connected with our own network via the
      Internet.</para>

    <para xml:lang="en">All data is transferred over the Internet using
      <acronym>IP</acronym>, which stands for <emphasis>Internet
	Protocol</emphasis>.  Its basic role is to let us know where
      in the world the data has arrived from, and where it is supposed
      to go to.  It does not <emphasis>guarantee</emphasis> we will
      receive the data, only that we will know where it came from
      <emphasis>if</emphasis> we do receive it.</para>

    <para xml:lang="en">Even if we do receive the data, <acronym>IP</acronym> does
      not guarantee we will receive various chunks of data in the same
      order the other computer has sent it to us.  So, we can receive
      the center of our image before we receive the upper left corner
      and after the lower right, for example.</para>

    <para xml:lang="en">It is <acronym>TCP</acronym> (<emphasis>Transmission Control
	Protocol</emphasis>) that asks the sender to resend any lost
      data and that places it all into the proper order.</para>

    <para xml:lang="en">All in all, it took <emphasis>five</emphasis> different
      protocols for one computer to communicate to another what an
      image looks like.  We received the data wrapped into the
      <acronym>PNG</acronym> protocol, which was wrapped into the
      <acronym>HTTP</acronym> protocol, which was wrapped into the
      <acronym>TCP</acronym> protocol, which was wrapped into the
      <acronym>IP</acronym> protocol, which was wrapped into the
      <acronym>Ethernet</acronym> protocol.</para>

    <para xml:lang="en">Oh, and by the way, there probably were several other
      protocols involved somewhere on the way.  For example, if our
      <acronym>LAN</acronym> was connected to the Internet through a
      dial-up call, it used the <acronym>PPP</acronym> protocol over
      the modem which used one (or several) of the various modem
      protocols, et cetera, et cetera, et cetera...</para>

    <para xml:lang="en">As a developer you should be asking by now,
      <emphasis><quote>How am I supposed to handle it
	  all?</quote></emphasis></para>

    <para xml:lang="en">Luckily for you, you are <emphasis>not</emphasis> supposed
      to handle it all.  You <emphasis>are</emphasis> supposed to
      handle some of it, but not all of it.  Specifically, you need
      not worry about the physical connection (in our case Ethernet
      and possibly <acronym>PPP</acronym>, etc).  Nor do you need to
      handle the Internet Protocol, or the Transmission Control
      Protocol.</para>

    <para xml:lang="en">In other words, you do not have to do anything to receive
      the data from the other computer.  Well, you do have to
      <emphasis>ask</emphasis> for it, but that is almost as simple as
      opening a file.</para>

    <para xml:lang="en">Once you have received the data, it is up to you to figure
      out what to do with it.  In our case, you would need to
      understand the <acronym>HTTP</acronym> protocol and the
      <acronym>PNG</acronym> file structure.</para>

    <para xml:lang="en">To use an analogy, all the internetworking protocols become
      a gray area: Not so much because we do not understand how it
      works, but because we are no longer concerned about it.  The
      sockets interface takes care of this gray area for us:</para>

    <mediaobject xml:lang="en">
      <imageobject>
	<imagedata fileref="sockets/slayers"/>
      </imageobject>

      <textobject>
	<literallayout class="monospaced" xml:lang="en">+----------------+
|xxxxEthernetxxxx|
|+--------------+|
||xxxxxxIPxxxxxx||
||+------------+||
|||xxxxxTCPxxxx|||
|||+----------+|||
||||   HTTP   ||||
||||+--------+||||
|||||   PNG  |||||
|||||+------+|||||
|||||| Data ||||||
|||||+------+|||||
||||+--------+||||
|||+----------+|||
||+------------+||
|+--------------+|
+----------------+</literallayout>
      </textobject>

      <textobject>
	<phrase>Sockets Covered Protocol Layers</phrase>
      </textobject>
    </mediaobject>

    <para xml:lang="en">We only need to understand any protocols that tell us how to
      <emphasis>interpret the data</emphasis>, not how to
      <emphasis>receive</emphasis> it from another process, nor how to
      <emphasis>send</emphasis> it to another process.</para>

  </sect1>

  <sect1 xml:id="sockets-model">
    <title xml:lang="en">The Sockets Model</title>

    <para xml:lang="en"><acronym>BSD</acronym> sockets are built on the basic <trademark class="registered">UNIX</trademark>
      model: <emphasis>Everything is a file.</emphasis> In our
      example, then, sockets would let us receive an <emphasis>HTTP
	file</emphasis>, so to speak.  It would then be up to us to
      extract the <emphasis><acronym>PNG</acronym> file</emphasis>
      from it.</para>

    <para xml:lang="en">Because of the complexity of internetworking, we cannot just
      use the <function role="syscall">open</function> system call, or
      the <function>open()</function> C function.  Instead, we need to
      take several steps to <quote>opening</quote> a socket.</para>

    <para xml:lang="en">Once we do, however, we can start treating the
      <emphasis>socket</emphasis> the same way we treat any
      <emphasis>file descriptor</emphasis>: We can
      <function>read</function> from it, <function>write</function> to
      it, <function>pipe</function> it, and, eventually,
      <function>close</function> it.</para>

  </sect1>

  <sect1 xml:id="sockets-essential-functions">
    <title xml:lang="en">Essential Socket Functions</title>

    <para xml:lang="en">While FreeBSD offers different functions to work with
      sockets, we only <emphasis>need</emphasis> four to
      <quote>open</quote> a socket.  And in some cases we only need
      two.</para>

    <sect2 xml:id="sockets-client-server">
      <title xml:lang="en">The Client-Server Difference</title>

      <para xml:lang="en">Typically, one of the ends of a socket-based data
	communication is a <emphasis>server</emphasis>, the other is a
	<emphasis>client</emphasis>.</para>

      <sect3 xml:id="sockets-common-elements">
	<title xml:lang="en">The Common Elements</title>

	<sect4 xml:id="sockets-socket">
	  <title xml:lang="en"><function>socket</function></title>

	  <para xml:lang="en">The one function used by both, clients and servers, is
	    <citerefentry><refentrytitle>socket</refentrytitle><manvolnum>2</manvolnum></citerefentry>.  It is declared this way:</para>

	  <programlisting xml:lang="en">int socket(int domain, int type, int protocol);</programlisting>

	  <para xml:lang="en">The return value is of the same type as that of
	    <function>open</function>, an integer.  FreeBSD allocates
	    its value from the same pool as that of file handles.
	    That is what allows sockets to be treated the same way as
	    files.</para>

	  <para xml:lang="en">The <varname>domain</varname> argument tells the
	    system what <emphasis>protocol family</emphasis> you want
	    it to use.  Many of them exist, some are vendor specific,
	    others are very common.  They are declared in
	    <filename>sys/socket.h</filename>.</para>

	  <para xml:lang="en">Use <constant>PF_INET</constant> for
	    <acronym>UDP</acronym>, <acronym>TCP</acronym> and other
	    Internet protocols (<acronym>IP</acronym>v4).</para>

	  <para xml:lang="en">Five values are defined for the
	    <varname>type</varname> argument, again, in
	    <filename>sys/socket.h</filename>.  All of them start with
	    <quote><constant>SOCK_</constant></quote>.  The most
	    common one is <constant>SOCK_STREAM</constant>, which
	    tells the system you are asking for a <emphasis>reliable
	    stream delivery service</emphasis> (which is
	    <acronym>TCP</acronym> when used with
	    <constant>PF_INET</constant>).</para>

	  <para xml:lang="en">If you asked for <constant>SOCK_DGRAM</constant>, you
	    would be requesting a <emphasis>connectionless datagram
	    delivery service</emphasis> (in our case,
	    <acronym>UDP</acronym>).</para>

	  <para xml:lang="en">If you wanted to be in charge of the low-level
	    protocols (such as <acronym>IP</acronym>), or even network
	    interfaces (e.g., the Ethernet), you would need to specify
	    <constant>SOCK_RAW</constant>.</para>

	  <para xml:lang="en">Finally, the <varname>protocol</varname> argument
	    depends on the previous two arguments, and is not always
	    meaningful.  In that case, use <constant>0</constant> for
	    its value.</para>

	  <note xml:id="sockets-unconnected">
	    <title xml:lang="en">The Unconnected Socket</title>

	    <para xml:lang="en">Nowhere, in the <function>socket</function> function
	      have we specified to what other system we should be
	      connected.  Our newly created socket remains
	      <emphasis>unconnected</emphasis>.</para>

	    <para xml:lang="en">This is on purpose: To use a telephone analogy, we
	      have just attached a modem to the phone line.  We have
	      neither told the modem to make a call, nor to answer if
	      the phone rings.</para>
	  </note>

	</sect4>

	<sect4 xml:id="sockets-sockaddr">
	  <title xml:lang="en"><varname>sockaddr</varname></title>

	  <para xml:lang="en">Various functions of the sockets family expect the
	    address of (or pointer to, to use C terminology) a small
	    area of the memory.  The various C declarations in the
	    <filename>sys/socket.h</filename> refer to it as
	    <varname>struct sockaddr</varname>.  This structure is
	    declared in the same file:</para>

	  <programlisting xml:lang="en">/*
 * Structure used by kernel to store most
 * addresses.
 */
struct sockaddr {
	unsigned char	sa_len;		/* total length */
	sa_family_t	sa_family;	/* address family */
	char		sa_data[14];	/* actually longer; address value */
};
#define	SOCK_MAXADDRLEN	255		/* longest possible addresses */</programlisting>

	  <para xml:lang="en">Please note the <emphasis>vagueness</emphasis> with
	    which the <varname>sa_data</varname> field is declared,
	    just as an array of <constant>14</constant> bytes, with
	    the comment hinting there can be more than
	    <constant>14</constant> of them.</para>

	  <para xml:lang="en">This vagueness is quite deliberate.  Sockets is a very
	    powerful interface.  While most people perhaps think of it
	    as nothing more than the Internet interface—and most
	    applications probably use it for that
	    nowadays—sockets can be used for just about
	    <emphasis>any</emphasis> kind of interprocess
	    communications, of which the Internet (or, more precisely,
	    <acronym>IP</acronym>) is only one.</para>

	  <para xml:lang="en">The <filename>sys/socket.h</filename> refers to the
	    various types of protocols sockets will handle as
	    <emphasis>address families</emphasis>, and lists them
	    right before the definition of
	    <varname>sockaddr</varname>:</para>

	  <programlisting xml:lang="en">/*
 * Address families.
 */
#define	AF_UNSPEC	0		/* unspecified */
#define	AF_LOCAL	1		/* local to host (pipes, portals) */
#define	AF_UNIX		AF_LOCAL	/* backward compatibility */
#define	AF_INET		2		/* internetwork: UDP, TCP, etc. */
#define	AF_IMPLINK	3		/* arpanet imp addresses */
#define	AF_PUP		4		/* pup protocols: e.g. BSP */
#define	AF_CHAOS	5		/* mit CHAOS protocols */
#define	AF_NS		6		/* XEROX NS protocols */
#define	AF_ISO		7		/* ISO protocols */
#define	AF_OSI		AF_ISO
#define	AF_ECMA		8		/* European computer manufacturers */
#define	AF_DATAKIT	9		/* datakit protocols */
#define	AF_CCITT	10		/* CCITT protocols, X.25 etc */
#define	AF_SNA		11		/* IBM SNA */
#define AF_DECnet	12		/* DECnet */
#define AF_DLI		13		/* DEC Direct data link interface */
#define AF_LAT		14		/* LAT */
#define	AF_HYLINK	15		/* NSC Hyperchannel */
#define	AF_APPLETALK	16		/* Apple Talk */
#define	AF_ROUTE	17		/* Internal Routing Protocol */
#define	AF_LINK		18		/* Link layer interface */
#define	pseudo_AF_XTP	19		/* eXpress Transfer Protocol (no AF) */
#define	AF_COIP		20		/* connection-oriented IP, aka ST II */
#define	AF_CNT		21		/* Computer Network Technology */
#define pseudo_AF_RTIP	22		/* Help Identify RTIP packets */
#define	AF_IPX		23		/* Novell Internet Protocol */
#define	AF_SIP		24		/* Simple Internet Protocol */
#define	pseudo_AF_PIP	25		/* Help Identify PIP packets */
#define	AF_ISDN		26		/* Integrated Services Digital Network*/
#define	AF_E164		AF_ISDN		/* CCITT E.164 recommendation */
#define	pseudo_AF_KEY	27		/* Internal key-management function */
#define	AF_INET6	28		/* IPv6 */
#define	AF_NATM		29		/* native ATM access */
#define	AF_ATM		30		/* ATM */
#define pseudo_AF_HDRCMPLT 31		/* Used by BPF to not rewrite headers
					 * in interface output routine
					 */
#define	AF_NETGRAPH	32		/* Netgraph sockets */
#define	AF_SLOW		33		/* 802.3ad slow protocol */
#define	AF_SCLUSTER	34		/* Sitara cluster protocol */
#define	AF_ARP		35
#define	AF_BLUETOOTH	36		/* Bluetooth sockets */
#define	AF_MAX		37</programlisting>

	  <para xml:lang="en">The one used for <acronym>IP</acronym> is
	    <symbol>AF_INET</symbol>.  It is a symbol for the constant
	    <constant>2</constant>.</para>

	  <para xml:lang="en">It is the <emphasis>address family</emphasis> listed
	    in the <varname>sa_family</varname> field of
	    <varname>sockaddr</varname> that decides how exactly the
	    vaguely named bytes of <varname>sa_data</varname> will be
	    used.</para>

	  <para xml:lang="en">Specifically, whenever the <emphasis>address
	      family</emphasis> is <symbol>AF_INET</symbol>, we can
	    use <varname>struct sockaddr_in</varname> found in
	    <filename>netinet/in.h</filename>, wherever
	    <varname>sockaddr</varname> is expected:</para>

	  <programlisting xml:lang="en">/*
 * Socket address, internet style.
 */
struct sockaddr_in {
	uint8_t		sin_len;
	sa_family_t	sin_family;
	in_port_t	sin_port;
	struct	in_addr sin_addr;
	char	sin_zero[8];
};</programlisting>

	  <para xml:lang="en">We can visualize its organization this way:</para>

	  <mediaobject xml:lang="en">
	    <imageobject>
	      <imagedata fileref="sockets/sain"/>
	    </imageobject>

	    <textobject>
	      <literallayout class="monospaced" xml:lang="en">        0        1        2       3
   +--------+--------+-----------------+
 0 |    0   | Family |       Port      |
   +--------+--------+-----------------+
 4 |             IP Address            |
   +-----------------------------------+
 8 |                 0                 |
   +-----------------------------------+
12 |                 0                 |
   +-----------------------------------+</literallayout>
	    </textobject>

	    <textobject>
	      <phrase>sockaddr_in</phrase>
	    </textobject>
	  </mediaobject>

	  <para xml:lang="en">The three important fields are
	    <varname>sin_family</varname>, which is byte 1 of the
	    structure, <varname>sin_port</varname>, a 16-bit value
	    found in bytes 2 and 3, and <varname>sin_addr</varname>, a
	    32-bit integer representation of the <acronym>IP</acronym>
	    address, stored in bytes 4-7.</para>

	  <para xml:lang="en">Now, let us try to fill it out.  Let us assume we are
	    trying to write a client for the
	    <emphasis>daytime</emphasis> protocol, which simply states
	    that its server will write a text string representing the
	    current date and time to port 13.  We want to use
	    <acronym>TCP/IP</acronym>, so we need to specify
	    <constant>AF_INET</constant> in the address family field.
	    <constant>AF_INET</constant> is defined as
	    <constant>2</constant>.  Let us use the
	    <acronym>IP</acronym> address of <systemitem class="ipaddress">192.43.244.18</systemitem>, which is
	    the time server of US federal government (<systemitem class="fqdomainname">time.nist.gov</systemitem>).</para>

	  <mediaobject xml:lang="en">
	    <imageobject>
	      <imagedata fileref="sockets/sainfill"/>
	    </imageobject>

	    <textobject>
	      <literallayout class="monospaced" xml:lang="en">        0        1        2       3
   +--------+--------+-----------------+
 0 |    0   |   2    |        13       |
   +-----------------+-----------------+
 4 |           192.43.244.18           |
   +-----------------------------------+
 8 |                 0                 |
   +-----------------------------------+
12 |                 0                 |
   +-----------------------------------+</literallayout>
	    </textobject>

	    <textobject>
	      <phrase>Specific example of sockaddr_in</phrase>
	    </textobject>
	  </mediaobject>

	  <para xml:lang="en">By the way the <varname>sin_addr</varname> field is
	    declared as being of the <varname>struct in_addr</varname>
	    type, which is defined in
	    <filename>netinet/in.h</filename>:</para>

	  <programlisting xml:lang="en">/*
 * Internet address (a structure for historical reasons)
 */
struct in_addr {
	in_addr_t s_addr;
};</programlisting>

	  <para xml:lang="en">In addition, <varname>in_addr_t</varname> is a 32-bit
	    integer.</para>

	  <para xml:lang="en">The <systemitem class="ipaddress">192.43.244.18</systemitem> is just a
	    convenient notation of expressing a 32-bit integer by
	    listing all of its 8-bit bytes, starting with the
	    <emphasis>most significant</emphasis> one.</para>

	  <para xml:lang="en">So far, we have viewed <varname>sockaddr</varname> as
	    an abstraction.  Our computer does not store
	    <varname>short</varname> integers as a single 16-bit
	    entity, but as a sequence of 2 bytes.  Similarly, it
	    stores 32-bit integers as a sequence of 4 bytes.</para>

	  <para xml:lang="en">Suppose we coded something like this:</para>

	  <programlisting xml:lang="en">sa.sin_family      = AF_INET;
sa.sin_port        = 13;
sa.sin_addr.s_addr = (((((192 &lt;&lt; 8) | 43) &lt;&lt; 8) | 244) &lt;&lt; 8) | 18;</programlisting>

	  <para xml:lang="en">What would the result look like?</para>

	  <para xml:lang="en">Well, that depends, of course.  On a <trademark class="registered">Pentium</trademark>, or
	    other x86, based computer, it would look like this:</para>

	  <mediaobject xml:lang="en">
	    <imageobject>
	      <imagedata fileref="sockets/sainlsb"/>
	    </imageobject>

	    <textobject>
	      <literallayout class="monospaced" xml:lang="en">        0        1        2       3
   +--------+--------+--------+--------+
 0 |    0   |   2    |   13   |   0    |
   +--------+--------+--------+--------+
 4 |   18   |  244   |   43   |  192   |
   +-----------------------------------+
 8 |                 0                 |
   +-----------------------------------+
12 |                 0                 |
   +-----------------------------------+</literallayout>
	    </textobject>

	    <textobject>
	      <phrase>sockaddr_in on an Intel system</phrase>
	    </textobject>
	  </mediaobject>

	  <para xml:lang="en">On a different system, it might look like this:</para>

	  <mediaobject xml:lang="en">
	    <imageobject>
	      <imagedata fileref="sockets/sainmsb"/>
	    </imageobject>

	    <textobject>
	      <literallayout class="monospaced" xml:lang="en">        0        1        2       3
   +--------+--------+--------+--------+
 0 |    0   |   2    |    0   |   13   |
   +--------+--------+--------+--------+
 4 |   192  |   43   |   244  |   18   |
   +-----------------------------------+
 8 |                 0                 |
   +-----------------------------------+
12 |                 0                 |
   +-----------------------------------+</literallayout>
	    </textobject>

	    <textobject>
	      <phrase>sockaddr_in on an MSB system</phrase>
	    </textobject>
	  </mediaobject>

	  <para xml:lang="en">And on a PDP it might look different yet.  But the
	    above two are the most common ways in use today.</para>

	  <para xml:lang="en">Ordinarily, wanting to write portable code,
	    programmers pretend that these differences do not exist.
	    And they get away with it (except when they code in
	    assembly language).  Alas, you cannot get away with it
	    that easily when coding for sockets.</para>

	  <para xml:lang="en">Why?</para>

	  <para xml:lang="en">Because when communicating with another computer, you
	    usually do not know whether it stores data <emphasis>most
	    significant byte</emphasis> (<acronym>MSB</acronym>) or
	    <emphasis>least significant byte</emphasis>
	    (<acronym>LSB</acronym>) first.</para>

	  <para xml:lang="en">You might be wondering, <emphasis><quote>So, will
		sockets not handle it for
		me?</quote></emphasis></para>

	  <para xml:lang="en">It will not.</para>

	  <para xml:lang="en">While that answer may surprise you at first, remember
	    that the general sockets interface only understands the
	    <varname>sa_len</varname> and <varname>sa_family</varname>
	    fields of the <varname>sockaddr</varname> structure.  You
	    do not have to worry about the byte order there (of
	    course, on FreeBSD <varname>sa_family</varname> is only 1
	    byte anyway, but many other <trademark class="registered">UNIX</trademark> systems do not have
	    <varname>sa_len</varname> and use 2 bytes for
	    <varname>sa_family</varname>, and expect the data in
	    whatever order is native to the computer).</para>

	  <para xml:lang="en">But the rest of the data is just
	    <varname>sa_data[14]</varname> as far as sockets goes.
	    Depending on the <emphasis>address family</emphasis>,
	    sockets just forwards that data to its destination.</para>

	  <para xml:lang="en">Indeed, when we enter a port number, it is because we
	    want the other computer to know what service we are asking
	    for.  And, when we are the server, we read the port number
	    so we know what service the other computer is expecting
	    from us.  Either way, sockets only has to forward the port
	    number as data.  It does not interpret it in any
	    way.</para>

	  <para xml:lang="en">Similarly, we enter the <acronym>IP</acronym> address
	    to tell everyone on the way where to send our data to.
	    Sockets, again, only forwards it as data.</para>

	  <para xml:lang="en">That is why, we (the <emphasis>programmers</emphasis>,
	    not the <emphasis>sockets</emphasis>) have to distinguish
	    between the byte order used by our computer and a
	    conventional byte order to send the data in to the other
	    computer.</para>

	  <para xml:lang="en">We will call the byte order our computer uses the
	    <emphasis>host byte order</emphasis>, or just the
	    <emphasis>host order</emphasis>.</para>

	  <para xml:lang="en">There is a convention of sending the multi-byte data
	    over <acronym>IP</acronym>
	    <emphasis><acronym>MSB</acronym> first</emphasis>.  This,
	    we will refer to as the <emphasis>network byte
	      order</emphasis>, or simply the <emphasis>network
	      order</emphasis>.</para>

	  <para xml:lang="en">Now, if we compiled the above code for an Intel based
	    computer, our <emphasis>host byte order</emphasis> would
	    produce:</para>

	  <mediaobject xml:lang="en">
	    <imageobject>
	      <imagedata fileref="sockets/sainlsb"/>
	    </imageobject>

	    <textobject>
	      <literallayout class="monospaced" xml:lang="en">        0        1        2       3
   +--------+--------+--------+--------+
 0 |    0   |   2    |   13   |   0    |
   +--------+--------+--------+--------+
 4 |   18   |  244   |   43   |  192   |
   +-----------------------------------+
 8 |                 0                 |
   +-----------------------------------+
12 |                 0                 |
   +-----------------------------------+</literallayout>
	    </textobject>

	    <textobject>
	      <phrase>Host byte order on an Intel system</phrase>
	    </textobject>
	  </mediaobject>

	  <para xml:lang="en">But the <emphasis>network byte order</emphasis>
	    requires that we store the data <acronym>MSB</acronym>
	    first:</para>

	  <mediaobject xml:lang="en">
	    <imageobject>
	      <imagedata fileref="sockets/sainmsb"/>
	    </imageobject>

	    <textobject>
	      <literallayout class="monospaced" xml:lang="en">        0        1        2       3
   +--------+--------+--------+--------+
 0 |    0   |   2    |    0   |   13   |
   +--------+--------+--------+--------+
 4 |   192  |   43   |   244  |   18   |
   +-----------------------------------+
 8 |                 0                 |
   +-----------------------------------+
12 |                 0                 |
   +-----------------------------------+</literallayout>
	    </textobject>

	    <textobject>
	      <phrase>Network byte order</phrase>
	    </textobject>
	  </mediaobject>

	  <para xml:lang="en">Unfortunately, our <emphasis>host order</emphasis> is
	    the exact opposite of the <emphasis>network
	      order</emphasis>.</para>

	  <para xml:lang="en">We have several ways of dealing with it.  One would be
	    to <emphasis>reverse</emphasis> the values in our
	    code:</para>

	  <programlisting xml:lang="en">sa.sin_family      = AF_INET;
sa.sin_port        = 13 &lt;&lt; 8;
sa.sin_addr.s_addr = (((((18 &lt;&lt; 8) | 244) &lt;&lt; 8) | 43) &lt;&lt; 8) | 192;</programlisting>

	  <para xml:lang="en">This will <emphasis>trick</emphasis> our compiler into
	    storing the data in the <emphasis>network byte
	      order</emphasis>.  In some cases, this is exactly the
	    way to do it (e.g., when programming in assembly
	    language).  In most cases, however, it can cause a
	    problem.</para>

	  <para xml:lang="en">Suppose, you wrote a sockets-based program in C.  You
	    know it is going to run on a <trademark class="registered">Pentium</trademark>, so you enter all
	    your constants in reverse and force them to the
	    <emphasis>network byte order</emphasis>.  It works
	    well.</para>

	  <para xml:lang="en">Then, some day, your trusted old <trademark class="registered">Pentium</trademark> becomes a
	    rusty old <trademark class="registered">Pentium</trademark>.  You replace it with a system whose
	    <emphasis>host order</emphasis> is the same as the
	    <emphasis>network order</emphasis>.  You need to recompile
	    all your software.  All of your software continues to
	    perform well, except the one program you wrote.</para>

	  <para xml:lang="en">You have since forgotten that you had forced all of
	    your constants to the opposite of the <emphasis>host
	      order</emphasis>.  You spend some quality time tearing
	    out your hair, calling the names of all gods you ever
	    heard of (and some you made up), hitting your monitor with
	    a nerf bat, and performing all the other traditional
	    ceremonies of trying to figure out why something that has
	    worked so well is suddenly not working at all.</para>

	  <para xml:lang="en">Eventually, you figure it out, say a couple of swear
	    words, and start rewriting your code.</para>

	  <para xml:lang="en">Luckily, you are not the first one to face the
	    problem.  Someone else has created the <citerefentry><refentrytitle>htons</refentrytitle><manvolnum>3</manvolnum></citerefentry> and
	    <citerefentry><refentrytitle>htonl</refentrytitle><manvolnum>3</manvolnum></citerefentry> C functions to convert a
	    <varname>short</varname> and <varname>long</varname>
	    respectively from the <emphasis>host byte order</emphasis>
	    to the <emphasis>network byte order</emphasis>, and the
	    <citerefentry><refentrytitle>ntohs</refentrytitle><manvolnum>3</manvolnum></citerefentry> and <citerefentry><refentrytitle>ntohl</refentrytitle><manvolnum>3</manvolnum></citerefentry> C functions to go the
	    other way.</para>

	  <para xml:lang="en">On <emphasis><acronym>MSB</acronym>-first</emphasis>
	    systems these functions do nothing.  On
	    <emphasis><acronym>LSB</acronym>-first</emphasis> systems
	    they convert values to the proper order.</para>

	  <para xml:lang="en">So, regardless of what system your software is
	    compiled on, your data will end up in the correct order if
	    you use these functions.</para>
	</sect4>
      </sect3>

      <sect3 xml:id="sockets-client-functions">
	<title xml:lang="en">Client Functions</title>

	<para xml:lang="en">Typically, the client initiates the connection to the
	  server.  The client knows which server it is about to call:
	  It knows its <acronym>IP</acronym> address, and it knows the
	  <emphasis>port</emphasis> the server resides at.  It is akin
	  to you picking up the phone and dialing the number (the
	  <emphasis>address</emphasis>), then, after someone answers,
	  asking for the person in charge of wingdings (the
	  <emphasis>port</emphasis>).</para>

	<sect4 xml:id="sockets-connect">
	  <title xml:lang="en"><function>connect</function></title>

	  <para xml:lang="en">Once a client has created a socket, it needs to
	    connect it to a specific port on a remote system.  It uses
	    <citerefentry><refentrytitle>connect</refentrytitle><manvolnum>2</manvolnum></citerefentry>:</para>

<programlisting xml:lang="en">int connect(int s, const struct sockaddr *name, socklen_t namelen);</programlisting>

	  <para xml:lang="en">The <varname>s</varname> argument is the socket, i.e.,
	    the value returned by the <function>socket</function>
	    function.  The <varname>name</varname> is a pointer to
	    <varname>sockaddr</varname>, the structure we have talked
	    about extensively.  Finally, <varname>namelen</varname>
	    informs the system how many bytes are in our
	    <varname>sockaddr</varname> structure.</para>

	  <para xml:lang="en">If <function>connect</function> is successful, it
	    returns <constant>0</constant>.  Otherwise it returns
	    <constant>-1</constant> and stores the error code in
	    <varname>errno</varname>.</para>

	  <para xml:lang="en">There are many reasons why
	    <function>connect</function> may fail.  For example, with
	    an attempt to an Internet connection, the
	    <acronym>IP</acronym> address may not exist, or it may be
	    down, or just too busy, or it may not have a server
	    listening at the specified port.  Or it may outright
	    <emphasis>refuse</emphasis> any request for specific
	    code.</para>
	</sect4>

	<sect4 xml:id="sockets-first-client">
	  <title xml:lang="en">Our First Client</title>

	  <para xml:lang="en">We now know enough to write a very simple client, one
	    that will get current time from <systemitem class="ipaddress">192.43.244.18</systemitem> and print
	    it to <filename>stdout</filename>.</para>

	  <programlisting xml:lang="en">/*
 * daytime.c
 *
 * Programmed by G. Adam Stanislav
 */
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;

int main() {
  register int s;
  register int bytes;
  struct sockaddr_in sa;
  char buffer[BUFSIZ+1];

  if ((s = socket(PF_INET, SOCK_STREAM, 0)) &lt; 0) {
    perror("socket");
    return 1;
  }

  bzero(&amp;sa, sizeof sa);

  sa.sin_family = AF_INET;
  sa.sin_port = htons(13);
  sa.sin_addr.s_addr = htonl((((((192 &lt;&lt; 8) | 43) &lt;&lt; 8) | 244) &lt;&lt; 8) | 18);
  if (connect(s, (struct sockaddr *)&amp;sa, sizeof sa) &lt; 0) {
    perror("connect");
    close(s);
    return 2;
  }

  while ((bytes = read(s, buffer, BUFSIZ)) &gt; 0)
    write(1, buffer, bytes);

  close(s);
  return 0;
}</programlisting>

	  <para xml:lang="en">Go ahead, enter it in your editor, save it as
	    <filename>daytime.c</filename>, then compile and run
	    it:</para>

	  <screen xml:lang="en"><prompt>%</prompt> <userinput>cc -O3 -o daytime daytime.c</userinput>
<prompt>%</prompt> <userinput>./daytime</userinput>

52079 01-06-19 02:29:25 50 0 1 543.9 UTC(NIST) *
<prompt>%</prompt></screen>

	  <para xml:lang="en">In this case, the date was June 19, 2001, the time was
	    02:29:25 <acronym>UTC</acronym>.  Naturally, your results
	    will vary.</para>
	</sect4>
      </sect3>

      <sect3 xml:id="sockets-server-functions">
	<title xml:lang="en">Server Functions</title>

	<para xml:lang="en">The typical server does not initiate the connection.
	  Instead, it waits for a client to call it and request
	  services.  It does not know when the client will call, nor
	  how many clients will call.  It may be just sitting there,
	  waiting patiently, one moment, The next moment, it can find
	  itself swamped with requests from a number of clients, all
	  calling in at the same time.</para>

	<para xml:lang="en">The sockets interface offers three basic functions to
	  handle this.</para>

	<sect4 xml:id="sockets-bind">
	  <title xml:lang="en"><function>bind</function></title>

	  <para xml:lang="en">Ports are like extensions to a phone line: After you
	    dial a number, you dial the extension to get to a specific
	    person or department.</para>

	  <para xml:lang="en">There are 65535 <acronym>IP</acronym> ports, but a
	    server usually processes requests that come in on only one
	    of them.  It is like telling the phone room operator that
	    we are now at work and available to answer the phone at a
	    specific extension.  We use <citerefentry><refentrytitle>bind</refentrytitle><manvolnum>2</manvolnum></citerefentry> to tell sockets
	    which port we want to serve.</para>

	  <programlisting xml:lang="en">int bind(int s, const struct sockaddr *addr, socklen_t addrlen);</programlisting>

	  <para xml:lang="en">Beside specifying the port in <varname>addr</varname>,
	    the server may include its <acronym>IP</acronym> address.
	    However, it can just use the symbolic constant
	    <symbol>INADDR_ANY</symbol> to indicate it will serve all
	    requests to the specified port regardless of what its
	    <acronym>IP</acronym> address is.  This symbol, along with
	    several similar ones, is declared in
	    <filename>netinet/in.h</filename></para>

	  <programlisting xml:lang="en">#define	INADDR_ANY		(u_int32_t)0x00000000</programlisting>

	  <para xml:lang="en">Suppose we were writing a server for the
	    <emphasis>daytime</emphasis> protocol over
	    <acronym>TCP</acronym>/<acronym>IP</acronym>.  Recall that
	    it uses port 13.  Our <varname>sockaddr_in</varname>
	    structure would look like this:</para>

	  <mediaobject xml:lang="en">
	    <imageobject>
	      <imagedata fileref="sockets/sainserv"/>
	    </imageobject>

	    <textobject>
	      <literallayout class="monospaced" xml:lang="en">        0        1        2       3
   +--------+--------+--------+--------+
 0 |    0   |   2    |    0   |   13   |
   +--------+--------+--------+--------+
 4 |                 0                 |
   +-----------------------------------+
 8 |                 0                 |
   +-----------------------------------+
12 |                 0                 |
   +-----------------------------------+</literallayout>
	    </textobject>

	    <textobject>
	      <phrase>Example Server sockaddr_in</phrase>
	    </textobject>
	  </mediaobject>
	</sect4>

	<sect4 xml:id="sockets-listen">
	  <title xml:lang="en"><function>listen</function></title>

	  <para xml:lang="en">To continue our office phone analogy, after you have
	    told the phone central operator what extension you will be
	    at, you now walk into your office, and make sure your own
	    phone is plugged in and the ringer is turned on.  Plus,
	    you make sure your call waiting is activated, so you can
	    hear the phone ring even while you are talking to
	    someone.</para>

	  <para xml:lang="en">The server ensures all of that with the <citerefentry><refentrytitle>listen</refentrytitle><manvolnum>2</manvolnum></citerefentry>
	    function.</para>

	  <programlisting xml:lang="en">int listen(int s, int backlog);</programlisting>

	  <para xml:lang="en">In here, the <varname>backlog</varname> variable tells
	    sockets how many incoming requests to accept while you are
	    busy processing the last request.  In other words, it
	    determines the maximum size of the queue of pending
	    connections.</para>
	</sect4>

	<sect4 xml:id="sockets-accept">
	  <title xml:lang="en"><function>accept</function></title>

	  <para xml:lang="en">After you hear the phone ringing, you accept the call
	    by answering the call.  You have now established a
	    connection with your client.  This connection remains
	    active until either you or your client hang up.</para>

	  <para xml:lang="en">The server accepts the connection by using the
	    <citerefentry><refentrytitle>accept</refentrytitle><manvolnum>2</manvolnum></citerefentry> function.</para>

	  <programlisting xml:lang="en">int accept(int s, struct sockaddr *addr, socklen_t *addrlen);</programlisting>

	  <para xml:lang="en">Note that this time <varname>addrlen</varname> is a
	    pointer.  This is necessary because in this case it is the
	    socket that fills out <varname>addr</varname>, the
	    <varname>sockaddr_in</varname> structure.</para>

	  <para xml:lang="en">The return value is an integer.  Indeed, the
	    <function>accept</function> returns a <emphasis>new
	      socket</emphasis>.  You will use this new socket to
	    communicate with the client.</para>

	  <para xml:lang="en">What happens to the old socket? It continues to listen
	    for more requests (remember the <varname>backlog</varname>
	    variable we passed to <function>listen</function>?) until
	    we <function>close</function> it.</para>

	  <para xml:lang="en">Now, the new socket is meant only for communications.
	    It is fully connected.  We cannot pass it to
	    <function>listen</function> again, trying to accept
	    additional connections.</para>
	</sect4>

	<sect4 xml:id="sockets-first-server">
	  <title xml:lang="en">Our First Server</title>

	  <para xml:lang="en">Our first server will be somewhat more complex than
	    our first client was: Not only do we have more sockets
	    functions to use, but we need to write it as a
	    daemon.</para>

	  <para xml:lang="en">This is best achieved by creating a <emphasis>child
	      process</emphasis> after binding the port.  The main
	    process then exits and returns control to the
	    <application>shell</application> (or whatever program
	    invoked it).</para>

	  <para xml:lang="en">The child calls <function>listen</function>, then
	    starts an endless loop, which accepts a connection, serves
	    it, and eventually closes its socket.</para>

	  <programlisting xml:lang="en">/*
 * daytimed - a port 13 server
 *
 * Programmed by G. Adam Stanislav
 * June 19, 2001
 */
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;

#define BACKLOG 4

int main() {
    register int s, c;
    int b;
    struct sockaddr_in sa;
    time_t t;
    struct tm *tm;
    FILE *client;

    if ((s = socket(PF_INET, SOCK_STREAM, 0)) &lt; 0) {
        perror("socket");
        return 1;
    }

    bzero(&amp;sa, sizeof sa);

    sa.sin_family = AF_INET;
    sa.sin_port   = htons(13);

    if (INADDR_ANY)
        sa.sin_addr.s_addr = htonl(INADDR_ANY);

    if (bind(s, (struct sockaddr *)&amp;sa, sizeof sa) &lt; 0) {
        perror("bind");
        return 2;
    }

    switch (fork()) {
        case -1:
            perror("fork");
            return 3;
            break;
        default:
            close(s);
            return 0;
            break;
        case 0:
            break;
    }

    listen(s, BACKLOG);

    for (;;) {
        b = sizeof sa;

        if ((c = accept(s, (struct sockaddr *)&amp;sa, &amp;b)) &lt; 0) {
            perror("daytimed accept");
            return 4;
        }

        if ((client = fdopen(c, "w")) == NULL) {
            perror("daytimed fdopen");
            return 5;
        }

        if ((t = time(NULL)) &lt; 0) {
            perror("daytimed time");

            return 6;
        }

        tm = gmtime(&amp;t);
        fprintf(client, "%.4i-%.2i-%.2iT%.2i:%.2i:%.2iZ\n",
            tm-&gt;tm_year + 1900,
            tm-&gt;tm_mon + 1,
            tm-&gt;tm_mday,
            tm-&gt;tm_hour,
            tm-&gt;tm_min,
            tm-&gt;tm_sec);

        fclose(client);
    }
}</programlisting>

	  <para xml:lang="en">We start by creating a socket.  Then we fill out the
	    <varname>sockaddr_in</varname> structure in
	    <varname>sa</varname>.  Note the conditional use of
	    <symbol>INADDR_ANY</symbol>:</para>

	  <programlisting xml:lang="en">if (INADDR_ANY)
        sa.sin_addr.s_addr = htonl(INADDR_ANY);</programlisting>

	  <para xml:lang="en">Its value is <constant>0</constant>.  Since we have
	    just used <function>bzero</function> on the entire
	    structure, it would be redundant to set it to
	    <constant>0</constant> again.  But if we port our code to
	    some other system where <symbol>INADDR_ANY</symbol> is
	    perhaps not a zero, we need to assign it to
	    <varname>sa.sin_addr.s_addr</varname>.  Most modern C
	    compilers are clever enough to notice that
	    <symbol>INADDR_ANY</symbol> is a constant.  As long as it
	    is a zero, they will optimize the entire conditional
	    statement out of the code.</para>

	  <para xml:lang="en">After we have called <function>bind</function>
	    successfully, we are ready to become a
	    <emphasis>daemon</emphasis>: We use
	    <function>fork</function> to create a child process.  In
	    both, the parent and the child, the <varname>s</varname>
	    variable is our socket.  The parent process will not need
	    it, so it calls <function>close</function>, then it
	    returns <constant>0</constant> to inform its own parent it
	    had terminated successfully.</para>

	  <para xml:lang="en">Meanwhile, the child process continues working in the
	    background.  It calls <function>listen</function> and sets
	    its backlog to <constant>4</constant>.  It does not need a
	    large value here because <emphasis>daytime</emphasis> is
	    not a protocol many clients request all the time, and
	    because it can process each request instantly
	    anyway.</para>

	  <para xml:lang="en">Finally, the daemon starts an endless loop, which
	    performs the following steps:</para>

	  <procedure>
	    <step>
	      <para xml:lang="en">Call <function>accept</function>.  It waits here
		until a client contacts it.  At that point, it
		receives a new socket, <varname>c</varname>, which it
		can use to communicate with this particular
		client.</para>
	    </step>

	    <step>
	      <para xml:lang="en">It uses the C function <function>fdopen</function>
		to turn the socket from a low-level <emphasis>file
		  descriptor</emphasis> to a C-style
		<varname>FILE</varname> pointer.  This will allow the
		use of <function>fprintf</function> later
		on.</para>
	    </step>

	    <step>
	      <para xml:lang="en">It checks the time, and prints it in the
		<emphasis><acronym>ISO</acronym> 8601</emphasis>
		format to the <varname>client</varname>
		<quote>file</quote>.  It then uses
		<function>fclose</function> to close the file.  That
		will automatically close the socket as
		well.</para>
	    </step>
	  </procedure>

	  <para xml:lang="en">We can <emphasis>generalize</emphasis> this, and use
	    it as a model for many other servers:</para>

	  <mediaobject xml:lang="en">
	    <imageobject>
	      <imagedata fileref="sockets/serv"/>
	    </imageobject>

	    <textobject>
	      <literallayout class="monospaced" xml:lang="en">+-----------------+
|  Create Socket  |
+-----------------+
          |
+-----------------+
|    Bind Port    |       Daemon Process
+-----------------+
          |                 +--------+
          +-------------+--&gt;|  Init  |
          |             |   +--------+
+-----------------+     |         |
|        Exit     |     |   +--------+
+-----------------+     |   | Listen |
                        |   +--------+
                        |         |
                        |   +--------+
                        |   | Accept |
                        |   +--------+
                        |         |
                        |   +--------+
                        |   | Serve  |
                        |   +--------+
                        |         |
                        |   +--------+
                        |   | Close  |
                        |&lt;--------+</literallayout>
	    </textobject>

	    <textobject>
	      <phrase>Sequential Server</phrase>
	    </textobject>
	  </mediaobject>

	  <para xml:lang="en">This flowchart is good for <emphasis>sequential
	      servers</emphasis>, i.e., servers that can serve one
	    client at a time, just as we were able to with our
	    <emphasis>daytime</emphasis> server.  This is only
	    possible whenever there is no real
	    <quote>conversation</quote> going on between the client
	    and the server: As soon as the server detects a connection
	    to the client, it sends out some data and closes the
	    connection.  The entire operation may take nanoseconds,
	    and it is finished.</para>

	  <para xml:lang="en">The advantage of this flowchart is that, except for
	    the brief moment after the parent
	    <function>fork</function>s and before it exits, there is
	    always only one <emphasis>process</emphasis> active: Our
	    server does not take up much memory and other system
	    resources.</para>

	  <para xml:lang="en">Note that we have added <emphasis>initialize
	      daemon</emphasis> in our flowchart.  We did not need to
	    initialize our own daemon, but this is a good place in the
	    flow of the program to set up any
	    <function>signal</function> handlers, open any files we
	    may need, etc.</para>

	  <para xml:lang="en">Just about everything in the flow chart can be used
	    literally on many different servers.  The
	    <emphasis>serve</emphasis> entry is the exception.  We
	    think of it as a <emphasis><quote>black
		box</quote></emphasis>, i.e., something you design
	    specifically for your own server, and just <quote>plug it
	      into the rest.</quote></para>

	  <para xml:lang="en">Not all protocols are that simple.  Many receive a
	    request from the client, reply to it, then receive another
	    request from the same client.  Because of that, they do
	    not know in advance how long they will be serving the
	    client.  Such servers usually start a new process for each
	    client.  While the new process is serving its client, the
	    daemon can continue listening for more connections.</para>

	  <para xml:lang="en">Now, go ahead, save the above source code as
	    <filename>daytimed.c</filename> (it is customary to end
	    the names of daemons with the letter
	    <constant>d</constant>).  After you have compiled it, try
	    running it:</para>

	  <screen xml:lang="en"><prompt>%</prompt> <userinput>./daytimed</userinput>
bind: Permission denied
<prompt>%</prompt></screen>

	  <para xml:lang="en">What happened here? As you will recall, the
	    <emphasis>daytime</emphasis> protocol uses port 13.  But
	    all ports below 1024 are reserved to the superuser
	    (otherwise, anyone could start a daemon pretending to
	    serve a commonly used port, while causing a security
	    breach).</para>

	  <para xml:lang="en">Try again, this time as the superuser:</para>

	  <screen xml:lang="en"><prompt>#</prompt> <userinput>./daytimed</userinput>
<prompt>#</prompt></screen>

	  <para xml:lang="en">What... Nothing? Let us try again:</para>

	  <screen xml:lang="en"><prompt>#</prompt> <userinput>./daytimed</userinput>

bind: Address already in use
<prompt>#</prompt></screen>

	  <para xml:lang="en">Every port can only be bound by one program at a time.
	    Our first attempt was indeed successful: It started the
	    child daemon and returned quietly.  It is still running
	    and will continue to run until you either kill it, or any
	    of its system calls fail, or you reboot the system.</para>

	  <para xml:lang="en">Fine, we know it is running in the background.  But is
	    it working?  How do we know it is a proper
	    <emphasis>daytime</emphasis> server?  Simple:</para>

	  <screen xml:lang="en"><prompt>%</prompt> <userinput>telnet localhost 13</userinput>

Trying ::1...
telnet: connect to address ::1: Connection refused
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
2001-06-19T21:04:42Z
Connection closed by foreign host.
<prompt>%</prompt></screen>

	  <para xml:lang="en"><application>telnet</application> tried the new
	    <acronym>IP</acronym>v6, and failed.  It retried with
	    <acronym>IP</acronym>v4 and succeeded.  The daemon
	    works.</para>

	  <para xml:lang="en">If you have access to another <trademark class="registered">UNIX</trademark> system via
	    <application>telnet</application>, you can use it to test
	    accessing the server remotely.  My computer does not have
	    a static <acronym>IP</acronym> address, so this is what I
	    did:</para>

	  <screen xml:lang="en"><prompt>%</prompt> <userinput>who</userinput>

whizkid          ttyp0   Jun 19 16:59   (216.127.220.143)
xxx              ttyp1   Jun 19 16:06   (xx.xx.xx.xx)
<prompt>%</prompt> <userinput>telnet 216.127.220.143 13</userinput>

Trying 216.127.220.143...
Connected to r47.bfm.org.
Escape character is '^]'.
2001-06-19T21:31:11Z
Connection closed by foreign host.
<prompt>%</prompt></screen>

	  <para xml:lang="en">Again, it worked.  Will it work using the domain
	    name?</para>

	  <screen xml:lang="en"><prompt>%</prompt> <userinput>telnet r47.bfm.org 13</userinput>

Trying 216.127.220.143...
Connected to r47.bfm.org.
Escape character is '^]'.
2001-06-19T21:31:40Z
Connection closed by foreign host.
<prompt>%</prompt></screen>

	  <para xml:lang="en">By the way, <application>telnet</application> prints
	    the <emphasis>Connection closed by foreign host</emphasis>
	    message after our daemon has closed the socket.  This
	    shows us that, indeed, using
	    <function>fclose(client);</function> in our code works as
	    advertised.</para>
	</sect4>
      </sect3>
    </sect2>
  </sect1>

  <sect1 xml:id="sockets-helper-functions">
    <title xml:lang="en">Helper Functions</title>

    <para xml:lang="en">FreeBSD C library contains many helper functions for sockets
      programming.  For example, in our sample client we hard coded
      the <systemitem class="fqdomainname">time.nist.gov</systemitem>
      <acronym>IP</acronym> address.  But we do not always know the
      <acronym>IP</acronym> address.  Even if we do, our software is
      more flexible if it allows the user to enter the
      <acronym>IP</acronym> address, or even the domain name.</para>

    <sect2 xml:id="sockets-gethostbyname">
      <title xml:lang="en"><function>gethostbyname</function></title>

      <para xml:lang="en">While there is no way to pass the domain name directly to
	any of the sockets functions, the FreeBSD C library comes with
	the <citerefentry><refentrytitle>gethostbyname</refentrytitle><manvolnum>3</manvolnum></citerefentry> and <citerefentry><refentrytitle>gethostbyname2</refentrytitle><manvolnum>3</manvolnum></citerefentry>
	functions, declared in <filename>netdb.h</filename>.</para>

      <programlisting xml:lang="en">struct hostent * gethostbyname(const char *name);
struct hostent * gethostbyname2(const char *name, int af);</programlisting>

      <para xml:lang="en">Both return a pointer to the <varname>hostent</varname>
	structure, with much information about the domain.  For our
	purposes, the <varname>h_addr_list[0]</varname> field of the
	structure points at <varname>h_length</varname> bytes of the
	correct address, already stored in the <emphasis>network byte
	  order</emphasis>.</para>

      <para xml:lang="en">This allows us to create a much more flexible—and
	much more useful—version of our
	<application>daytime</application> program:</para>

      <programlisting xml:lang="en">/*
 * daytime.c
 *
 * Programmed by G. Adam Stanislav
 * 19 June 2001
 */
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;netdb.h&gt;

int main(int argc, char *argv[]) {
  register int s;
  register int bytes;
  struct sockaddr_in sa;
  struct hostent *he;
  char buf[BUFSIZ+1];
  char *host;

  if ((s = socket(PF_INET, SOCK_STREAM, 0)) &lt; 0) {
    perror("socket");
    return 1;
  }

  bzero(&amp;sa, sizeof sa);

  sa.sin_family = AF_INET;
  sa.sin_port = htons(13);

  host = (argc &gt; 1) ? (char *)argv[1] : "time.nist.gov";

  if ((he = gethostbyname(host)) == NULL) {
    herror(host);
    return 2;
  }

  bcopy(he-&gt;h_addr_list[0],&amp;sa.sin_addr, he-&gt;h_length);

  if (connect(s, (struct sockaddr *)&amp;sa, sizeof sa) &lt; 0) {
    perror("connect");
    return 3;
  }

  while ((bytes = read(s, buf, BUFSIZ)) &gt; 0)
    write(1, buf, bytes);

  close(s);
  return 0;
}</programlisting>

      <para xml:lang="en">We now can type a domain name (or an <acronym>IP</acronym>
	address, it works both ways) on the command line, and the
	program will try to connect to its
	<emphasis>daytime</emphasis> server.  Otherwise, it will still
	default to <systemitem class="fqdomainname">time.nist.gov</systemitem>.  However,
	even in this case we will use
	<function>gethostbyname</function> rather than hard coding
	<systemitem class="ipaddress">192.43.244.18</systemitem>.
	That way, even if its <acronym>IP</acronym> address changes in
	the future, we will still find it.</para>

      <para xml:lang="en">Since it takes virtually no time to get the time from your
	local server, you could run <application>daytime</application>
	twice in a row: First to get the time from <systemitem class="fqdomainname">time.nist.gov</systemitem>, the second
	time from your own system.  You can then compare the results
	and see how exact your system clock is:</para>

      <screen xml:lang="en"><prompt>%</prompt> <userinput>daytime ; daytime localhost</userinput>


52080 01-06-20 04:02:33 50 0 0 390.2 UTC(NIST) *
2001-06-20T04:02:35Z
<prompt>%</prompt></screen>

      <para xml:lang="en">As you can see, my system was two seconds ahead of the
	<acronym>NIST</acronym> time.</para>
    </sect2>

    <sect2 xml:id="sockets-getservbyname">
      <title xml:lang="en"><function>getservbyname</function></title>

      <para xml:lang="en">Sometimes you may not be sure what port a certain service
	uses.  The <citerefentry><refentrytitle>getservbyname</refentrytitle><manvolnum>3</manvolnum></citerefentry> function, also declared in
	<filename>netdb.h</filename> comes in very handy in those
	cases:</para>

<programlisting xml:lang="en">struct servent * getservbyname(const char *name, const char *proto);</programlisting>

      <para xml:lang="en">The <varname>servent</varname> structure contains the
	<varname>s_port</varname>, which contains the proper port,
	already in <emphasis>network byte order</emphasis>.</para>

      <para xml:lang="en">Had we not known the correct port for the
	<emphasis>daytime</emphasis> service, we could have found it
	this way:</para>

      <programlisting xml:lang="en">struct servent *se;
  ...
  if ((se = getservbyname("daytime", "tcp")) == NULL {
    fprintf(stderr, "Cannot determine which port to use.\n");
    return 7;
  }
  sa.sin_port = se-&gt;s_port;</programlisting>

      <para xml:lang="en">You usually do know the port.  But if you are developing a
	new protocol, you may be testing it on an unofficial port.
	Some day, you will register the protocol and its port (if
	nowhere else, at least in your
	<filename>/etc/services</filename>, which is where
	<function>getservbyname</function> looks).  Instead of
	returning an error in the above code, you just use the
	temporary port number.  Once you have listed the protocol in
	<filename>/etc/services</filename>, your software will find
	its port without you having to rewrite the code.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="sockets-concurrent-servers">
    <title xml:lang="en">Concurrent Servers</title>

    <para xml:lang="en">Unlike a sequential server, a <emphasis>concurrent
	server</emphasis> has to be able to serve more than one client
      at a time.  For example, a <emphasis>chat server</emphasis> may
      be serving a specific client for hours—it cannot wait till
      it stops serving a client before it serves the next one.</para>

    <para xml:lang="en">This requires a significant change in our flowchart:</para>

    <mediaobject xml:lang="en">
      <imageobject>
	<imagedata fileref="sockets/serv2"/>
      </imageobject>

      <textobject>
	<literallayout class="monospaced" xml:lang="en">+-----------------+
|  Create Socket  |
+-----------------+
          |
+-----------------+
|    Bind Port    |       Daemon Process
+-----------------+
          |                 +--------+
          +-------------+--&gt;|  Init  |
          |             |   +--------+
+-----------------+     |         |
|        Exit     |     |   +--------+
+-----------------+     |   | Listen |
                        |   +--------+
                        |         |
                        |   +--------+
                        |   | Accept |
                        |   +--------+
                        |         |       +------------------+
                        |         +------&gt;| Close Top Socket |
                        |         |       +------------------+
                        |   +--------+             |
                        |   | Close  |    +------------------+
                        |   +--------+    |     Serve        |
                        |         |       +------------------+
                        |&lt;--------+                |
                                          +------------------+
                                          | Close Acc Socket |
                            +--------+    +------------------+
                            | Signal |             |
                            +--------+    +------------------+
                                          |      Exit        |
                                          +------------------+</literallayout>
      </textobject>

      <textobject>
	<phrase>Concurrent Server</phrase>
      </textobject>
    </mediaobject>

    <para xml:lang="en">We moved the <emphasis>serve</emphasis> from the
      <emphasis>daemon process</emphasis> to its own <emphasis>server
	process</emphasis>.  However, because each child process
      inherits all open files (and a socket is treated just like a
      file), the new process inherits not only the
      <emphasis><quote>accepted handle,</quote></emphasis> i.e., the
      socket returned by the <function>accept</function> call, but
      also the <emphasis>top socket</emphasis>, i.e., the one opened
      by the top process right at the beginning.</para>

    <para xml:lang="en">However, the <emphasis>server process</emphasis> does not
      need this socket and should <function>close</function> it
      immediately.  Similarly, the <emphasis>daemon process</emphasis>
      no longer needs the <emphasis>accepted socket</emphasis>, and
      not only should, but <emphasis>must</emphasis>
      <function>close</function> it—otherwise, it will run out
      of available <emphasis>file descriptors</emphasis> sooner or
      later.</para>

    <para xml:lang="en">After the <emphasis>server process</emphasis> is done
      serving, it should close the <emphasis>accepted
	socket</emphasis>.  Instead of returning to
      <function>accept</function>, it now exits.</para>

    <para xml:lang="en">Under <trademark class="registered">UNIX</trademark>, a process does not really
      <emphasis>exit</emphasis>.  Instead, it
      <emphasis>returns</emphasis> to its parent.  Typically, a parent
      process <function>wait</function>s for its child process, and
      obtains a return value.  However, our <emphasis>daemon
	process</emphasis> cannot simply stop and wait.  That would
      defeat the whole purpose of creating additional processes.  But
      if it never does <function>wait</function>, its children will
      become <emphasis>zombies</emphasis>—no longer functional
      but still roaming around.</para>

    <para xml:lang="en">For that reason, the <emphasis>daemon process</emphasis>
      needs to set <emphasis>signal handlers</emphasis> in its
      <emphasis>initialize daemon</emphasis> phase.  At least a
      <symbol>SIGCHLD</symbol> signal has to be processed, so the
      daemon can remove the zombie return values from the system and
      release the system resources they are taking up.</para>

    <para xml:lang="en">That is why our flowchart now contains a <emphasis>process
	signals</emphasis> box, which is not connected to any other
      box.  By the way, many servers also process
      <symbol>SIGHUP</symbol>, and typically interpret as the signal
      from the superuser that they should reread their configuration
      files.  This allows us to change settings without having to kill
      and restart these servers.</para>
  </sect1>
</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD: head/en_US.ISO8859-1/books/developers-handbook/ipv6/chapter.xml 52175 2018-08-26 14:08:19Z bcr $
-->
<chapter version="5.0" xml:id="ipv6">
  <title xml:lang="en">IPv6 Internals</title>

  <sect1 xml:id="ipv6-implementation">
    <info>
      <title xml:lang="en">IPv6/IPsec Implementation</title>

      <authorgroup>
	<author xml:lang="en">
	  <personname>
	    <firstname>Yoshinobu</firstname>
	    <surname>Inoue</surname>
	  </personname>
	  <contrib>Contributed by </contrib>
	</author>
      </authorgroup>
    </info>

    <para xml:lang="en">This section should explain IPv6 and IPsec related
      implementation internals.  These functionalities are derived
      from <link xlink:href="http://www.kame.net/">KAME
	project</link></para>

    <sect2 xml:id="ipv6details">
      <title xml:lang="en">IPv6</title>

      <sect3>
	<title xml:lang="en">Conformance</title>

	<para xml:lang="en">The IPv6 related functions conforms, or tries to conform
	  to the latest set of IPv6 specifications.  For future
	  reference we list some of the relevant documents below
	  (<emphasis>NOTE</emphasis>: this is not a complete list -
	  this is too hard to maintain...).</para>

	<para xml:lang="en">For details please refer to specific chapter in the
	  document, RFCs, manual pages, or comments in the source
	  code.</para>

	<para xml:lang="en">Conformance tests have been performed on the KAME STABLE
	  kit at TAHI project.  Results can be viewed at <uri xlink:href="http://www.tahi.org/report/KAME/">http://www.tahi.org/report/KAME/</uri>.
	  We also attended University of New Hampshire IOL tests (<uri xlink:href="http://www.iol.unh.edu/">http://www.iol.unh.edu/</uri>)
	  in the past, with our past snapshots.</para>

	<itemizedlist>
	  <listitem>
	    <para xml:lang="en">RFC1639: FTP Operation Over Big Address Records
	      (FOOBAR)</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">RFC2428 is preferred over RFC1639.  FTP clients
		  will first try RFC2428, then RFC1639 if
		  failed.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC1886: DNS Extensions to support IPv6</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC1933: Transition Mechanisms for IPv6 Hosts and
	      Routers</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">IPv4 compatible address is not supported.</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">automatic tunneling (described in 4.3 of this
		  RFC) is not supported.</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en"><citerefentry><refentrytitle>gif</refentrytitle><manvolnum>4</manvolnum></citerefentry> interface implements
		  IPv[46]-over-IPv[46] tunnel in a generic way, and it
		  covers "configured tunnel" described in the spec.
		  See <link linkend="gif">23.5.1.5</link> in this
		  document for details.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC1981: Path MTU Discovery for IPv6</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2080: RIPng for IPv6</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">usr.sbin/route6d support this.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2292: Advanced Sockets API for IPv6</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">For supported library functions/kernel APIs, see
		  <filename>sys/netinet6/ADVAPI</filename>.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2362: Protocol Independent Multicast-Sparse Mode
	      (PIM-SM)</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">RFC2362 defines packet formats for PIM-SM.
		  <filename>draft-ietf-pim-ipv6-01.txt</filename> is
		  written based on this.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2373: IPv6 Addressing Architecture</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">supports node required addresses, and conforms
		  to the scope requirement.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2374: An IPv6 Aggregatable Global Unicast Address
	      Format</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">supports 64-bit length of Interface ID.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2375: IPv6 Multicast Address Assignments</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">Userland applications use the well-known
		  addresses assigned in the RFC.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2428: FTP Extensions for IPv6 and NATs</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">RFC2428 is preferred over RFC1639.  FTP clients
		  will first try RFC2428, then RFC1639 if
		  failed.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2460: IPv6 specification</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2461: Neighbor discovery for IPv6</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">See <link linkend="neighbor-discovery">23.5.1.2</link> in
		  this document for details.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2462: IPv6 Stateless Address
	      Autoconfiguration</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">See <link linkend="ipv6-pnp">23.5.1.4</link> in
		  this document for details.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2463: ICMPv6 for IPv6 specification</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">See <link linkend="icmpv6">23.5.1.9</link> in
		  this document for details.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2464: Transmission of IPv6 Packets over Ethernet
	      Networks</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2465: MIB for IPv6: Textual Conventions and
	      General Group</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">Necessary statistics are gathered by the kernel.
		  Actual IPv6 MIB support is provided as a patchkit
		  for ucd-snmp.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2466: MIB for IPv6: ICMPv6 group</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">Necessary statistics are gathered by the kernel.
		  Actual IPv6 MIB support is provided as patchkit for
		  ucd-snmp.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2467: Transmission of IPv6 Packets over FDDI
	      Networks</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2497: Transmission of IPv6 packet over ARCnet
	      Networks</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2553: Basic Socket Interface Extensions for
	      IPv6</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">IPv4 mapped address (3.7) and special behavior
		  of IPv6 wildcard bind socket (3.8) are supported.
		  See <link linkend="ipv6-wildcard-socket">23.5.1.12</link> in
		  this document for details.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2675: IPv6 Jumbograms</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">See <link linkend="ipv6-jumbo">23.5.1.7</link>
		  in this document for details.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2710: Multicast Listener Discovery for
	      IPv6</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">RFC2711: IPv6 router alert option</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><filename>draft-ietf-ipngwg-router-renum-08</filename>:
	      Router renumbering for IPv6</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><filename>draft-ietf-ipngwg-icmp-namelookups-02</filename>:
	      IPv6 Name Lookups Through ICMP</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><filename>draft-ietf-ipngwg-icmp-name-lookups-03</filename>:
	      IPv6 Name Lookups Through ICMP</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><filename>draft-ietf-pim-ipv6-01.txt</filename>: PIM
	      for IPv6</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en"><citerefentry><refentrytitle>pim6dd</refentrytitle><manvolnum>8</manvolnum></citerefentry> implements dense mode.
		  <citerefentry><refentrytitle>pim6sd</refentrytitle><manvolnum>8</manvolnum></citerefentry> implements sparse mode.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><filename>draft-itojun-ipv6-tcp-to-anycast-00</filename>:
	      Disconnecting TCP connection toward IPv6 anycast
	      address</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><filename>draft-yamamoto-wideipv6-comm-model-00</filename></para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">See <link linkend="ipv6-sas">23.5.1.6</link> in
		  this document for details.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><filename>draft-ietf-ipngwg-scopedaddr-format-00.txt</filename>:
	      An Extension of Format for IPv6 Scoped Addresses</para>
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3 xml:id="neighbor-discovery">
	<title xml:lang="en">Neighbor Discovery</title>

	<para xml:lang="en">Neighbor Discovery is fairly stable.  Currently Address
	  Resolution, Duplicated Address Detection, and Neighbor
	  Unreachability Detection are supported.  In the near future
	  we will be adding Proxy Neighbor Advertisement support in
	  the kernel and Unsolicited Neighbor Advertisement
	  transmission command as admin tool.</para>

	<para xml:lang="en">If DAD fails, the address will be marked "duplicated"
	  and message will be generated to syslog (and usually to
	  console).  The "duplicated" mark can be checked with
	  <citerefentry><refentrytitle>ifconfig</refentrytitle><manvolnum>8</manvolnum></citerefentry>.  It is administrators' responsibility to
	  check for and recover from DAD failures.  The behavior
	  should be improved in the near future.</para>

	<para xml:lang="en">Some of the network driver loops multicast packets back
	  to itself, even if instructed not to do so (especially in
	  promiscuous mode).  In such cases DAD may fail, because DAD
	  engine sees inbound NS packet (actually from the node
	  itself) and considers it as a sign of duplicate.  You may
	  want to look at #if condition marked "heuristics" in
	  sys/netinet6/nd6_nbr.c:nd6_dad_timer() as workaround (note
	  that the code fragment in "heuristics" section is not spec
	  conformant).</para>

	<para xml:lang="en">Neighbor Discovery specification (RFC2461) does not talk
	  about neighbor cache handling in the following cases:</para>

	<orderedlist>
	  <listitem>
	    <para xml:lang="en">when there was no neighbor cache entry, node
	      received unsolicited RS/NS/NA/redirect packet without
	      link-layer address</para>
	  </listitem>
	  <listitem>
	    <para xml:lang="en">neighbor cache handling on medium without link-layer
	      address (we need a neighbor cache entry for IsRouter
	      bit)</para>
	  </listitem>
	</orderedlist>

	<para xml:lang="en">For first case, we implemented workaround based on
	  discussions on IETF ipngwg mailing list.  For more details,
	  see the comments in the source code and email thread started
	  from (IPng 7155), dated Feb 6 1999.</para>

	<para xml:lang="en">IPv6 on-link determination rule (RFC2461) is quite
	  different from assumptions in BSD network code.  At this
	  moment, no on-link determination rule is supported where
	  default router list is empty (RFC2461, section 5.2, last
	  sentence in 2nd paragraph - note that the spec misuse the
	  word "host" and "node" in several places in the
	  section).</para>

	<para xml:lang="en">To avoid possible DoS attacks and infinite loops, only
	  10 options on ND packet is accepted now.  Therefore, if you
	  have 20 prefix options attached to RA, only the first 10
	  prefixes will be recognized.  If this troubles you, please
	  ask it on FREEBSD-CURRENT mailing list and/or modify
	  nd6_maxndopt in <filename>sys/netinet6/nd6.c</filename>.  If
	  there are high demands we may provide sysctl knob for the
	  variable.</para>
      </sect3>

      <sect3 xml:id="ipv6-scope-index">
	<title xml:lang="en">Scope Index</title>

	<para xml:lang="en">IPv6 uses scoped addresses.  Therefore, it is very
	  important to specify scope index (interface index for
	  link-local address, or site index for site-local address)
	  with an IPv6 address.  Without scope index, scoped IPv6
	  address is ambiguous to the kernel, and kernel will not be
	  able to determine the outbound interface for a
	  packet.</para>

	<para xml:lang="en">Ordinary userland applications should use advanced API
	  (RFC2292) to specify scope index, or interface index.  For
	  similar purpose, sin6_scope_id member in sockaddr_in6
	  structure is defined in RFC2553.  However, the semantics for
	  sin6_scope_id is rather vague.  If you care about
	  portability of your application, we suggest you to use
	  advanced API rather than sin6_scope_id.</para>

	<para xml:lang="en">In the kernel, an interface index for link-local scoped
	  address is embedded into 2nd 16bit-word (3rd and 4th byte)
	  in IPv6 address.  For example, you may see something
	  like:</para>

	<screen xml:lang="en">	fe80:1::200:f8ff:fe01:6317</screen>

	<para xml:lang="en">in the routing table and interface address structure
	  (struct in6_ifaddr).  The address above is a link-local
	  unicast address which belongs to a network interface whose
	  interface identifier is 1.  The embedded index enables us to
	  identify IPv6 link local addresses over multiple interfaces
	  effectively and with only a little code change.</para>

	<para xml:lang="en">Routing daemons and configuration programs, like
	  <citerefentry><refentrytitle>route6d</refentrytitle><manvolnum>8</manvolnum></citerefentry> and <citerefentry><refentrytitle>ifconfig</refentrytitle><manvolnum>8</manvolnum></citerefentry>, will need to
	  manipulate the "embedded" scope index.  These programs use
	  routing sockets and ioctls (like SIOCGIFADDR_IN6) and the
	  kernel API will return IPv6 addresses with 2nd 16bit-word
	  filled in.  The APIs are for manipulating kernel internal
	  structure.  Programs that use these APIs have to be prepared
	  about differences in kernels anyway.</para>

	<para xml:lang="en">When you specify scoped address to the command line,
	  NEVER write the embedded form (such as ff02:1::1 or
	  fe80:2::fedc).  This is not supposed to work.  Always use
	  standard form, like ff02::1 or fe80::fedc, with command line
	  option for specifying interface (like <command>ping6 -I ne0
	    ff02::1</command>).  In general, if a command does not
	  have command line option to specify outgoing interface, that
	  command is not ready to accept scoped address.  This may
	  seem to be opposite from IPv6's premise to support "dentist
	  office" situation.  We believe that specifications need some
	  improvements for this.</para>

	<para xml:lang="en">Some of the userland tools support extended numeric IPv6
	  syntax, as documented in
	  <filename>draft-ietf-ipngwg-scopedaddr-format-00.txt</filename>.
	  You can specify outgoing link, by using name of the outgoing
	  interface like "fe80::1%ne0".  This way you will be able to
	  specify link-local scoped address without much
	  trouble.</para>

	<para xml:lang="en">To use this extension in your program, you will need to
	  use <citerefentry><refentrytitle>getaddrinfo</refentrytitle><manvolnum>3</manvolnum></citerefentry>, and <citerefentry><refentrytitle>getnameinfo</refentrytitle><manvolnum>3</manvolnum></citerefentry> with
	  NI_WITHSCOPEID.  The implementation currently assumes 1-to-1
	  relationship between a link and an interface, which is
	  stronger than what specs say.</para>
      </sect3>

      <sect3 xml:id="ipv6-pnp">
	<title xml:lang="en">Plug and Play</title>

	<para xml:lang="en">Most of the IPv6 stateless address autoconfiguration is
	  implemented in the kernel.  Neighbor Discovery functions are
	  implemented in the kernel as a whole.  Router Advertisement
	  (RA) input for hosts is implemented in the kernel.  Router
	  Solicitation (RS) output for endhosts, RS input for routers,
	  and RA output for routers are implemented in the
	  userland.</para>

	<sect4>
	  <title xml:lang="en">Assignment of link-local, and special
	    addresses</title>

	  <para xml:lang="en">IPv6 link-local address is generated from IEEE802
	    address (Ethernet MAC address).  Each of interface is
	    assigned an IPv6 link-local address automatically, when
	    the interface becomes up (IFF_UP).  Also, direct route for
	    the link-local address is added to routing table.</para>

	  <para xml:lang="en">Here is an output of netstat command:</para>

	  <screen xml:lang="en">Internet6:
Destination                   Gateway                   Flags      Netif Expire
fe80:1::%ed0/64               link#1                    UC          ed0
fe80:2::%ep0/64               link#2                    UC          ep0</screen>

	  <para xml:lang="en">Interfaces that has no IEEE802 address (pseudo
	    interfaces like tunnel interfaces, or ppp interfaces) will
	    borrow IEEE802 address from other interfaces, such as
	    Ethernet interfaces, whenever possible.  If there is no
	    IEEE802 hardware attached, a last resort pseudo-random
	    value, MD5(hostname), will be used as source of link-local
	    address.  If it is not suitable for your usage, you will
	    need to configure the link-local address manually.</para>

	  <para xml:lang="en">If an interface is not capable of handling IPv6 (such
	    as lack of multicast support), link-local address will not
	    be assigned to that interface.  See section 2 for
	    details.</para>

	  <para xml:lang="en">Each interface joins the solicited multicast address
	    and the link-local all-nodes multicast addresses (e.g.,
	    fe80::1:ff01:6317 and ff02::1, respectively, on the link
	    the interface is attached).  In addition to a link-local
	    address, the loopback address (::1) will be assigned to
	    the loopback interface.  Also, ::1/128 and ff01::/32 are
	    automatically added to routing table, and loopback
	    interface joins node-local multicast group ff01::1.</para>
	</sect4>

	<sect4>
	  <title xml:lang="en">Stateless address autoconfiguration on Hosts</title>

	  <para xml:lang="en">In IPv6 specification, nodes are separated into two
	    categories: <emphasis>routers</emphasis> and
	    <emphasis>hosts</emphasis>.  Routers forward packets
	    addressed to others, hosts does not forward the packets.
	    net.inet6.ip6.forwarding defines whether this node is
	    router or host (router if it is 1, host if it is
	    0).</para>

	  <para xml:lang="en">When a host hears Router Advertisement from the
	    router, a host may autoconfigure itself by stateless
	    address autoconfiguration.  This behavior can be
	    controlled by net.inet6.ip6.accept_rtadv (host
	    autoconfigures itself if it is set to 1).  By
	    autoconfiguration, network address prefix for the
	    receiving interface (usually global address prefix) is
	    added.  Default route is also configured.  Routers
	    periodically generate Router Advertisement packets.  To
	    request an adjacent router to generate RA packet, a host
	    can transmit Router Solicitation.  To generate a RS packet
	    at any time, use the <emphasis>rtsol</emphasis> command.
	    <citerefentry><refentrytitle>rtsold</refentrytitle><manvolnum>8</manvolnum></citerefentry> daemon is also available.  <citerefentry><refentrytitle>rtsold</refentrytitle><manvolnum>8</manvolnum></citerefentry>
	    generates Router Solicitation whenever necessary, and it
	    works great for nomadic usage (notebooks/laptops).  If one
	    wishes to ignore Router Advertisements, use sysctl to set
	    net.inet6.ip6.accept_rtadv to 0.</para>

	  <para xml:lang="en">To generate Router Advertisement from a router, use
	    the <citerefentry><refentrytitle>rtadvd</refentrytitle><manvolnum>8</manvolnum></citerefentry> daemon.</para>

	  <para xml:lang="en">Note that, IPv6 specification assumes the following
	    items, and nonconforming cases are left
	    unspecified:</para>

	  <itemizedlist>
	    <listitem>
	      <para xml:lang="en">Only hosts will listen to router
		advertisements</para>
	    </listitem>
	    <listitem>
	      <para xml:lang="en">Hosts have single network interface (except
		loopback)</para>
	    </listitem>
	  </itemizedlist>

	  <para xml:lang="en">Therefore, this is unwise to enable
	    net.inet6.ip6.accept_rtadv on routers, or multi-interface
	    host.  A misconfigured node can behave strange
	    (nonconforming configuration allowed for those who would
	    like to do some experiments).</para>

	  <para xml:lang="en">To summarize the sysctl knob:</para>

	  <screen xml:lang="en">	accept_rtadv	forwarding	role of the node
	---		---		---
	0		0		host (to be manually configured)
	0		1		router
	1		0		autoconfigured host
					(spec assumes that host has single
					interface only, autoconfigured host
					with multiple interface is
					out-of-scope)
	1		1		invalid, or experimental
					(out-of-scope of spec)</screen>

	  <para xml:lang="en">RFC2462 has validation rule against incoming RA prefix
	    information option, in 5.5.3 (e).  This is to protect
	    hosts from malicious (or misconfigured) routers that
	    advertise very short prefix lifetime.  There was an update
	    from Jim Bound to ipngwg mailing list (look for "(ipng
	    6712)" in the archive) and it is implemented Jim's
	    update.</para>

	  <para xml:lang="en">See <link linkend="neighbor-discovery">23.5.1.2</link>
	    in the document for relationship between DAD and
	    autoconfiguration.</para>
	</sect4>
      </sect3>

      <sect3 xml:id="gif">
	<title xml:lang="en">Generic Tunnel Interface</title>

	<para xml:lang="en">GIF (Generic InterFace) is a pseudo interface for
	  configured tunnel.  Details are described in <citerefentry><refentrytitle>gif</refentrytitle><manvolnum>4</manvolnum></citerefentry>.
	  Currently</para>

	<itemizedlist>
	  <listitem>
	    <para xml:lang="en">v6 in v6</para>
	  </listitem>
	  <listitem>
	    <para xml:lang="en">v6 in v4</para>
	  </listitem>
	  <listitem>
	    <para xml:lang="en">v4 in v6</para>
	  </listitem>
	  <listitem>
	    <para xml:lang="en">v4 in v4</para>
	  </listitem>
	</itemizedlist>

	<para xml:lang="en">are available.  Use <citerefentry><refentrytitle>gifconfig</refentrytitle><manvolnum>8</manvolnum></citerefentry> to assign physical
	  (outer) source and destination address to gif interfaces.
	  Configuration that uses same address family for inner and
	  outer IP header (v4 in v4, or v6 in v6) is dangerous.  It is
	  very easy to configure interfaces and routing tables to
	  perform infinite level of tunneling.  <emphasis>Please be
	    warned</emphasis>.</para>

	<para xml:lang="en">gif can be configured to be ECN-friendly.  See <link linkend="ipsec-ecn">23.5.4.5</link> for ECN-friendliness
	  of tunnels, and <citerefentry><refentrytitle>gif</refentrytitle><manvolnum>4</manvolnum></citerefentry> for how to configure.</para>

	<para xml:lang="en">If you would like to configure an IPv4-in-IPv6 tunnel
	  with gif interface, read <citerefentry><refentrytitle>gif</refentrytitle><manvolnum>4</manvolnum></citerefentry> carefully.  You will
	  need to remove IPv6 link-local address automatically
	  assigned to the gif interface.</para>
      </sect3>

      <sect3 xml:id="ipv6-sas">
	<title xml:lang="en">Source Address Selection</title>

	<para xml:lang="en">Current source selection rule is scope oriented (there
	  are some exceptions - see below).  For a given destination,
	  a source IPv6 address is selected by the following
	  rule:</para>

	<orderedlist>
	  <listitem>
	    <para xml:lang="en">If the source address is explicitly specified by the
	      user (e.g.,  via the advanced API), the specified
	      address is used.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">If there is an address assigned to the outgoing
	      interface (which is usually determined by looking up the
	      routing table) that has the same scope as the
	      destination address, the address is used.</para>

	    <para xml:lang="en">This is the most typical case.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">If there is no address that satisfies the above
	      condition, choose a global address assigned to one of
	      the interfaces on the sending node.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">If there is no address that satisfies the above
	      condition, and destination address is site local scope,
	      choose a site local address assigned to one of the
	      interfaces on the sending node.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">If there is no address that satisfies the above
	      condition, choose the address associated with the
	      routing table entry for the destination.  This is the
	      last resort, which may cause scope violation.</para>
	  </listitem>
	</orderedlist>

	<para xml:lang="en">For instance, ::1 is selected for ff01::1,
	  fe80:1::200:f8ff:fe01:6317 for fe80:1::2a0:24ff:feab:839b
	  (note that embedded interface index - described in <link linkend="ipv6-scope-index">23.5.1.3</link> - helps us
	  choose the right source address.  Those embedded indices
	  will not be on the wire).  If the outgoing interface has
	  multiple address for the scope, a source is selected longest
	  match basis (rule 3).  Suppose
	  2001:0DB8:808:1:200:f8ff:fe01:6317 and
	  2001:0DB8:9:124:200:f8ff:fe01:6317 are given to the outgoing
	  interface.  2001:0DB8:808:1:200:f8ff:fe01:6317 is chosen as
	  the source for the destination 2001:0DB8:800::1.</para>

	<para xml:lang="en">Note that the above rule is not documented in the IPv6
	  spec.  It is considered "up to implementation" item.  There
	  are some cases where we do not use the above rule.  One
	  example is connected TCP session, and we use the address
	  kept in tcb as the source.  Another example is source
	  address for Neighbor Advertisement.  Under the spec (RFC2461
	  7.2.2) NA's source should be the target address of the
	  corresponding NS's target.  In this case we follow the spec
	  rather than the above longest-match rule.</para>

	<para xml:lang="en">For new connections (when rule 1 does not apply),
	  deprecated addresses (addresses with preferred lifetime = 0)
	  will not be chosen as source address if other choices are
	  available.  If no other choices are available, deprecated
	  address will be used as a last resort.  If there are
	  multiple choice of deprecated addresses, the above scope
	  rule will be used to choose from those deprecated addresses.
	  If you would like to prohibit the use of deprecated address
	  for some reason, configure net.inet6.ip6.use_deprecated to
	  0.  The issue related to deprecated address is described in
	  RFC2462 5.5.4 (NOTE: there is some debate underway in IETF
	  ipngwg on how to use "deprecated" address).</para>
      </sect3>

      <sect3 xml:id="ipv6-jumbo">
	<title xml:lang="en">Jumbo Payload</title>

	<para xml:lang="en">The Jumbo Payload hop-by-hop option is implemented and
	  can be used to send IPv6 packets with payloads longer than
	  65,535 octets.  But currently no physical interface whose
	  MTU is more than 65,535 is supported, so such payloads can
	  be seen only on the loopback interface (i.e., lo0).</para>

	<para xml:lang="en">If you want to try jumbo payloads, you first have to
	  reconfigure the kernel so that the MTU of the loopback
	  interface is more than 65,535 bytes; add the following to
	  the kernel configuration file:</para>

	<para xml:lang="en"><literal>options		"LARGE_LOMTU"		#To
	    test jumbo payload</literal></para>

	<para xml:lang="en">and recompile the new kernel.</para>

	<para xml:lang="en">Then you can test jumbo payloads by the <citerefentry><refentrytitle>ping6</refentrytitle><manvolnum>8</manvolnum></citerefentry>
	  command with -b and -s options.  The -b option must be
	  specified to enlarge the size of the socket buffer and the
	  -s option specifies the length of the packet, which should
	  be more than 65,535.  For example, type as follows:</para>

	<screen xml:lang="en"><prompt>%</prompt> <userinput>ping6 -b 70000 -s 68000 ::1</userinput></screen>

	<para xml:lang="en">The IPv6 specification requires that the Jumbo Payload
	  option must not be used in a packet that carries a fragment
	  header.  If this condition is broken, an ICMPv6 Parameter
	  Problem message must be sent to the sender.  specification
	  is followed, but you cannot usually see an ICMPv6 error
	  caused by this requirement.</para>

	<para xml:lang="en">When an IPv6 packet is received, the frame length is
	  checked and compared to the length specified in the payload
	  length field of the IPv6 header or in the value of the Jumbo
	  Payload option, if any.  If the former is shorter than the
	  latter, the packet is discarded and statistics are
	  incremented.  You can see the statistics as output of
	  <citerefentry><refentrytitle>netstat</refentrytitle><manvolnum>8</manvolnum></citerefentry> command with `-s -p ip6' option:</para>

	<screen xml:lang="en"><prompt>%</prompt> <userinput>netstat -s -p ip6</userinput>
	  ip6:
		(snip)
		1 with data size &lt; data length</screen>

	<para xml:lang="en">So, kernel does not send an ICMPv6 error unless the
	  erroneous packet is an actual Jumbo Payload, that is, its
	  packet size is more than 65,535 bytes.  As described above,
	  currently no physical interface with such a huge MTU is
	  supported, so it rarely returns an ICMPv6 error.</para>

	<para xml:lang="en">TCP/UDP over jumbogram is not supported at this moment.
	  This is because we have no medium (other than loopback) to
	  test this.  Contact us if you need this.</para>

	<para xml:lang="en">IPsec does not work on jumbograms.  This is due to some
	  specification twists in supporting AH with jumbograms (AH
	  header size influences payload length, and this makes it
	  real hard to authenticate inbound packet with jumbo payload
	  option as well as AH).</para>

	<para xml:lang="en">There are fundamental issues in *BSD support for
	  jumbograms.  We would like to address those, but we need
	  more time to finalize these.  To name a few:</para>

	<itemizedlist>
	  <listitem>
	    <para xml:lang="en">mbuf pkthdr.len field is typed as "int" in 4.4BSD,
	      so it will not hold jumbogram with len &gt; 2G on 32bit
	      architecture CPUs.  If we would like to support
	      jumbogram properly, the field must be expanded to hold
	      4G + IPv6 header + link-layer header.  Therefore, it
	      must be expanded to at least int64_t (u_int32_t is NOT
	      enough).</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">We mistakingly use "int" to hold packet length in
	      many places.  We need to convert them into larger
	      integral type.  It needs a great care, as we may
	      experience overflow during packet length
	      computation.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">We mistakingly check for ip6_plen field of IPv6
	      header for packet payload length in various places.  We
	      should be checking mbuf pkthdr.len instead.  ip6_input()
	      will perform sanity check on jumbo payload option on
	      input, and we can safely use mbuf pkthdr.len
	      afterwards.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">TCP code needs a careful update in bunch of places,
	      of course.</para>
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3>
	<title xml:lang="en">Loop Prevention in Header Processing</title>

	<para xml:lang="en">IPv6 specification allows arbitrary number of extension
	  headers to be placed onto packets.  If we implement IPv6
	  packet processing code in the way BSD IPv4 code is
	  implemented, kernel stack may overflow due to long function
	  call chain.  sys/netinet6 code is carefully designed to
	  avoid kernel stack overflow.  Because of this, sys/netinet6
	  code defines its own protocol switch structure, as "struct
	  ip6protosw" (see
	  <filename>netinet6/ip6protosw.h</filename>).  There is no
	  such update to IPv4 part (sys/netinet) for compatibility,
	  but small change is added to its pr_input() prototype.  So
	  "struct ipprotosw" is also defined.  Because of this, if you
	  receive IPsec-over-IPv4 packet with massive number of IPsec
	  headers, kernel stack may blow up.  IPsec-over-IPv6 is okay.
	  (Off-course, for those all IPsec headers to be processed,
	  each such IPsec header must pass each IPsec check.  So an
	  anonymous attacker will not be able to do such an
	  attack.)</para>
      </sect3>

      <sect3 xml:id="icmpv6">
	<title xml:lang="en">ICMPv6</title>

	<para xml:lang="en">After RFC2463 was published, IETF ipngwg has decided to
	  disallow ICMPv6 error packet against ICMPv6 redirect, to
	  prevent ICMPv6 storm on a network medium.  This is already
	  implemented into the kernel.</para>
      </sect3>

      <sect3>
	<title xml:lang="en">Applications</title>

	<para xml:lang="en">For userland programming, we support IPv6 socket API as
	  specified in RFC2553, RFC2292 and upcoming Internet
	  drafts.</para>

	<para xml:lang="en">TCP/UDP over IPv6 is available and quite stable.  You
	  can enjoy <citerefentry><refentrytitle>telnet</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>ftp</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>rlogin</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
	  <citerefentry><refentrytitle>rsh</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>ssh</refentrytitle><manvolnum>1</manvolnum></citerefentry>, etc.  These applications are
	  protocol independent.  That is, they automatically chooses
	  IPv4 or IPv6 according to DNS.</para>
      </sect3>

      <sect3>
	<title xml:lang="en">Kernel Internals</title>

	<para xml:lang="en">While ip_forward() calls ip_output(), ip6_forward()
	  directly calls if_output() since routers must not divide
	  IPv6 packets into fragments.</para>

	<para xml:lang="en">ICMPv6 should contain the original packet as long as
	  possible up to 1280.  UDP6/IP6 port unreach, for instance,
	  should contain all extension headers and the *unchanged*
	  UDP6 and IP6 headers.  So, all IP6 functions except TCP
	  never convert network byte order into host byte order, to
	  save the original packet.</para>

	<para xml:lang="en">tcp_input(), udp6_input() and icmp6_input() can not
	  assume that IP6 header is preceding the transport headers
	  due to extension headers.  So, in6_cksum() was implemented
	  to handle packets whose IP6 header and transport header is
	  not continuous.  TCP/IP6 nor UDP6/IP6 header structures do
	  not exist for checksum calculation.</para>

	<para xml:lang="en">To process IP6 header, extension headers and transport
	  headers easily, network drivers are now required to store
	  packets in one internal mbuf or one or more external mbufs.
	  A typical old driver prepares two internal mbufs for 96 -
	  204 bytes data, however, now such packet data is stored in
	  one external mbuf.</para>

	<para xml:lang="en"><command>netstat -s -p ip6</command> tells you whether
	  or not your driver conforms such requirement.  In the
	  following example, "cce0" violates the requirement.  (For
	  more information, refer to Section 2.)</para>

	<screen xml:lang="en">Mbuf statistics:
                317 one mbuf
                two or more mbuf::
                        lo0 = 8
			cce0 = 10
                3282 one ext mbuf
                0 two or more ext mbuf</screen>

	<para xml:lang="en">Each input function calls IP6_EXTHDR_CHECK in the
	  beginning to check if the region between IP6 and its header
	  is continuous.  IP6_EXTHDR_CHECK calls m_pullup() only if
	  the mbuf has M_LOOP flag, that is, the packet comes from the
	  loopback interface.  m_pullup() is never called for packets
	  coming from physical network interfaces.</para>

	<para xml:lang="en">Both IP and IP6 reassemble functions never call
	  m_pullup().</para>
      </sect3>

      <sect3 xml:id="ipv6-wildcard-socket">
	<title xml:lang="en">IPv4 Mapped Address and IPv6 Wildcard Socket</title>

	<para xml:lang="en">RFC2553 describes IPv4 mapped address (3.7) and special
	  behavior of IPv6 wildcard bind socket (3.8).  The spec
	  allows you to:</para>
	<itemizedlist>
	  <listitem>
	    <para xml:lang="en">Accept IPv4 connections by AF_INET6 wildcard bind
	      socket.</para>
	  </listitem>
	  <listitem>
	    <para xml:lang="en">Transmit IPv4 packet over AF_INET6 socket by using
	      special form of the address like ::ffff:10.1.1.1.</para>
	  </listitem>
	</itemizedlist>

	<para xml:lang="en">but the spec itself is very complicated and does not
	  specify how the socket layer should behave.  Here we call
	  the former one "listening side" and the latter one
	  "initiating side", for reference purposes.</para>

	<para xml:lang="en">You can perform wildcard bind on both of the address
	  families, on the same port.</para>

	<para xml:lang="en">The following table show the behavior of FreeBSD
	  4.x.</para>

	<screen xml:lang="en">listening side          initiating side
                (AF_INET6 wildcard      (connection to ::ffff:10.1.1.1)
                socket gets IPv4 conn.)
                ---                     ---
FreeBSD 4.x     configurable            supported
                default: enabled</screen>

	<para xml:lang="en">The following sections will give you more details, and
	  how you can configure the behavior.</para>

	<para xml:lang="en">Comments on listening side:</para>

	<para xml:lang="en">It looks that RFC2553 talks too little on wildcard bind
	  issue, especially on the port space issue, failure mode and
	  relationship between AF_INET/INET6 wildcard bind.  There can
	  be several separate interpretation for this RFC which
	  conform to it but behaves differently.  So, to implement
	  portable application you should assume nothing about the
	  behavior in the kernel.  Using <citerefentry><refentrytitle>getaddrinfo</refentrytitle><manvolnum>3</manvolnum></citerefentry> is the
	  safest way.  Port number space and wildcard bind issues were
	  discussed in detail on ipv6imp mailing list, in mid March
	  1999 and it looks that there is no concrete consensus
	  (means, up to implementers).  You may want to check the
	  mailing list archives.</para>

	<para xml:lang="en">If a server application would like to accept IPv4 and
	  IPv6 connections, there will be two alternatives.</para>

	<para xml:lang="en">One is using AF_INET and AF_INET6 socket (you will need
	  two sockets).  Use <citerefentry><refentrytitle>getaddrinfo</refentrytitle><manvolnum>3</manvolnum></citerefentry> with AI_PASSIVE into
	  ai_flags, and <citerefentry><refentrytitle>socket</refentrytitle><manvolnum>2</manvolnum></citerefentry> and <citerefentry><refentrytitle>bind</refentrytitle><manvolnum>2</manvolnum></citerefentry> to all the
	  addresses returned.  By opening multiple sockets, you can
	  accept connections onto the socket with proper address
	  family.  IPv4 connections will be accepted by AF_INET
	  socket, and IPv6 connections will be accepted by AF_INET6
	  socket.</para>

	<para xml:lang="en">Another way is using one AF_INET6 wildcard bind socket.
	  Use <citerefentry><refentrytitle>getaddrinfo</refentrytitle><manvolnum>3</manvolnum></citerefentry> with AI_PASSIVE into ai_flags and
	  with AF_INET6 into ai_family, and set the 1st argument
	  hostname to NULL. And <citerefentry><refentrytitle>socket</refentrytitle><manvolnum>2</manvolnum></citerefentry> and <citerefentry><refentrytitle>bind</refentrytitle><manvolnum>2</manvolnum></citerefentry> to the
	  address returned.  (should be IPv6 unspecified addr).  You
	  can accept either of IPv4 and IPv6 packet via this one
	  socket.</para>

	<para xml:lang="en">To support only IPv6 traffic on AF_INET6 wildcard binded
	  socket portably, always check the peer address when a
	  connection is made toward AF_INET6 listening socket.  If the
	  address is IPv4 mapped address, you may want to reject the
	  connection.  You can check the condition by using
	  IN6_IS_ADDR_V4MAPPED() macro.</para>

	<para xml:lang="en">To resolve this issue more easily, there is system
	  dependent <citerefentry><refentrytitle>setsockopt</refentrytitle><manvolnum>2</manvolnum></citerefentry> option, IPV6_BINDV6ONLY, used
	  like below.</para>

	<programlisting xml:lang="en">	int on;

	setsockopt(s, IPPROTO_IPV6, IPV6_BINDV6ONLY,
		   (char *)&amp;on, sizeof (on)) &lt; 0));</programlisting>

	<para xml:lang="en">When this call succeed, then this socket only receive
	  IPv6 packets.</para>

	<para xml:lang="en">Comments on initiating side:</para>

	<para xml:lang="en">Advise to application implementers: to implement a
	  portable IPv6 application (which works on multiple IPv6
	  kernels), we believe that the following is the key to the
	  success:</para>

	<itemizedlist>
	  <listitem>
	    <para xml:lang="en">NEVER hardcode AF_INET nor AF_INET6.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">Use <citerefentry><refentrytitle>getaddrinfo</refentrytitle><manvolnum>3</manvolnum></citerefentry> and <citerefentry><refentrytitle>getnameinfo</refentrytitle><manvolnum>3</manvolnum></citerefentry>
	      throughout the system.  Never use gethostby*(),
	      getaddrby*(), inet_*() or getipnodeby*().  (To update
	      existing applications to be IPv6 aware easily, sometime
	      getipnodeby*() will be useful.  But if possible, try to
	      rewrite the code to use <citerefentry><refentrytitle>getaddrinfo</refentrytitle><manvolnum>3</manvolnum></citerefentry> and
	      <citerefentry><refentrytitle>getnameinfo</refentrytitle><manvolnum>3</manvolnum></citerefentry>.)</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">If you would like to connect to destination, use
	      <citerefentry><refentrytitle>getaddrinfo</refentrytitle><manvolnum>3</manvolnum></citerefentry> and try all the destination
	      returned, like <citerefentry><refentrytitle>telnet</refentrytitle><manvolnum>1</manvolnum></citerefentry> does.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">Some of the IPv6 stack is shipped with buggy
	      <citerefentry><refentrytitle>getaddrinfo</refentrytitle><manvolnum>3</manvolnum></citerefentry>.  Ship a minimal working version
	      with your application and use that as last
	      resort.</para>
	  </listitem>
	</itemizedlist>

	<para xml:lang="en">If you would like to use AF_INET6 socket for both IPv4
	  and IPv6 outgoing connection, you will need to use
	  <citerefentry><refentrytitle>getipnodebyname</refentrytitle><manvolnum>3</manvolnum></citerefentry>.  When you would like to update your
	  existing application to be IPv6 aware with minimal effort,
	  this approach might be chosen.  But please note that it is a
	  temporal solution, because <citerefentry><refentrytitle>getipnodebyname</refentrytitle><manvolnum>3</manvolnum></citerefentry> itself is
	  not recommended as it does not handle scoped IPv6 addresses
	  at all.  For IPv6 name resolution, <citerefentry><refentrytitle>getaddrinfo</refentrytitle><manvolnum>3</manvolnum></citerefentry> is
	  the preferred API. So you should rewrite your application to
	  use <citerefentry><refentrytitle>getaddrinfo</refentrytitle><manvolnum>3</manvolnum></citerefentry>, when you get the time to do
	  it.</para>

	<para xml:lang="en">When writing applications that make outgoing
	  connections, story goes much simpler if you treat AF_INET
	  and AF_INET6 as totally separate address family.
	  {set,get}sockopt issue goes simpler, DNS issue will be made
	  simpler.  We do not recommend you to rely upon IPv4 mapped
	  address.</para>

	<sect4>
	  <title xml:lang="en">unified tcp and inpcb code</title>

	  <para xml:lang="en">FreeBSD 4.x uses shared tcp code between IPv4 and IPv6
	    (from sys/netinet/tcp*) and separate udp4/6 code.  It uses
	    unified inpcb structure.</para>

	  <para xml:lang="en">The platform can be configured to support IPv4 mapped
	    address.  Kernel configuration is summarized as
	    follows:</para>

	  <itemizedlist>
	    <listitem>
	      <para xml:lang="en">By default, AF_INET6 socket will grab IPv4
		connections in certain condition, and can initiate
		connection to IPv4 destination embedded in IPv4 mapped
		IPv6 address.</para>
	    </listitem>

	    <listitem>
	      <para xml:lang="en">You can disable it on entire system with sysctl
		like below.</para>

	      <para xml:lang="en"><command>sysctl
		  net.inet6.ip6.mapped_addr=0</command></para>
	    </listitem>
	  </itemizedlist>

	  <sect5>
	    <title xml:lang="en">Listening Side</title>

	    <para xml:lang="en">Each socket can be configured to support special
	      AF_INET6 wildcard bind (enabled by default).  You can
	      disable it on each socket basis with <citerefentry><refentrytitle>setsockopt</refentrytitle><manvolnum>2</manvolnum></citerefentry>
	      like below.</para>

	    <programlisting xml:lang="en">	int on;

	setsockopt(s, IPPROTO_IPV6, IPV6_BINDV6ONLY,
		   (char *)&amp;on, sizeof (on)) &lt; 0));</programlisting>

	    <para xml:lang="en">Wildcard AF_INET6 socket grabs IPv4 connection if
	      and only if the following conditions are
	      satisfied:</para>

	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">there is no AF_INET socket that matches the IPv4
		  connection</para>
	      </listitem>

	      <listitem>
		<para xml:lang="en">the AF_INET6 socket is configured to accept IPv4
		  traffic, i.e.,  getsockopt(IPV6_BINDV6ONLY) returns
		  0.</para>
	      </listitem>
	    </itemizedlist>

	    <para xml:lang="en">There is no problem with open/close ordering.</para>
	  </sect5>

	  <sect5>
	    <title xml:lang="en">Initiating Side</title>

	    <para xml:lang="en">FreeBSD 4.x supports outgoing connection to IPv4
	      mapped address (::ffff:10.1.1.1), if the node is
	      configured to support IPv4 mapped address.</para>
	  </sect5>
	</sect4>
      </sect3>

      <sect3>
	<title xml:lang="en">sockaddr_storage</title>

	<para xml:lang="en">When RFC2553 was about to be finalized, there was
	  discussion on how struct sockaddr_storage members are named.
	  One proposal is to prepend "__" to the members (like
	  "__ss_len") as they should not be touched.  The other
	  proposal was not to prepend it (like "ss_len") as we need to
	  touch those members directly.  There was no clear consensus
	  on it.</para>

	<para xml:lang="en">As a result, RFC2553 defines struct sockaddr_storage as
	  follows:</para>

	<programlisting xml:lang="en">	struct sockaddr_storage {
		u_char	__ss_len;	/* address length */
		u_char	__ss_family;	/* address family */
		/* and bunch of padding */
	};</programlisting>

	<para xml:lang="en">On the contrary, XNET draft defines as follows:</para>

	<programlisting xml:lang="en">	struct sockaddr_storage {
		u_char	ss_len;		/* address length */
		u_char	ss_family;	/* address family */
		/* and bunch of padding */
	};</programlisting>

	<para xml:lang="en">In December 1999, it was agreed that RFC2553bis should
	  pick the latter (XNET) definition.</para>

	<para xml:lang="en">Current implementation conforms to XNET definition,
	  based on RFC2553bis discussion.</para>

	<para xml:lang="en">If you look at multiple IPv6 implementations, you will
	  be able to see both definitions.  As an userland programmer,
	  the most portable way of dealing with it is to:</para>

	<orderedlist>
	  <listitem>
	    <para xml:lang="en">ensure ss_family and/or ss_len are available on the
	      platform, by using GNU autoconf,</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">have -Dss_family=__ss_family to unify all
	      occurrences (including header file) into __ss_family,
	      or</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">never touch __ss_family.  cast to sockaddr * and use
	      sa_family like:</para>

	    <programlisting xml:lang="en">	struct sockaddr_storage ss;
	family = ((struct sockaddr *)&amp;ss)-&gt;sa_family</programlisting>

	  </listitem>
	</orderedlist>
      </sect3>
    </sect2>

    <sect2>
      <title xml:lang="en">Network Drivers</title>

      <para xml:lang="en">Now following two items are required to be supported by
	standard drivers:</para>

      <orderedlist>
	<listitem>
	  <para xml:lang="en">mbuf clustering requirement.  In this stable release,
	    we changed MINCLSIZE into MHLEN+1 for all the operating
	    systems in order to make all the drivers behave as we
	    expect.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">multicast.  If <citerefentry><refentrytitle>ifmcstat</refentrytitle><manvolnum>8</manvolnum></citerefentry> yields no multicast
	    group for a interface, that interface has to be
	    patched.</para>
	</listitem>
      </orderedlist>

      <para xml:lang="en">If any of the drivers do not support the requirements,
	then the drivers cannot be used for IPv6 and/or IPsec
	communication.  If you find any problem with your card using
	IPv6/IPsec, then, please report it to the <link xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-bugs">FreeBSD problem reports mailing list</link>.</para>

      <para xml:lang="en">(NOTE: In the past we required all PCMCIA drivers to have
	a call to in6_ifattach().  We have no such requirement any
	more)</para>
    </sect2>

    <sect2>
      <title xml:lang="en">Translator</title>

      <para xml:lang="en">We categorize IPv4/IPv6 translator into 4 types:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en"><emphasis>Translator A</emphasis> --- It is used in
	    the early stage of transition to make it possible to
	    establish a connection from an IPv6 host in an IPv6 island
	    to an IPv4 host in the IPv4 ocean.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><emphasis>Translator B</emphasis> --- It is used in
	    the early stage of transition to make it possible to
	    establish a connection from an IPv4 host in the IPv4 ocean
	    to an IPv6 host in an IPv6 island.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><emphasis>Translator C</emphasis> --- It is used in
	    the late stage of transition to make it possible to
	    establish a connection from an IPv4 host in an IPv4 island
	    to an IPv6 host in the IPv6 ocean.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><emphasis>Translator D</emphasis> --- It is used in
	    the late stage of transition to make it possible to
	    establish a connection from an IPv6 host in the IPv6 ocean
	    to an IPv4 host in an IPv4 island.</para>
	</listitem>
      </itemizedlist>

      <para xml:lang="en">TCP relay translator for category A is supported.  This is
	called "FAITH".  We also provide IP header translator for
	category A.  (The latter is not yet put into FreeBSD 4.x
	yet.)</para>

      <sect3>
	<title xml:lang="en">FAITH TCP Relay Translator</title>

	<para xml:lang="en">FAITH system uses TCP relay daemon called <citerefentry><refentrytitle>faithd</refentrytitle><manvolnum>8</manvolnum></citerefentry>
	  helped by the kernel.  FAITH will reserve an IPv6 address
	  prefix, and relay TCP connection toward that prefix to IPv4
	  destination.</para>

	<para xml:lang="en">For example, if the reserved IPv6 prefix is
	  2001:0DB8:0200:ffff::, and the IPv6 destination for TCP
	  connection is 2001:0DB8:0200:ffff::163.221.202.12, the
	  connection will be relayed toward IPv4 destination
	  163.221.202.12.</para>

	<screen xml:lang="en">	destination IPv4 node (163.221.202.12)
	  ^
	  | IPv4 tcp toward 163.221.202.12
	FAITH-relay dual stack node
	  ^
	  | IPv6 TCP toward 2001:0DB8:0200:ffff::163.221.202.12
	source IPv6 node</screen>

	<para xml:lang="en"><citerefentry><refentrytitle>faithd</refentrytitle><manvolnum>8</manvolnum></citerefentry> must be invoked on FAITH-relay dual stack
	  node.</para>

	<para xml:lang="en">For more details, consult
	  <filename>src/usr.sbin/faithd/README</filename></para>
      </sect3>
    </sect2>

    <sect2 xml:id="ipsec-implementation">
      <title xml:lang="en">IPsec</title>

      <para xml:lang="en">IPsec is mainly organized by three components.</para>

      <orderedlist>
	<listitem>
	  <para xml:lang="en">Policy Management</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">Key Management</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">AH and ESP handling</para>
	</listitem>
      </orderedlist>

      <sect3>
	<title xml:lang="en">Policy Management</title>

	<para xml:lang="en">The kernel implements experimental policy management
	  code.  There are two way to manage security policy.  One is
	  to configure per-socket policy using <citerefentry><refentrytitle>setsockopt</refentrytitle><manvolnum>2</manvolnum></citerefentry>.  In
	  this cases, policy configuration is described in
	  <citerefentry><refentrytitle>ipsec_set_policy</refentrytitle><manvolnum>3</manvolnum></citerefentry>.  The other is to configure kernel
	  packet filter-based policy using PF_KEY interface, via
	  <citerefentry><refentrytitle>setkey</refentrytitle><manvolnum>8</manvolnum></citerefentry>.</para>

	<para xml:lang="en">The policy entry is not re-ordered with its indexes, so
	  the order of entry when you add is very significant.</para>
      </sect3>

      <sect3>
	<title xml:lang="en">Key Management</title>

	<para xml:lang="en">The key management code implemented in this kit
	  (sys/netkey) is a home-brew PFKEY v2 implementation.  This
	  conforms to RFC2367.</para>

	<para xml:lang="en">The home-brew IKE daemon, "racoon" is included in the
	  kit (kame/kame/racoon).  Basically you will need to run
	  racoon as daemon, then set up a policy to require keys (like
	  <command>ping -P 'out ipsec esp/transport//use'</command>).
	  The kernel will contact racoon daemon as necessary to
	  exchange keys.</para>
      </sect3>

      <sect3>
	<title xml:lang="en">AH and ESP Handling</title>

	<para xml:lang="en">IPsec module is implemented as "hooks" to the standard
	  IPv4/IPv6 processing.  When sending a packet,
	  ip{,6}_output() checks if ESP/AH processing is required by
	  checking if a matching SPD (Security Policy Database) is
	  found.  If ESP/AH is needed, {esp,ah}{4,6}_output() will be
	  called and mbuf will be updated accordingly.  When a packet
	  is received, {esp,ah}4_input() will be called based on
	  protocol number, i.e., (*inetsw[proto])().
	  {esp,ah}4_input() will decrypt/check authenticity of the
	  packet, and strips off daisy-chained header and padding for
	  ESP/AH.  It is safe to strip off the ESP/AH header on packet
	  reception, since we will never use the received packet in
	  "as is" form.</para>

	<para xml:lang="en">By using ESP/AH, TCP4/6 effective data segment size will
	  be affected by extra daisy-chained headers inserted by
	  ESP/AH.  Our code takes care of the case.</para>

	<para xml:lang="en">Basic crypto functions can be found in directory
	  "sys/crypto".  ESP/AH transform are listed in
	  {esp,ah}_core.c with wrapper functions.  If you wish to add
	  some algorithm, add wrapper function in {esp,ah}_core.c, and
	  add your crypto algorithm code into sys/crypto.</para>

	<para xml:lang="en">Tunnel mode is partially supported in this release, with
	  the following restrictions:</para>

	<itemizedlist>
	  <listitem>
	    <para xml:lang="en">IPsec tunnel is not combined with GIF generic
	      tunneling interface.  It needs a great care because we
	      may create an infinite loop between ip_output() and
	      tunnelifp-&gt;if_output().  Opinion varies if it is
	      better to unify them, or not.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">MTU and Don't Fragment bit (IPv4) considerations
	      need more checking, but basically works fine.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">Authentication model for AH tunnel must be
	      revisited.  We will need to improve the policy
	      management engine, eventually.</para>
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3>
	<title xml:lang="en">Conformance to RFCs and IDs</title>

	<para xml:lang="en">The IPsec code in the kernel conforms (or, tries to
	  conform) to the following standards:</para>

	<para xml:lang="en">"old IPsec" specification documented in
	  <filename>rfc182[5-9].txt</filename></para>

	<para xml:lang="en">"new IPsec" specification documented in
	  <filename>rfc240[1-6].txt</filename>,
	  <filename>rfc241[01].txt</filename>,
	  <filename>rfc2451.txt</filename> and
	  <filename>draft-mcdonald-simple-ipsec-api-01.txt</filename>
	  (draft expired, but you can take from <link xlink:href="ftp://ftp.kame.net/pub/internet-drafts/">
	    ftp://ftp.kame.net/pub/internet-drafts/</link>).  (NOTE:
	  IKE specifications, <filename>rfc241[7-9].txt</filename> are
	  implemented in userland, as "racoon" IKE daemon)</para>

	<para xml:lang="en">Currently supported algorithms are:</para>
	<itemizedlist>
	  <listitem>
	    <para xml:lang="en">old IPsec AH</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">null crypto checksum (no document, just for
		  debugging)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">keyed MD5 with 128bit crypto checksum
		  (<filename>rfc1828.txt</filename>)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">keyed SHA1 with 128bit crypto checksum (no
		  document)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">HMAC MD5 with 128bit crypto checksum
		  (<filename>rfc2085.txt</filename>)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">HMAC SHA1 with 128bit crypto checksum (no
		  document)</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">old IPsec ESP</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">null encryption (no document, similar to
		  <filename>rfc2410.txt</filename>)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">DES-CBC mode
		  (<filename>rfc1829.txt</filename>)</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">new IPsec AH</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">null crypto checksum (no document, just for
		  debugging)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">keyed MD5 with 96bit crypto checksum (no
		  document)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">keyed SHA1 with 96bit crypto checksum (no
		  document)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">HMAC MD5 with 96bit crypto checksum
		  (<filename>rfc2403.txt</filename>)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">HMAC SHA1 with 96bit crypto checksum
		  (<filename>rfc2404.txt</filename>)</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">new IPsec ESP</para>
	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">null encryption
		  (<filename>rfc2410.txt</filename>)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">DES-CBC with derived IV
		  (<filename>draft-ietf-ipsec-ciph-des-derived-01.txt</filename>,
		  draft expired)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">DES-CBC with explicit IV
		  (<filename>rfc2405.txt</filename>)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">3DES-CBC with explicit IV
		  (<filename>rfc2451.txt</filename>)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">BLOWFISH CBC
		  (<filename>rfc2451.txt</filename>)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">CAST128 CBC
		  (<filename>rfc2451.txt</filename>)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">RC5 CBC
		  (<filename>rfc2451.txt</filename>)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">each of the above can be combined with:</para>
		<itemizedlist>
		  <listitem>
		    <para xml:lang="en">ESP authentication with
		      HMAC-MD5(96bit)</para>
		  </listitem>
		  <listitem>
		    <para xml:lang="en">ESP authentication with
		      HMAC-SHA1(96bit)</para>
		  </listitem>
		</itemizedlist>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	</itemizedlist>

	<para xml:lang="en">The following algorithms are NOT supported:</para>
	<itemizedlist>
	  <listitem>

	    <para xml:lang="en">old IPsec AH</para>

	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">HMAC MD5 with 128bit crypto checksum + 64bit
		  replay prevention
		  (<filename>rfc2085.txt</filename>)</para>
	      </listitem>
	      <listitem>
		<para xml:lang="en">keyed SHA1 with 160bit crypto checksum + 32bit
		  padding (<filename>rfc1852.txt</filename>)</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	</itemizedlist>

	<para xml:lang="en">IPsec (in kernel) and IKE (in userland as "racoon") has
	  been tested at several interoperability test events, and it
	  is known to interoperate with many other implementations
	  well.  Also, current IPsec implementation as quite wide
	  coverage for IPsec crypto algorithms documented in RFC (we
	  cover algorithms without intellectual property issues
	  only).</para>
      </sect3>

      <sect3 xml:id="ipsec-ecn">
	<title xml:lang="en">ECN Consideration on IPsec Tunnels</title>

	<para xml:lang="en">ECN-friendly IPsec tunnel is supported as described in
	  <filename>draft-ipsec-ecn-00.txt</filename>.</para>

	<para xml:lang="en">Normal IPsec tunnel is described in RFC2401.  On
	  encapsulation, IPv4 TOS field (or, IPv6 traffic class field)
	  will be copied from inner IP header to outer IP header.  On
	  decapsulation outer IP header will be simply dropped.  The
	  decapsulation rule is not compatible with ECN, since ECN bit
	  on the outer IP TOS/traffic class field will be lost.</para>

	<para xml:lang="en">To make IPsec tunnel ECN-friendly, we should modify
	  encapsulation and decapsulation procedure.  This is
	  described in <link xlink:href="http://www.aciri.org/floyd/papers/draft-ipsec-ecn-00.txt">
	    http://www.aciri.org/floyd/papers/draft-ipsec-ecn-00.txt</link>,
	  chapter 3.</para>

	<para xml:lang="en">IPsec tunnel implementation can give you three
	  behaviors, by setting net.inet.ipsec.ecn (or
	  net.inet6.ipsec6.ecn) to some value:</para>

	<itemizedlist>
	  <listitem>
	    <para xml:lang="en">RFC2401: no consideration for ECN (sysctl value
	      -1)</para>
	  </listitem>
	  <listitem>
	    <para xml:lang="en">ECN forbidden (sysctl value 0)</para>
	  </listitem>
	  <listitem>
	    <para xml:lang="en">ECN allowed (sysctl value 1)</para>
	  </listitem>
	</itemizedlist>

	<para xml:lang="en">Note that the behavior is configurable in per-node
	  manner, not per-SA manner (draft-ipsec-ecn-00 wants per-SA
	  configuration, but it looks too much for me).</para>

	<para xml:lang="en">The behavior is summarized as follows (see source code
	  for more detail):</para>

	<screen xml:lang="en">encapsulate                     decapsulate
                ---                             ---
RFC2401         copy all TOS bits               drop TOS bits on outer
                from inner to outer.            (use inner TOS bits as is)

ECN forbidden   copy TOS bits except for ECN    drop TOS bits on outer
                (masked with 0xfc) from inner   (use inner TOS bits as is)
                to outer.  set ECN bits to 0.

ECN allowed     copy TOS bits except for ECN    use inner TOS bits with some
                CE (masked with 0xfe) from      change.  if outer ECN CE bit
                inner to outer.                 is 1, enable ECN CE bit on
                set ECN CE bit to 0.            the inner.</screen>

	<para xml:lang="en">General strategy for configuration is as follows:</para>
	<itemizedlist>
	  <listitem>
	    <para xml:lang="en">if both IPsec tunnel endpoint are capable of
	      ECN-friendly behavior, you should better configure both
	      end to <quote>ECN allowed</quote> (sysctl value
	      1).</para>
	  </listitem>
	  <listitem>
	    <para xml:lang="en">if the other end is very strict about TOS bit, use
	      "RFC2401" (sysctl value -1).</para>
	  </listitem>
	  <listitem>
	    <para xml:lang="en">in other cases, use "ECN forbidden" (sysctl value
	      0).</para>
	  </listitem>
	</itemizedlist>

	<para xml:lang="en">The default behavior is "ECN forbidden" (sysctl value
	  0).</para>

	<para xml:lang="en">For more information, please refer to:</para>

	<para xml:lang="en"><link xlink:href="http://www.aciri.org/floyd/papers/draft-ipsec-ecn-00.txt">
	    http://www.aciri.org/floyd/papers/draft-ipsec-ecn-00.txt</link>,
	  RFC2481 (Explicit Congestion Notification),
	  src/sys/netinet6/{ah,esp}_input.c</para>

	<para xml:lang="en">(Thanks goes to Kenjiro Cho
	  <email>kjc@csl.sony.co.jp</email> for detailed
	  analysis)</para>
      </sect3>

      <sect3>
	<title xml:lang="en">Interoperability</title>

	<para xml:lang="en">Here are (some of) platforms that KAME code have tested
	  IPsec/IKE interoperability in the past.  Note that both ends
	  may have modified their implementation, so use the following
	  list just for reference purposes.</para>

	<para xml:lang="en">Altiga, Ashley-laurent (vpcom.com), Data Fellows
	  (F-Secure), Ericsson ACC, FreeS/WAN, HITACHI, IBM <trademark class="registered">AIX</trademark>,
	  IIJ, Intel, <trademark class="registered">Microsoft</trademark> <trademark class="registered">Windows NT</trademark>, NIST (linux IPsec +
	  plutoplus), Netscreen, OpenBSD, RedCreek, Routerware, SSH,
	  Secure Computing, Soliton, Toshiba, VPNet, Yamaha
	  RT100i</para>
      </sect3>
    </sect2>
  </sect1>
</chapter>


  </part>

  <part xml:id="kernel">
    <title xml:lang="en">Kernel</title>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD: head/en_US.ISO8859-1/books/developers-handbook/kernelbuild/chapter.xml 52138 2018-08-16 14:51:54Z bcr $
-->
<chapter version="5.0" xml:id="kernelbuild">
  <title xml:lang="en">Building and Installing a FreeBSD Kernel</title>

  <para xml:lang="en">Being a kernel developer requires understanding of the kernel
    build process.  To debug the FreeBSD kernel it is required to be able
    to build one.  There are two known ways to do so:</para>

  <para xml:lang="en">The supported procedure to build and install a kernel is
    documented in the <link xlink:href="../handbook/kernelconfig-building.html">Building and
      Installing a Custom Kernel</link> chapter of the FreeBSD
    Handbook.</para>

  <note>
    <para xml:lang="en">It is supposed that the reader of this chapter is familiar
      with the information described in the <link xlink:href="../handbook/kernelconfig-building.html">Building
	and Installing a Custom Kernel</link> chapter of the FreeBSD
      Handbook.  If this is not the case, please read through the
      above mentioned chapter to understand how the build process
      works.</para>
  </note>

  <sect1 xml:id="kernelbuild-traditional">
    <title xml:lang="en">Building the Faster but Brittle Way</title>

    <para xml:lang="en">Building the kernel this way may be useful when working on
      the
      kernel code and it may actually be faster than the
      documented procedure when only a single option or two were
      tweaked in the kernel configuration file.  On the other hand,
      it might lead to unexpected kernel build breakage.</para>

    <procedure>
      <step>
	<para xml:lang="en">Run <citerefentry><refentrytitle>config</refentrytitle><manvolnum>8</manvolnum></citerefentry> to generate the kernel source
	  code:</para>

	<screen xml:lang="en"><prompt>#</prompt> <userinput>/usr/sbin/config <replaceable>MYKERNEL</replaceable></userinput></screen>
      </step>

      <step>
	<para xml:lang="en">Change into the build directory.  <citerefentry><refentrytitle>config</refentrytitle><manvolnum>8</manvolnum></citerefentry> will
	  print the name of this directory after being run as
	  above.</para>

	<screen xml:lang="en"><prompt>#</prompt> <userinput>cd ../compile/<replaceable>MYKERNEL</replaceable></userinput></screen>
      </step>

      <step>
	<para xml:lang="en">Compile the kernel:</para>

	<screen xml:lang="en"><prompt>#</prompt> <userinput>make depend</userinput>
<prompt>#</prompt> <userinput>make</userinput></screen>
      </step>

      <step>
	<para xml:lang="en">Install the new kernel:</para>

	<screen xml:lang="en"><prompt>#</prompt> <userinput>make install</userinput></screen>
      </step>
    </procedure>
  </sect1>

</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD: head/en_US.ISO8859-1/books/developers-handbook/kerneldebug/chapter.xml 51572 2018-04-18 23:48:42Z jhb $
-->
<chapter version="5.0" xml:id="kerneldebug">
  <info><title xml:lang="en">Kernel Debugging</title>
    <authorgroup>
      <author xml:lang="en"><personname><firstname>Paul</firstname><surname>Richards</surname></personname><contrib>Contributed by </contrib></author>
      <author xml:lang="en"><personname><firstname>Jörg</firstname><surname>Wunsch</surname></personname></author>
      <author xml:lang="en"><personname><firstname>Robert</firstname><surname>Watson</surname></personname></author>
    </authorgroup>
  </info>

  

  <sect1 xml:id="kerneldebug-obtain">
    <title xml:lang="en">Obtaining a Kernel Crash Dump</title>

    <para xml:lang="en">When running a development kernel (e.g., FreeBSD-CURRENT), such as a
      kernel under extreme conditions (e.g., very high load averages,
      tens of thousands of connections, exceedingly high number of
      concurrent users, hundreds of <citerefentry><refentrytitle>jail</refentrytitle><manvolnum>8</manvolnum></citerefentry>s, etc.), or using a
      new feature or device driver on FreeBSD-STABLE (e.g.,
      <acronym>PAE</acronym>), sometimes a kernel will panic.  In the
      event that it does, this chapter will demonstrate how to extract
      useful information out of a crash.</para>

    <para xml:lang="en">A system reboot is inevitable once a kernel panics.  Once a
      system is rebooted, the contents of a system's physical memory
      (<acronym>RAM</acronym>) is lost, as well as any bits that are
      on the swap device before the panic.  To preserve the bits in
      physical memory, the kernel makes use of the swap device as a
      temporary place to store the bits that are in RAM across a
      reboot after a crash.  In doing this, when FreeBSD boots after a
      crash, a kernel image can now be extracted and debugging can
      take place.</para>

    <note><para xml:lang="en">A swap device that has been configured as a dump
      device still acts as a swap device.  Dumps to non-swap devices
      (such as tapes or CDRWs, for example) are not supported at this time.  A
      <quote>swap device</quote> is synonymous with a <quote>swap
      partition.</quote></para></note>

    <para xml:lang="en">Several types of kernel crash dumps are available:</para>
      <variablelist>
	<varlistentry>
	  <term xml:lang="en">Full memory dumps</term>

	  <listitem>
	    <para xml:lang="en">Hold the complete contents of physical
	      memory.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en">Minidumps</term>

	  <listitem>
	    <para xml:lang="en">Hold only memory pages in use by the kernel
	      (FreeBSD 6.2 and higher).</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en">Textdumps</term>

	  <listitem>
	    <para xml:lang="en">Hold captured, scripted, or interactive debugger
	      output (FreeBSD 7.1 and higher).</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <para xml:lang="en">Minidumps are the default dump type as of FreeBSD 7.0,
	and in most cases will capture all necessary information
	present in a full memory dump, as most problems can be
	isolated only using kernel state.</para>

    <sect2 xml:id="config-dumpdev">
      <title xml:lang="en">Configuring the Dump Device</title>

      <para xml:lang="en">Before the kernel will dump the contents of its physical
	memory to a dump device, a dump device must be configured.  A
	dump device is specified by using the <citerefentry><refentrytitle>dumpon</refentrytitle><manvolnum>8</manvolnum></citerefentry> command
	to tell the kernel where to save kernel crash dumps.  The
	<citerefentry><refentrytitle>dumpon</refentrytitle><manvolnum>8</manvolnum></citerefentry> program must be called after the swap partition
	has been configured with <citerefentry><refentrytitle>swapon</refentrytitle><manvolnum>8</manvolnum></citerefentry>.  This is normally
	handled by setting the <varname>dumpdev</varname> variable in
	<citerefentry><refentrytitle>rc.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry> to the path of the swap device (the
	recommended way to extract a kernel dump) or
	<literal>AUTO</literal> to use the first configured swap
	device.  The default for <varname>dumpdev</varname> is
	<literal>AUTO</literal> in HEAD, and changed to
	<literal>NO</literal> on RELENG_* branches (except for RELENG_7,
	which was left set to <literal>AUTO</literal>).
	On FreeBSD 9.0-RELEASE and later versions,
	<application>bsdinstall</application> will ask whether crash dumps
	should be enabled on the target system during the install process.</para>

      <tip><para xml:lang="en">Check <filename>/etc/fstab</filename> or
	<citerefentry><refentrytitle>swapinfo</refentrytitle><manvolnum>8</manvolnum></citerefentry> for a list of swap devices.</para></tip>

      <important><para xml:lang="en">Make sure the <varname>dumpdir</varname>
        specified in <citerefentry><refentrytitle>rc.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry> exists before a kernel
        crash!</para>

        <screen xml:lang="en"><prompt>#</prompt> <userinput>mkdir /var/crash</userinput>
<prompt>#</prompt> <userinput>chmod 700 /var/crash</userinput></screen>

        <para xml:lang="en">Also, remember that the contents of
	  <filename>/var/crash</filename> is sensitive and very likely
	  contains confidential information such as passwords.</para>
      </important>
    </sect2>

    <sect2 xml:id="extract-dump">
      <title xml:lang="en">Extracting a Kernel Dump</title>

        <para xml:lang="en">Once a dump has been written to a dump device, the dump
	  must be extracted before the swap device is mounted.
	  To extract a dump
	  from a dump device, use the <citerefentry><refentrytitle>savecore</refentrytitle><manvolnum>8</manvolnum></citerefentry> program.  If
	  <varname>dumpdev</varname> has been set in <citerefentry><refentrytitle>rc.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>,
	  <citerefentry><refentrytitle>savecore</refentrytitle><manvolnum>8</manvolnum></citerefentry> will be called automatically on the first
	  multi-user boot after the crash and before the swap device
	  is mounted.  The location of the extracted core is placed in
	  the <citerefentry><refentrytitle>rc.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry> value <varname>dumpdir</varname>, by
	  default <filename>/var/crash</filename> and will be named
	  <filename>vmcore.0</filename>.</para>

        <para xml:lang="en">In the event that there is already a file called
          <filename>vmcore.0</filename> in
          <filename>/var/crash</filename> (or whatever
          <varname>dumpdir</varname> is set to), the kernel will
          increment the trailing number for every crash to avoid
          overwriting an existing <filename>vmcore</filename> (e.g.,
          <filename>vmcore.1</filename>).  <citerefentry><refentrytitle>savecore</refentrytitle><manvolnum>8</manvolnum></citerefentry> will always
	  create a symbolic link to named <filename>vmcore.last</filename>
	  in <filename>/var/crash</filename> after a dump is saved.
	  This symbolic link can be used to locate the name of the most
	  recent dump.</para>

	<para xml:lang="en">The <citerefentry><refentrytitle>crashinfo</refentrytitle><manvolnum>8</manvolnum></citerefentry> utility generates a text file
	  containing a summary of information from a full memory dump
	  or minidump.  If <varname>dumpdev</varname> has been set in
	  <citerefentry><refentrytitle>rc.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>, <citerefentry><refentrytitle>crashinfo</refentrytitle><manvolnum>8</manvolnum></citerefentry> will be invoked
	  automatically after <citerefentry><refentrytitle>savecore</refentrytitle><manvolnum>8</manvolnum></citerefentry>.  The output is saved
	  to a file in <varname>dumpdir</varname> named
	  <filename>core.txt.<replaceable>N</replaceable></filename>.</para>

    <tip>
      <para xml:lang="en">If you are testing a new kernel but need to boot a different one in
      order to get your system up and running again, boot it only into single
      user mode using the <option>-s</option> flag at the boot prompt, and
      then perform the following steps:</para>

    <screen xml:lang="en"><prompt>#</prompt> <userinput>fsck -p</userinput>
<prompt>#</prompt> <userinput>mount -a -t ufs</userinput>       # make sure /var/crash is writable
<prompt>#</prompt> <userinput>savecore /var/crash /dev/ad0s1b</userinput>
<prompt>#</prompt> <userinput>exit</userinput>                  # exit to multi-user</screen>

    <para xml:lang="en">This instructs <citerefentry><refentrytitle>savecore</refentrytitle><manvolnum>8</manvolnum></citerefentry> to extract a kernel dump
      from <filename>/dev/ad0s1b</filename> and place the contents in
      <filename>/var/crash</filename>.  Do not forget to make sure the
      destination directory <filename>/var/crash</filename> has enough
      space for the dump.  Also, do not forget to specify the correct path to your swap
      device as it is likely different than
      <filename>/dev/ad0s1b</filename>!</para></tip>
    </sect2>

    <sect2>
      <title xml:lang="en">Testing Kernel Dump Configuration</title>
   
      <para xml:lang="en">The kernel includes a <citerefentry><refentrytitle>sysctl</refentrytitle><manvolnum>8</manvolnum></citerefentry> node that requests a
       kernel panic.  This can be used to verify that your system is
       properly configured to save kernel crash dumps.  You may wish
       to remount existing file systems as read-only in single user
       mode before triggering the crash to avoid data loss.</para>

       <screen xml:lang="en"><prompt>#</prompt> <userinput>shutdown now</userinput>
...
Enter full pathname of shell or RETURN for /bin/sh:
<prompt>#</prompt> <userinput>mount -a -u -r</userinput>
<prompt>#</prompt> <userinput>sysctl debug.kdb.panic=1</userinput>
debug.kdb.panic:panic: kdb_sysctl_panic
...</screen>

      <para xml:lang="en">After rebooting, your system should save a dump in
        <filename>/var/crash</filename> along with a matching summary
        from <citerefentry><refentrytitle>crashinfo</refentrytitle><manvolnum>8</manvolnum></citerefentry>.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="kerneldebug-gdb">
    <title xml:lang="en">Debugging a Kernel Crash Dump with <command>kgdb</command></title>

    <note>
      <para xml:lang="en">This section covers <citerefentry><refentrytitle>kgdb</refentrytitle><manvolnum>1</manvolnum></citerefentry>.  The latest version is
        included in the <package>devel/gdb</package>.  An older version
        is also present in FreeBSD 11 and earlier.</para>
    </note>

    <para xml:lang="en">To enter into the debugger and begin getting information
      from the dump, start kgdb:</para>

    <screen xml:lang="en"><prompt>#</prompt> <userinput>kgdb -n <replaceable>N</replaceable></userinput></screen>

    <para xml:lang="en">Where <replaceable>N</replaceable> is the suffix of the
     <filename>vmcore.<replaceable>N</replaceable></filename> to
     examine.  To open the most recent dump use:</para>

    <screen xml:lang="en"><prompt>#</prompt> <userinput>kgdb -n last</userinput></screen>

    <para xml:lang="en">Normally, <citerefentry><refentrytitle>kgdb</refentrytitle><manvolnum>1</manvolnum></citerefentry> should be able to locate the kernel
     running at the time the dump was generated.  If it is not able to
     locate the correct kernel, pass the pathname of the kernel and
     dump as two arguments to kgdb:</para>

    <screen xml:lang="en"><prompt>#</prompt> <userinput>kgdb /boot/kernel/kernel /var/crash/vmcore.0</userinput></screen>

    <para xml:lang="en">You can debug the crash dump using the kernel sources just like
      you can for any other program.</para>

    <para xml:lang="en">This dump is from a 5.2-BETA kernel and the crash
      comes from deep within the kernel.  The output below has been
      modified to include line numbers on the left.  This first trace
      inspects the instruction pointer and obtains a back trace.  The
      address that is used on line 41 for the <command>list</command>
      command is the instruction pointer and can be found on line
      17.  Most developers will request having at least this
      information sent to them if you are unable to debug the problem
      yourself.  If, however, you do solve the problem, make sure that
      your patch winds its way into the source tree via a problem
      report, mailing lists, or by being able to commit it!</para>

      <screen xml:lang="en"> 1:<prompt>#</prompt> <userinput>cd /usr/obj/usr/src/sys/<replaceable>KERNCONF</replaceable></userinput>
 2:<prompt>#</prompt> <userinput>kgdb kernel.debug /var/crash/vmcore.0</userinput>
 3:GNU gdb 5.2.1 (FreeBSD)
 4:Copyright 2002 Free Software Foundation, Inc.
 5:GDB is free software, covered by the GNU General Public License, and you are
 6:welcome to change it and/or distribute copies of it under certain conditions.
 7:Type "show copying" to see the conditions.
 8:There is absolutely no warranty for GDB.  Type "show warranty" for details.
 9:This GDB was configured as "i386-undermydesk-freebsd"...
10:panic: page fault
11:panic messages:
12:---
13:Fatal trap 12: page fault while in kernel mode
14:cpuid = 0; apic id = 00
15:fault virtual address   = 0x300
16:fault code:             = supervisor read, page not present
17:instruction pointer     = 0x8:0xc0713860
18:stack pointer           = 0x10:0xdc1d0b70
19:frame pointer           = 0x10:0xdc1d0b7c
20:code segment            = base 0x0, limit 0xfffff, type 0x1b
21:                        = DPL 0, pres 1, def32 1, gran 1
22:processor eflags        = resume, IOPL = 0
23:current process         = 14394 (uname)
24:trap number             = 12
25:panic: page fault
26      cpuid = 0;
27:Stack backtrace:
28
29:syncing disks, buffers remaining... 2199 2199 panic: mi_switch: switch in a critical section
30:cpuid = 0;
31:Uptime: 2h43m19s
32:Dumping 255 MB
33: 16 32 48 64 80 96 112 128 144 160 176 192 208 224 240
34:---
35:Reading symbols from /boot/kernel/snd_maestro3.ko...done.
36:Loaded symbols for /boot/kernel/snd_maestro3.ko
37:Reading symbols from /boot/kernel/snd_pcm.ko...done.
38:Loaded symbols for /boot/kernel/snd_pcm.ko
39:#0  doadump () at /usr/src/sys/kern/kern_shutdown.c:240
40:240             dumping++;
41:<prompt>(kgdb)</prompt> <userinput>list *0xc0713860</userinput>
42:0xc0713860 is in lapic_ipi_wait (/usr/src/sys/i386/i386/local_apic.c:663).
43:658                     incr = 0;
44:659                     delay = 1;
45:660             } else
46:661                     incr = 1;
47:662             for (x = 0; x &lt; delay; x += incr) {
48:663                     if ((lapic-&gt;icr_lo &amp; APIC_DELSTAT_MASK) == APIC_DELSTAT_IDLE)
49:664                             return (1);
50:665                     ia32_pause();
51:666             }
52:667             return (0);
53:<prompt>(kgdb)</prompt> <userinput>backtrace</userinput>
54:#0  doadump () at /usr/src/sys/kern/kern_shutdown.c:240
55:#1  0xc055fd9b in boot (howto=260) at /usr/src/sys/kern/kern_shutdown.c:372
56:#2  0xc056019d in panic () at /usr/src/sys/kern/kern_shutdown.c:550
57:#3  0xc0567ef5 in mi_switch () at /usr/src/sys/kern/kern_synch.c:470
58:#4  0xc055fa87 in boot (howto=256) at /usr/src/sys/kern/kern_shutdown.c:312
59:#5  0xc056019d in panic () at /usr/src/sys/kern/kern_shutdown.c:550
60:#6  0xc0720c66 in trap_fatal (frame=0xdc1d0b30, eva=0)
61:    at /usr/src/sys/i386/i386/trap.c:821
62:#7  0xc07202b3 in trap (frame=
63:      {tf_fs = -1065484264, tf_es = -1065484272, tf_ds = -1065484272, tf_edi = 1, tf_esi = 0, tf_ebp = -602076292, tf_isp = -602076324, tf_ebx = 0, tf_edx = 0, tf_ecx = 1000000, tf_eax = 243, tf_trapno = 12, tf_err = 0, tf_eip = -1066321824, tf_cs = 8, tf_eflags = 65671, tf_esp = 243, tf_ss = 0})
64:    at /usr/src/sys/i386/i386/trap.c:250
65:#8  0xc070c9f8 in calltrap () at {standard input}:94
66:#9  0xc07139f3 in lapic_ipi_vectored (vector=0, dest=0)
67:    at /usr/src/sys/i386/i386/local_apic.c:733
68:#10 0xc0718b23 in ipi_selected (cpus=1, ipi=1)
69:    at /usr/src/sys/i386/i386/mp_machdep.c:1115
70:#11 0xc057473e in kseq_notify (ke=0xcc05e360, cpu=0)
71:    at /usr/src/sys/kern/sched_ule.c:520
72:#12 0xc0575cad in sched_add (td=0xcbcf5c80)
73:    at /usr/src/sys/kern/sched_ule.c:1366
74:#13 0xc05666c6 in setrunqueue (td=0xcc05e360)
75:    at /usr/src/sys/kern/kern_switch.c:422
76:#14 0xc05752f4 in sched_wakeup (td=0xcbcf5c80)
77:    at /usr/src/sys/kern/sched_ule.c:999
78:#15 0xc056816c in setrunnable (td=0xcbcf5c80)
79:    at /usr/src/sys/kern/kern_synch.c:570
80:#16 0xc0567d53 in wakeup (ident=0xcbcf5c80)
81:    at /usr/src/sys/kern/kern_synch.c:411
82:#17 0xc05490a8 in exit1 (td=0xcbcf5b40, rv=0)
83:    at /usr/src/sys/kern/kern_exit.c:509
84:#18 0xc0548011 in sys_exit () at /usr/src/sys/kern/kern_exit.c:102
85:#19 0xc0720fd0 in syscall (frame=
86:      {tf_fs = 47, tf_es = 47, tf_ds = 47, tf_edi = 0, tf_esi = -1, tf_ebp = -1077940712, tf_isp = -602075788, tf_ebx = 672411944, tf_edx = 10, tf_ecx = 672411600, tf_eax = 1, tf_trapno = 12, tf_err = 2, tf_eip = 671899563, tf_cs = 31, tf_eflags = 642, tf_esp = -1077940740, tf_ss = 47})
87:    at /usr/src/sys/i386/i386/trap.c:1010
88:#20 0xc070ca4d in Xint0x80_syscall () at {standard input}:136
89:---Can't read userspace from dump, or kernel process---
90:<prompt>(kgdb)</prompt> <userinput>quit</userinput></screen>
    <tip><para xml:lang="en">If your system is crashing regularly and you are running
      out of disk space, deleting old <filename>vmcore</filename>
      files in <filename>/var/crash</filename> could save a
      considerable amount of disk space!</para></tip>
  </sect1>

  <sect1 xml:id="kerneldebug-online-ddb">
    <title xml:lang="en">On-Line Kernel Debugging Using DDB</title>

    <para xml:lang="en">While <command>kgdb</command> as an off-line debugger provides a very
      high level of user interface, there are some things it cannot do.  The
      most important ones being breakpointing and single-stepping kernel
      code.</para>

    <para xml:lang="en">If you need to do low-level debugging on your kernel, there is an
      on-line debugger available called DDB.  It allows setting of
      breakpoints, single-stepping kernel functions, examining and changing
      kernel variables, etc.  However, it cannot access kernel source files,
      and only has access to the global and static symbols, not to the full
      debug information like <command>kgdb</command> does.</para>

    <para xml:lang="en">To configure your kernel to include DDB, add the options

      <programlisting xml:lang="en">options KDB</programlisting>
      <programlisting xml:lang="en">options DDB</programlisting>

      to your config file, and rebuild.  (See <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/books/handbook/index.html">The FreeBSD Handbook</link> for details on
      configuring the FreeBSD kernel).</para>

    <para xml:lang="en">Once your DDB kernel is running, there are several ways to enter
      DDB.  The first, and earliest way is to use the boot flag
      <option>-d</option>.  The kernel will start up
      in debug mode and enter DDB prior to any device probing.  Hence you can
      even debug the device probe/attach functions.  To use this, exit
      the loader's boot menu and enter <command>boot -d</command> at
      the loader prompt.</para>

    <para xml:lang="en">The second scenario is to drop to the debugger once the
      system has booted.  There are two simple ways to accomplish
      this.  If you would like to break to the debugger from the
      command prompt, simply type the command:</para>

    <screen xml:lang="en"><prompt>#</prompt> <userinput>sysctl debug.kdb.enter=1</userinput></screen>

    <para xml:lang="en">Alternatively, if you are at the system console, you may use
      a hot-key on the keyboard.  The default break-to-debugger
      sequence is <keycombo action="simul"><keycap>Ctrl</keycap>
      <keycap>Alt</keycap><keycap>ESC</keycap></keycombo>.  For
      syscons, this sequence can be remapped and some of the
      distributed maps out there do this, so check to make sure you
      know the right sequence to use.  There is an option available
      for serial consoles that allows the use of a serial line BREAK on the
      console line to enter DDB (<literal>options BREAK_TO_DEBUGGER</literal>
      in the kernel config file).  It is not the default since there are a lot
      of serial adapters around that gratuitously generate a BREAK
      condition, for example when pulling the cable.</para>

    <para xml:lang="en">The third way is that any panic condition will branch to DDB if the
      kernel is configured to use it.  For this reason, it is not wise to
      configure a kernel with DDB for a machine running unattended.</para>

    <para xml:lang="en">To obtain the unattended functionality, add:</para>

    <programlisting xml:lang="en">options	KDB_UNATTENDED</programlisting>

    <para xml:lang="en">to the kernel configuration file and rebuild/reinstall.</para>

    <para xml:lang="en">The DDB commands roughly resemble some <command>gdb</command>
      commands.  The first thing you probably need to do is to set a
      breakpoint:</para>

    <screen xml:lang="en"><userinput>break function-name address</userinput></screen>

    <para xml:lang="en">Numbers are taken hexadecimal by default, but to make them distinct
      from symbol names; hexadecimal numbers starting with the letters
      <literal>a-f</literal> need to be preceded with <literal>0x</literal>
      (this is optional for other numbers).  Simple expressions are allowed,
      for example: <literal>function-name + 0x103</literal>.</para>

    <para xml:lang="en">To exit the debugger and continue execution,
      type:</para>

    <screen xml:lang="en"><userinput>continue</userinput></screen>

    <para xml:lang="en">To get a stack trace of the current thread, use:</para>

    <screen xml:lang="en"><userinput>trace</userinput></screen>

    <para xml:lang="en">To get a stack trace of an arbitrary thread, specify a
      process ID or thread ID as a second argument to
      <command>trace</command>.</para>

    <para xml:lang="en">If you want to remove a breakpoint, use</para>

    <screen xml:lang="en"><userinput>del</userinput>
<userinput>del address-expression</userinput></screen>

    <para xml:lang="en">The first form will be accepted immediately after a breakpoint hit,
      and deletes the current breakpoint.  The second form can remove any
      breakpoint, but you need to specify the exact address; this can be
      obtained from:</para>

    <screen xml:lang="en"><userinput>show b</userinput></screen>

    <para xml:lang="en">or:</para>

    <screen xml:lang="en"><userinput>show break</userinput></screen>

    <para xml:lang="en">To single-step the kernel, try:</para>

    <screen xml:lang="en"><userinput>s</userinput></screen>

    <para xml:lang="en">This will step into functions, but you can make DDB trace them until
      the matching return statement is reached by:</para>

    <screen xml:lang="en"><userinput>n</userinput></screen>

    <note>
      <para xml:lang="en">This is different from <command>gdb</command>'s
	<command>next</command> statement; it is like <command>gdb</command>'s
	<command>finish</command>.  Pressing <keycap>n</keycap> more than once
        will cause a continue.</para>
    </note>

    <para xml:lang="en">To examine data from memory, use (for example):

      <screen xml:lang="en"><userinput>x/wx 0xf0133fe0,40</userinput>
<userinput>x/hd db_symtab_space</userinput>
<userinput>x/bc termbuf,10</userinput>
<userinput>x/s stringbuf</userinput></screen>

      for word/halfword/byte access, and hexadecimal/decimal/character/ string
      display.  The number after the comma is the object count.  To display
      the next 0x10 items, simply use:</para>

    <screen xml:lang="en"><userinput>x ,10</userinput></screen>

    <para xml:lang="en">Similarly, use

      <screen xml:lang="en"><userinput>x/ia foofunc,10</userinput></screen>

      to disassemble the first 0x10 instructions of
      <function>foofunc</function>, and display them along with their offset
      from the beginning of <function>foofunc</function>.</para>

    <para xml:lang="en">To modify memory, use the write command:</para>

    <screen xml:lang="en"><userinput>w/b termbuf 0xa 0xb 0</userinput>
<userinput>w/w 0xf0010030 0 0</userinput></screen>

    <para xml:lang="en">The command modifier
      (<literal>b</literal>/<literal>h</literal>/<literal>w</literal>)
      specifies the size of the data to be written, the first following
      expression is the address to write to and the remainder is interpreted
      as data to write to successive memory locations.</para>

    <para xml:lang="en">If you need to know the current registers, use:</para>

    <screen xml:lang="en"><userinput>show reg</userinput></screen>

    <para xml:lang="en">Alternatively, you can display a single register value by e.g.

      <screen xml:lang="en"><userinput>p $eax</userinput></screen>

      and modify it by:</para>

    <screen xml:lang="en"><userinput>set $eax new-value</userinput></screen>

    <para xml:lang="en">Should you need to call some kernel functions from DDB, simply
      say:</para>

    <screen xml:lang="en"><userinput>call func(arg1, arg2, ...)</userinput></screen>

    <para xml:lang="en">The return value will be printed.</para>

    <para xml:lang="en">For a <citerefentry><refentrytitle>ps</refentrytitle><manvolnum>1</manvolnum></citerefentry> style summary of all running processes, use:</para>

    <screen xml:lang="en"><userinput>ps</userinput></screen>

    <para xml:lang="en">Now you have examined why your kernel failed, and you wish to
      reboot.  Remember that, depending on the severity of previous
      malfunctioning, not all parts of the kernel might still be working as
      expected.  Perform one of the following actions to shut down and reboot
      your system:</para>

    <screen xml:lang="en"><userinput>panic</userinput></screen>

    <para xml:lang="en">This will cause your kernel to dump core and reboot, so you can
      later analyze the core on a higher level with <citerefentry><refentrytitle>kgdb</refentrytitle><manvolnum>1</manvolnum></citerefentry>.</para>

    <screen xml:lang="en"><userinput>call boot(0)</userinput></screen>

    <para xml:lang="en">Might be a good way to cleanly shut down the running system,
      <function>sync()</function> all disks, and finally, in some cases,
      reboot.  As long as
      the disk and filesystem interfaces of the kernel are not damaged, this
      could be a good way for an almost clean shutdown.</para>

    <screen xml:lang="en"><userinput>reset</userinput></screen>

    <para xml:lang="en">This is the final way out of disaster and almost the same as hitting the
      Big Red Button.</para>

    <para xml:lang="en">If you need a short command summary, simply type:</para>

    <screen xml:lang="en"><userinput>help</userinput></screen>

    <para xml:lang="en">It is highly recommended to have a printed copy of the
	<citerefentry><refentrytitle>ddb</refentrytitle><manvolnum>4</manvolnum></citerefentry> manual page ready for a debugging
      session.  Remember that it is hard to read the on-line manual while
      single-stepping the kernel.</para>
  </sect1>

  <sect1 xml:id="kerneldebug-online-gdb">
    <title xml:lang="en">On-Line Kernel Debugging Using Remote GDB</title>

    <para xml:lang="en">This feature has been supported since FreeBSD 2.2, and it is
      actually a very neat one.</para>

    <para xml:lang="en">GDB has already supported <emphasis>remote debugging</emphasis> for
      a long time.  This is done using a very simple protocol along a serial
      line.  Unlike the other methods described above, you will need two
      machines for doing this.  One is the host providing the debugging
      environment, including all the sources, and a copy of the kernel binary
      with all the symbols in it, and the other one is the target machine that
      simply runs a similar copy of the very same kernel (but stripped of the
      debugging information).</para>

    <para xml:lang="en">You should configure the kernel in question with <command>config
	-g</command> if building the <quote>traditional</quote> way.  If
      building the <quote>new</quote> way, make sure that
      <literal>makeoptions DEBUG=-g</literal> is in the configuration.
      In both cases, include <option>DDB</option> in the configuration, and
      compile it as usual.  This gives a large binary, due to the
      debugging information.  Copy this kernel to the target machine, strip
      the debugging symbols off with <command>strip -x</command>, and boot it
      using the <option>-d</option> boot option.  Connect the serial line
      of the target machine that has "flags 080" set on its uart device
      to any serial line of the debugging host.  See <citerefentry><refentrytitle>uart</refentrytitle><manvolnum>4</manvolnum></citerefentry> for
      information on how to set the flags on an uart device.
      Now, on the debugging machine, go to the compile directory of the target
      kernel, and start <command>gdb</command>:</para>

    <screen xml:lang="en"><prompt>%</prompt> <userinput>kgdb kernel</userinput>
GDB is free software and you are welcome to distribute copies of it
 under certain conditions; type "show copying" to see the conditions.
There is absolutely no warranty for GDB; type "show warranty" for details.
GDB 4.16 (i386-unknown-freebsd),
Copyright 1996 Free Software Foundation, Inc...
<prompt>(kgdb)</prompt> </screen>

    <para xml:lang="en">Initialize the remote debugging session (assuming the first serial
      port is being used) by:</para>

    <screen xml:lang="en"><prompt>(kgdb)</prompt> <userinput>target remote /dev/cuau0</userinput></screen>

    <para xml:lang="en">Now, on the target host (the one that entered DDB right before even
      starting the device probe), type:</para>

    <screen xml:lang="en">Debugger("Boot flags requested debugger")
Stopped at Debugger+0x35: movb	$0, edata+0x51bc
<prompt>db&gt;</prompt> <userinput>gdb</userinput></screen>

    <para xml:lang="en">DDB will respond with:</para>

    <screen xml:lang="en">Next trap will enter GDB remote protocol mode</screen>

    <para xml:lang="en">Every time you type <command>gdb</command>, the mode will be toggled
      between remote GDB and local DDB.  In order to force a next trap
      immediately, simply type <command>s</command> (step).  Your hosting GDB
      will now gain control over the target kernel:</para>

    <screen xml:lang="en">Remote debugging using /dev/cuau0
Debugger (msg=0xf01b0383 "Boot flags requested debugger")
    at ../../i386/i386/db_interface.c:257
<prompt>(kgdb)</prompt></screen>

    <para xml:lang="en">You can use this session almost as any other GDB session, including
      full access to the source, running it in gud-mode inside an Emacs window
      (which gives you an automatic source code display in another Emacs
      window), etc.</para>
  </sect1>

  <sect1 xml:id="kerneldebug-console">
    <title xml:lang="en">Debugging a Console Driver</title>

    <para xml:lang="en">Since you need a console driver to run DDB on, things are more
      complicated if the console driver itself is failing.  You might remember
      the use of a serial console (either with modified boot blocks, or by
      specifying <option>-h</option> at the <prompt>Boot:</prompt> prompt),
      and hook up a standard terminal onto your first serial port.  DDB works
      on any configured console driver, including a serial
      console.</para>
  </sect1>

  <sect1 xml:id="kerneldebug-deadlocks">
    <title xml:lang="en">Debugging Deadlocks</title>

    <para xml:lang="en">You may experience so called deadlocks, a situation where
      a system stops doing useful work.  To provide a helpful bug
      report in this situation, use <citerefentry><refentrytitle>ddb</refentrytitle><manvolnum>4</manvolnum></citerefentry> as described in the
      previous section.  Include the output of <command>ps</command>
      and <command>trace</command> for suspected processes in the
      report.</para>

    <para xml:lang="en">If possible, consider doing further investigation.  The
      recipe below is especially useful if you suspect that a deadlock
      occurs in the VFS layer.  Add these options to the kernel
      configuration file.</para>

    <programlisting xml:lang="en">makeoptions 	DEBUG=-g
options 	INVARIANTS
options 	INVARIANT_SUPPORT
options 	WITNESS
options 	WITNESS_SKIPSPIN
options 	DEBUG_LOCKS
options 	DEBUG_VFS_LOCKS
options 	DIAGNOSTIC</programlisting>

    <para xml:lang="en">When a deadlock occurs, in addition to the output of the
      <command>ps</command> command, provide information from the
      <command>show pcpu</command>, <command>show allpcpu</command>,
      <command>show locks</command>, <command>show alllocks</command>,
      <command>show lockedvnods</command> and
      <command>alltrace</command>.</para>

    <para xml:lang="en">To obtain meaningful backtraces for threaded processes, use
      <command>thread thread-id</command> to switch to the thread
      stack, and do a backtrace with <command>where</command>.</para>
  </sect1>

  <sect1 xml:id="kerneldebug-dcons">
    <title xml:lang="en">Kernel debugging with Dcons</title>

    <para xml:lang="en"><citerefentry><refentrytitle>dcons</refentrytitle><manvolnum>4</manvolnum></citerefentry> is a very simple console driver that is
      not directly connected with any physical devices.  It just reads
      and writes characters from and to a buffer in a kernel or
      loader.  Due to its simple nature, it is very useful for kernel
      debugging, especially with a <trademark class="registered">FireWire</trademark> device.  Currently, FreeBSD
      provides two ways to interact with the buffer from outside of
      the kernel using <citerefentry><refentrytitle>dconschat</refentrytitle><manvolnum>8</manvolnum></citerefentry>.</para>

    <sect2>
      <title xml:lang="en">Dcons over <trademark class="registered">FireWire</trademark></title>

      <para xml:lang="en">Most <trademark class="registered">FireWire</trademark> (IEEE1394) host controllers are
	based on the <acronym>OHCI</acronym> specification that
	supports physical access to the host memory.  This means that
	once the host controller is initialized, we can access the
	host memory without the help of software (kernel).   We can
	exploit this facility for interaction with <citerefentry><refentrytitle>dcons</refentrytitle><manvolnum>4</manvolnum></citerefentry>.
	<citerefentry><refentrytitle>dcons</refentrytitle><manvolnum>4</manvolnum></citerefentry> provides similar functionality as a serial
	console.  It emulates two serial ports, one for the console
	and <acronym>DDB</acronym>, the other for
	<acronym>GDB</acronym>.  Because remote memory access is fully
	handled by the hardware, the <citerefentry><refentrytitle>dcons</refentrytitle><manvolnum>4</manvolnum></citerefentry> buffer is
	accessible even when the system crashes.</para>

      <para xml:lang="en"><trademark class="registered">FireWire</trademark> devices are not limited to those
	integrated into motherboards.  <acronym>PCI</acronym> cards
	exist for desktops, and a cardbus interface can be purchased
	for laptops.</para>

      <sect3>
	<title xml:lang="en">Enabling <trademark class="registered">FireWire</trademark> and Dcons support on the target
	  machine</title>

	<para xml:lang="en">To enable <trademark class="registered">FireWire</trademark> and Dcons support in the kernel of
	  the <emphasis>target machine</emphasis>:</para>

	<itemizedlist>
	  <listitem>
	    <para xml:lang="en">Make sure your kernel supports
	      <literal>dcons</literal>, <literal>dcons_crom</literal>
	      and <literal>firewire</literal>.
	      <literal>Dcons</literal> should be statically linked
	      with the kernel.  For <literal>dcons_crom</literal> and
	      <literal>firewire</literal>, modules should be
	      OK.</para>
	  </listitem>
	  <listitem>
	    <para xml:lang="en">Make sure physical <acronym>DMA</acronym> is enabled.
	      You may need to add
	      <literal>hw.firewire.phydma_enable=1</literal> to
	      <filename>/boot/loader.conf</filename>.</para>
	  </listitem>
	  <listitem>
	    <para xml:lang="en">Add options for debugging.</para>
	  </listitem>
	  <listitem>
	    <para xml:lang="en">Add <literal>dcons_gdb=1</literal> in
	      <filename>/boot/loader.conf</filename> if you use GDB
	      over <trademark class="registered">FireWire</trademark>.</para>
	  </listitem>
	  <listitem>
	    <para xml:lang="en">Enable <literal>dcons</literal> in
	      <filename>/etc/ttys</filename>.</para>
	  </listitem>
	  <listitem>
	    <para xml:lang="en">Optionally, to force <literal>dcons</literal> to
	      be the high-level console, add 
	      <literal>hw.firewire.dcons_crom.force_console=1</literal> 
	      to <filename>loader.conf</filename>.</para>
	  </listitem>
        </itemizedlist>

        <para xml:lang="en">To enable <trademark class="registered">FireWire</trademark> and Dcons support in <citerefentry><refentrytitle>loader</refentrytitle><manvolnum>8</manvolnum></citerefentry>
	  on i386 or amd64:</para>
	    
        <para xml:lang="en">Add
	  <literal>LOADER_FIREWIRE_SUPPORT=YES</literal> in
	  <filename>/etc/make.conf</filename> and rebuild
	  <citerefentry><refentrytitle>loader</refentrytitle><manvolnum>8</manvolnum></citerefentry>:</para>

        <screen xml:lang="en"><prompt>#</prompt> <userinput>cd /sys/boot/i386 &amp;&amp; make clean &amp;&amp; make &amp;&amp; make install</userinput></screen>

        <para xml:lang="en">To enable <citerefentry><refentrytitle>dcons</refentrytitle><manvolnum>4</manvolnum></citerefentry> as an active low-level
	  console, add <literal>boot_multicons="YES"</literal> to 
	  <filename>/boot/loader.conf</filename>.</para>
	  
	<para xml:lang="en">Here are a few configuration examples.  A sample kernel
	  configuration file would contain:</para>

	<screen xml:lang="en">device dcons
device dcons_crom
options KDB
options DDB
options GDB
options ALT_BREAK_TO_DEBUGGER</screen>

	<para xml:lang="en">And a sample <filename>/boot/loader.conf</filename>
	  would contain:</para>

	<screen xml:lang="en">dcons_crom_load="YES"
dcons_gdb=1
boot_multicons="YES"
hw.firewire.phydma_enable=1
hw.firewire.dcons_crom.force_console=1</screen>

      </sect3>

      <sect3>
	<title xml:lang="en">Enabling <trademark class="registered">FireWire</trademark> and Dcons support on the host
	  machine</title>

	<para xml:lang="en">To enable <trademark class="registered">FireWire</trademark> support in the kernel on the
	  <emphasis>host machine</emphasis>:</para>

	<screen xml:lang="en"><prompt>#</prompt> <userinput>kldload firewire</userinput></screen>

	<para xml:lang="en">Find out the <acronym>EUI64</acronym> (the unique 64
	  bit identifier) of the <trademark class="registered">FireWire</trademark> host controller, and
	  use <citerefentry><refentrytitle>fwcontrol</refentrytitle><manvolnum>8</manvolnum></citerefentry> or <command>dmesg</command> to
	  find the <acronym>EUI64</acronym> of the target machine.</para>

	<para xml:lang="en">Run <citerefentry><refentrytitle>dconschat</refentrytitle><manvolnum>8</manvolnum></citerefentry>, with:</para>

	<screen xml:lang="en"><prompt>#</prompt> <userinput>dconschat -e \# -br -G 12345 -t <replaceable>00-11-22-33-44-55-66-77</replaceable></userinput></screen>

	<para xml:lang="en">The following key combinations can be used once
	  <citerefentry><refentrytitle>dconschat</refentrytitle><manvolnum>8</manvolnum></citerefentry> is running:</para>

	<informaltable pgwide="1">
	  <tgroup cols="2">
	    <tbody>
	      <row>
		<entry xml:lang="en">
		  <keycombo action="seq">
		    <keycap>~</keycap>
		    <keycap>.</keycap>
		  </keycombo>
		</entry>
		<entry xml:lang="en">Disconnect</entry>
	      </row>
	      <row>
		<entry xml:lang="en">
		  <keycombo action="seq">
		    <keycap>~</keycap>
		    <keycombo action="simul">
		      <keycap>Ctrl</keycap>
		      <keycap>B</keycap>
		    </keycombo>
		  </keycombo>
		</entry>	  
		<entry xml:lang="en">ALT BREAK</entry>
	      </row>
	      <row>
		<entry xml:lang="en">
		  <keycombo action="seq">
		    <keycap>~</keycap>
		    <keycombo action="simul">
		      <keycap>Ctrl</keycap>
		      <keycap>R</keycap>
		    </keycombo>
		  </keycombo>
		</entry>
		<entry xml:lang="en">RESET target</entry>
	      </row>
	      <row>
		<entry xml:lang="en">
		  <keycombo action="seq">
		    <keycap>~</keycap>
		    <keycombo action="simul">
		      <keycap>Ctrl</keycap>
		      <keycap>Z</keycap>
		    </keycombo>
		  </keycombo>
		</entry>	
		<entry xml:lang="en">Suspend dconschat</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</informaltable>

	<para xml:lang="en">Attach remote <acronym>GDB</acronym> by starting
	  <citerefentry><refentrytitle>kgdb</refentrytitle><manvolnum>1</manvolnum></citerefentry> with a remote debugging session:</para>

	<screen xml:lang="en"><userinput>kgdb -r :12345 kernel</userinput></screen>

      </sect3>
      <sect3>
	<title xml:lang="en">Some general tips</title>

	<para xml:lang="en">Here are some general tips:</para>

	<para xml:lang="en">To take full advantage of the speed of <trademark class="registered">FireWire</trademark>,
	  disable other slow console drivers:</para>

	<screen xml:lang="en"><prompt>#</prompt> conscontrol delete ttyd0	     # serial console
<prompt>#</prompt> conscontrol delete consolectl	# video/keyboard</screen>

	<para xml:lang="en">There exists a <acronym>GDB</acronym> mode for
	  <citerefentry vendor="ports"><refentrytitle>emacs</refentrytitle><manvolnum>1</manvolnum></citerefentry>; this is what you will need to add to your
	  <filename>.emacs</filename>:</para>

	<screen xml:lang="en"><userinput>(setq gud-gdba-command-name "kgdb -a -a -a -r :12345")
(setq gdb-many-windows t)
(xterm-mouse-mode 1)
M-x gdba</userinput></screen>

	<para xml:lang="en">And for <acronym>DDD</acronym> (<filename>devel/ddd</filename>):</para>

	<screen xml:lang="en"># remote serial protocol
LANG=C ddd --debugger kgdb -r :12345 kernel
# live core debug
LANG=C ddd --debugger kgdb kernel /dev/fwmem0.2</screen>
      </sect3>
    </sect2>

    <sect2>
      <title xml:lang="en">Dcons with KVM</title>

      <para xml:lang="en">We can directly read the <citerefentry><refentrytitle>dcons</refentrytitle><manvolnum>4</manvolnum></citerefentry> buffer via
	<filename>/dev/mem</filename> for live systems, and in the
	core dump for crashed systems.  These give you similar output
	to <command>dmesg -a</command>, but the <citerefentry><refentrytitle>dcons</refentrytitle><manvolnum>4</manvolnum></citerefentry> buffer
	includes more information.</para> 

      <sect3>
	<title xml:lang="en">Using Dcons with KVM</title>

	<para xml:lang="en">To use <citerefentry><refentrytitle>dcons</refentrytitle><manvolnum>4</manvolnum></citerefentry> with <acronym>KVM</acronym>:</para>

	<para xml:lang="en">Dump a <citerefentry><refentrytitle>dcons</refentrytitle><manvolnum>4</manvolnum></citerefentry> buffer of a live system:</para>

	<screen xml:lang="en"><prompt>#</prompt> <userinput>dconschat -1</userinput></screen>

	<para xml:lang="en">Dump a <citerefentry><refentrytitle>dcons</refentrytitle><manvolnum>4</manvolnum></citerefentry> buffer of a crash dump:</para>

	<screen xml:lang="en"><prompt>#</prompt> <userinput>dconschat -1 -M vmcore.XX</userinput></screen>

	<para xml:lang="en">Live core debugging can be done via:</para>

	<screen xml:lang="en"><prompt>#</prompt> <userinput>fwcontrol -m target_eui64</userinput>
<prompt>#</prompt> <userinput>kgdb kernel /dev/fwmem0.2</userinput></screen>
      </sect3>
    </sect2>
  </sect1>

  <sect1 xml:id="kerneldebug-options">
    <title xml:lang="en">Glossary of Kernel Options for Debugging</title>

    <para xml:lang="en">This section provides a brief glossary of compile-time kernel
      options used for debugging:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en"><literal>options KDB</literal>: compiles in the kernel
	  debugger framework.  Required for <literal>options DDB</literal>
	  and <literal>options GDB</literal>.  Little or no performance
	  overhead.  By default, the debugger will be entered on panic
	  instead of an automatic reboot.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>options KDB_UNATTENDED</literal>: change the default
	  value of the <literal>debug.debugger_on_panic</literal> sysctl to
	  0, which controls whether the debugger is entered on panic.  When
	  <literal>options KDB</literal> is not compiled into the kernel, the
	  behavior is to automatically reboot on panic; when it is compiled
	  into the kernel, the default behavior is to drop into the debugger
	  unless <literal>options KDB_UNATTENDED</literal> is compiled in.
	  If you want to leave the kernel debugger compiled into the kernel
	  but want the system to come back up unless you're on-hand to use
	  the debugger for diagnostics, use this option.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>options KDB_TRACE</literal>: change the default value
	  of the <literal>debug.trace_on_panic</literal> sysctl to 1, which
	  controls whether the debugger automatically prints a stack trace
	  on panic.  Especially if running with <literal>options
	  KDB_UNATTENDED</literal>, this can be helpful to gather basic
	  debugging information on the serial or firewire console while
	  still rebooting to recover.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>options DDB</literal>: compile in support for the
	  console debugger, DDB.  This interactive debugger runs on whatever
	  the active low-level console of the system is, which includes the
	  video console, serial console, or firewire console.  It provides
	  basic integrated debugging facilities, such as stack tracing,
	  process and thread listing, dumping of lock state, VM state, file
	  system state, and kernel memory management.  DDB does not require
	  software running on a second machine or being able to generate a
	  core dump or full debugging kernel symbols, and provides detailed
	  diagnostics of the kernel at run-time.  Many bugs can be fully
	  diagnosed using only DDB output.  This option depends on
	  <literal>options KDB</literal>.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>options GDB</literal>: compile in support for the
	  remote debugger, GDB, which can operate over serial cable or
	  firewire.  When the debugger is entered, GDB may be attached to
	  inspect structure contents, generate stack traces, etc.  Some
	  kernel state is more awkward to access than in DDB, which is able
	  to generate useful summaries of kernel state automatically, such
	  as automatically walking lock debugging or kernel memory
	  management structures, and a second machine running the debugger
	  is required.  On the other hand, GDB combines information from
	  the kernel source and full debugging symbols, and is aware of full
	  data structure definitions, local variables, and is scriptable.
	  This option is not required to run GDB on a kernel core dump.
	  This option depends on <literal>options KDB</literal>.
	  </para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>options BREAK_TO_DEBUGGER</literal>, <literal>options
	  ALT_BREAK_TO_DEBUGGER</literal>: allow a break signal or
	  alternative signal on the console to enter the debugger.  If the
	  system hangs without a panic, this is a useful way to reach the
	  debugger.  Due to the current kernel locking, a break signal
	  generated on a serial console is significantly more reliable at
	  getting into the debugger, and is generally recommended.  This
	  option has little or no performance impact.</para>
      </listitem>

      <listitem>
        <para xml:lang="en"><literal>options INVARIANTS</literal>: compile into the kernel
	  a large number of run-time assertion checks and tests, which
	  constantly test the integrity of kernel data structures and the
	  invariants of kernel algorithms.  These tests can be expensive, so
	  are not compiled in by default, but help provide useful "fail stop"
	  behavior, in which certain classes of undesired behavior enter the
	  debugger before kernel data corruption occurs, making them easier
	  to debug.  Tests include memory scrubbing and use-after-free
	  testing, which is one of the more significant sources of overhead.
	  This option depends on <literal>options INVARIANT_SUPPORT</literal>.
	  </para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>options INVARIANT_SUPPORT</literal>: many of the tests
	  present in <literal>options INVARIANTS</literal> require modified
	  data structures or additional kernel symbols to be defined.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>options WITNESS</literal>: this option enables run-time
	  lock order tracking and verification, and is an invaluable tool for
	  deadlock diagnosis.  WITNESS maintains a graph of acquired lock
	  orders by lock type, and checks the graph at each acquire for
	  cycles (implicit or explicit).  If a cycle is detected, a warning
	  and stack trace are generated to the console, indicating that a
	  potential deadlock might have occurred.  WITNESS is required in
	  order to use the <command>show locks</command>, <command>show
	  witness</command> and <command>show alllocks</command> DDB
	  commands.  This debug option has significant performance overhead,
	  which may be somewhat mitigated through the use of <literal>options
	  WITNESS_SKIPSPIN</literal>.  Detailed documentation may be found in
	  <citerefentry><refentrytitle>witness</refentrytitle><manvolnum>4</manvolnum></citerefentry>.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>options WITNESS_SKIPSPIN</literal>: disable run-time
	  checking of spinlock lock order with WITNESS.  As spin locks are
	  acquired most frequently in the scheduler, and scheduler events
	  occur often, this option can significantly speed up systems
	  running with WITNESS.  This option depends on <literal>options
	  WITNESS</literal>.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>options WITNESS_KDB</literal>: change the default
	  value of the <literal>debug.witness.kdb</literal> sysctl to 1,
	  which causes WITNESS to enter the debugger when a lock order
	  violation is detected, rather than simply printing a warning.  This
	  option depends on <literal>options WITNESS</literal>.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>options SOCKBUF_DEBUG</literal>: perform extensive
	  run-time consistency checking on socket buffers, which can be
	  useful for debugging both socket bugs and race conditions in
	  protocols and device drivers that interact with sockets.  This
	  option significantly impacts network performance, and may change
	  the timing in device driver races.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>options DEBUG_VFS_LOCKS</literal>: track lock
	  acquisition points for lockmgr/vnode locks, expanding the amount
	  of information displayed by <command>show lockedvnods</command>
	  in DDB.  This option has a measurable performance impact.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>options DEBUG_MEMGUARD</literal>: a replacement for
	  the <citerefentry><refentrytitle>malloc</refentrytitle><manvolnum>9</manvolnum></citerefentry> kernel memory allocator that uses the VM system
	  to detect reads or writes from allocated memory after free.
	  Details may be found in <citerefentry><refentrytitle>memguard</refentrytitle><manvolnum>9</manvolnum></citerefentry>.  This option has a
	  significant performance impact, but can be very helpful in
	  debugging kernel memory corruption bugs.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>options DIAGNOSTIC</literal>: enable additional, more
	  expensive diagnostic tests along the lines of <literal>options
	  INVARIANTS</literal>.</para>
      </listitem>

    </itemizedlist>
  </sect1>

</chapter>


  </part>

  <part xml:id="architectures">
    <title xml:lang="en">Architectures</title>

    
<!--
     The FreeBSD Documentation Project

     This file is automatically generated.  Please do not make commits
     to this file.  Updates should be sent to the author :

     G. Adam Stanislav (adam@redprince.net)

     This chapter is an exception to our general rule, and the author
     retains the copyright.  Among other things, this means that this
     chapter should not be included in any printed version of the
     Developer's Handbook without Adam's explicit permission.

     Eventually we will have to replace this chapter or convince the
     author to assign us the copyright.  For now, it is valuable
     content so it should stay.

     $FreeBSD: head/en_US.ISO8859-1/books/developers-handbook/x86/chapter.xml 52145 2018-08-17 12:37:22Z bcr $
-->
<chapter version="5.0" xml:id="x86">

  <title xml:lang="en">x86 Assembly Language Programming</title>

  <para xml:lang="en"><emphasis>This chapter was written by
      G. Adam Stanislav <email>adam@redprince.net</email>.</emphasis></para>

  <sect1 xml:id="x86-intro">
    <title xml:lang="en">Synopsis</title>

    <para xml:lang="en">Assembly language programming under <trademark class="registered">UNIX</trademark> is highly
      undocumented.  It is generally assumed that no one would ever
      want to use it because various <trademark class="registered">UNIX</trademark> systems run on different
      microprocessors, so everything should be written in C for
      portability.</para>

    <para xml:lang="en">In reality, C portability is quite a myth.  Even C programs
      need to be modified when ported from one <trademark class="registered">UNIX</trademark> to another,
      regardless of what processor each runs on.  Typically, such a
      program is full of conditional statements depending on the
      system it is compiled for.</para>

    <para xml:lang="en">Even if we believe that all of <trademark class="registered">UNIX</trademark> software should be
      written in C, or some other high-level language, we still need
      assembly language programmers: Who else would write the section
      of C library that accesses the kernel?</para>

    <para xml:lang="en">In this chapter I will attempt to show you how you can use
      assembly language writing <trademark class="registered">UNIX</trademark> programs, specifically under
      FreeBSD.</para>

    <para xml:lang="en">This chapter does not explain the basics of assembly
      language.  There are enough resources about that (for a complete
      online course in assembly language, see Randall Hyde's <link xlink:href="http://webster.cs.ucr.edu/">Art of Assembly
	Language</link>; or if you prefer a printed book, take a look
      at Jeff Duntemann's Assembly Language Step-by-Step (ISBN:
      0471375233).  However, once the chapter is finished, any
      assembly language programmer will be able to write programs for
      FreeBSD quickly and efficiently.</para>

    <para xml:lang="en">Copyright © 2000-2001 G. Adam Stanislav.  All rights
      reserved.</para>
  </sect1>

  <sect1 xml:id="x86-the-tools">
    <title xml:lang="en">The Tools</title>

    <sect2 xml:id="x86-the-assembler">
      <title xml:lang="en">The Assembler</title>

      <para xml:lang="en">The most important tool for assembly language programming
	is the assembler, the software that converts assembly language
	code into machine language.</para>

      <para xml:lang="en">Two very different assemblers are available for FreeBSD.
	One is
	<citerefentry><refentrytitle>as</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
	which uses the traditional <trademark class="registered">UNIX</trademark> assembly language syntax.
	It comes with the system.</para>

      <para xml:lang="en">The other is
	<application>/usr/ports/devel/nasm</application>.  It uses the
	Intel syntax.  Its main advantage is that it can assemble code
	for many operating systems.  It needs to be installed
	separately, but is completely free.</para>

      <para xml:lang="en">This chapter uses <application>nasm</application> syntax
	because most assembly language programmers coming to FreeBSD
	from other operating systems will find it easier to
	understand.  And, because, quite frankly, that is what I am
	used to.</para>
    </sect2>

    <sect2 xml:id="x86-the-linker">
      <title xml:lang="en">The Linker</title>

      <para xml:lang="en">The output of the assembler, like that of any compiler,
	needs to be linked to form an executable file.</para>

      <para xml:lang="en">The standard
	<citerefentry><refentrytitle>ld</refentrytitle><manvolnum>1</manvolnum></citerefentry>
	linker comes with FreeBSD.  It works with the code assembled
	with either assembler.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="x86-system-calls">
    <title xml:lang="en">System Calls</title>

    <sect2 xml:id="x86-default-calling-convention">
      <title xml:lang="en">Default Calling Convention</title>

      <para xml:lang="en">By default, the FreeBSD kernel uses the C calling
	convention.  Further, although the kernel is accessed using
	<function role="opcode">int 80h</function>, it is assumed the
	program will call a function that issues <function role="opcode">int 80h</function>, rather than issuing
	<function role="opcode">int 80h</function> directly.</para>

      <para xml:lang="en">This convention is very convenient, and quite superior to
	the <trademark class="registered">Microsoft</trademark> convention used by
	<acronym><trademark class="registered">MS-DOS</trademark></acronym>.  Why? Because the <trademark class="registered">UNIX</trademark>
	convention allows any program written in any language to
	access the kernel.</para>

      <para xml:lang="en">An assembly language program can do that as well.  For
	example, we could open a file:</para>

      <programlisting xml:lang="en">kernel:
	int	80h	; Call kernel
	ret

open:
	push	dword mode
	push	dword flags
	push	dword path
	mov	eax, 5
	call	kernel
	add	esp, byte 12
	ret</programlisting>

      <para xml:lang="en">This is a very clean and portable way of coding.  If you
	need to port the code to a <trademark class="registered">UNIX</trademark> system which uses a
	different interrupt, or a different way of passing parameters,
	all you need to change is the kernel procedure.</para>

      <para xml:lang="en">But assembly language programmers like to shave off
	cycles.  The above example requires a <function role="opcode">call/ret</function> combination.  We can
	eliminate it by <function role="opcode">push</function>ing an
	extra dword:</para>

      <programlisting xml:lang="en">open:
	push	dword mode
	push	dword flags
	push	dword path
	mov	eax, 5
	push	eax		; Or any other dword
	int	80h
	add	esp, byte 16</programlisting>

      <para xml:lang="en">The <constant>5</constant> that we have placed in <varname role="register">EAX</varname> identifies the kernel
	function, in this case <function role="syscall">open</function>.</para>
    </sect2>

    <sect2 xml:id="x86-alternate-calling-convention">
      <title xml:lang="en">Alternate Calling Convention</title>

      <para xml:lang="en">FreeBSD is an extremely flexible system.  It offers other
	ways of calling the kernel.  For it to work, however, the
	system must have Linux emulation installed.</para>

      <para xml:lang="en">Linux is a <trademark class="registered">UNIX</trademark> like system.  However, its kernel uses
	the same system-call convention of passing parameters in
	registers <acronym><trademark class="registered">MS-DOS</trademark></acronym> does.  As with the
	<trademark class="registered">UNIX</trademark> convention, the function number is placed in <varname role="register">EAX</varname>.  The parameters, however, are
	not passed on the stack but in <varname role="register">EBX,
	  ECX, EDX, ESI, EDI, EBP</varname>:</para>

      <programlisting xml:lang="en">open:
	mov	eax, 5
	mov	ebx, path
	mov	ecx, flags
	mov	edx, mode
	int	80h</programlisting>

      <para xml:lang="en">This convention has a great disadvantage over the <trademark class="registered">UNIX</trademark>
	way, at least as far as assembly language programming is
	concerned: Every time you make a kernel call you must
	<function role="opcode">push</function> the registers, then
	<function role="opcode">pop</function> them later.  This makes
	your code bulkier and slower.  Nevertheless, FreeBSD gives you
	a choice.</para>

      <para xml:lang="en">If you do choose the Linux convention, you must let the
	system know about it.  After your program is assembled and
	linked, you need to brand the executable:</para>

      <screen xml:lang="en"><prompt>%</prompt> <userinput>brandelf -t Linux <replaceable>filename</replaceable></userinput></screen>
    </sect2>

    <sect2 xml:id="x86-use-geneva">
      <title xml:lang="en">Which Convention Should You Use?</title>

      <para xml:lang="en">If you are coding specifically for FreeBSD, you should
	always use the <trademark class="registered">UNIX</trademark> convention: It is faster, you can store
	global variables in registers, you do not have to brand the
	executable, and you do not impose the installation of the
	Linux emulation package on the target system.</para>

      <para xml:lang="en">If you want to create portable code that can also run on
	Linux, you will probably still want to give the FreeBSD users
	as efficient a code as possible.  I will show you how you can
	accomplish that after I have explained the basics.</para>
    </sect2>

    <sect2 xml:id="x86-call-numbers">
      <title xml:lang="en">Call Numbers</title>

      <para xml:lang="en">To tell the kernel which system service you are calling,
	place its number in <varname role="register">EAX</varname>.
	Of course, you need to know what the number is.</para>

      <sect3 xml:id="x86-the-syscalls-file">
	<title xml:lang="en">The <filename>syscalls</filename> File</title>

	<para xml:lang="en">The numbers are listed in <filename>syscalls</filename>.
	  <command>locate syscalls</command> finds this file in
	  several different formats, all produced automatically from
	  <filename>syscalls.master</filename>.</para>

	<para xml:lang="en">You can find the master file for the default <trademark class="registered">UNIX</trademark>
	  calling convention in
	  <filename>/usr/src/sys/kern/syscalls.master</filename>.  If
	  you need to use the other convention implemented in the
	  Linux emulation mode, read
	  <filename>/usr/src/sys/i386/linux/syscalls.master</filename>.</para>

	<note>
	  <para xml:lang="en">Not only do FreeBSD and Linux use different calling
	    conventions, they sometimes use different numbers for the
	    same functions.</para>
	</note>

	<para xml:lang="en"><filename>syscalls.master</filename> describes how the
	  call is to be made:</para>

	<programlisting xml:lang="en">0	STD	NOHIDE	{ int nosys(void); } syscall nosys_args int
1	STD	NOHIDE	{ void exit(int rval); } exit rexit_args void
2	STD	POSIX	{ int fork(void); }
3	STD	POSIX	{ ssize_t read(int fd, void *buf, size_t nbyte); }
4	STD	POSIX	{ ssize_t write(int fd, const void *buf, size_t nbyte); }
5	STD	POSIX	{ int open(char *path, int flags, int mode); }
6	STD	POSIX	{ int close(int fd); }
etc...</programlisting>

      <para xml:lang="en">It is the leftmost column that tells us the number to
	place in <varname role="register">EAX</varname>.</para>

      <para xml:lang="en">The rightmost column tells us what parameters to <function role="opcode">push</function>.  They are <function role="opcode">push</function>ed <emphasis>from right to
	  left</emphasis>.</para>

      <informalexample>
	<para xml:lang="en">For example, to <function>open</function> a file, we
	  need to <function role="opcode">push</function> the
	  <varname>mode</varname> first, then
	  <varname>flags</varname>, then the address at which the
	  <varname>path</varname> is stored.</para>
      </informalexample>
    </sect3>
  </sect2>
</sect1>

<sect1 xml:id="x86-return-values">
  <title xml:lang="en">Return Values</title>

  <para xml:lang="en">A system call would not be useful most of the time if it did
    not return some kind of a value: The file descriptor of an open
    file, the number of bytes read to a buffer, the system time,
    etc.</para>

  <para xml:lang="en">Additionally, the system needs to inform us if an error
    occurs: A file does not exist, system resources are exhausted, we
    passed an invalid parameter, etc.</para>

  <sect2 xml:id="x86-man-pages">
    <title xml:lang="en">Man Pages</title>

    <para xml:lang="en">The traditional place to look for information about various
      system calls under <trademark class="registered">UNIX</trademark> systems are the manual pages.  FreeBSD
      describes its system calls in section 2, sometimes in section
      3.</para>

    <para xml:lang="en">For example,
      <citerefentry><refentrytitle>open</refentrytitle><manvolnum>2</manvolnum></citerefentry>
      says:</para>

    <blockquote>
      <para xml:lang="en">If successful, <function>open()</function> returns a
	non-negative integer, termed a file descriptor.  It returns
	<varname>-1</varname> on failure, and sets
	<varname>errno</varname> to indicate the error.</para>
    </blockquote>

    <para xml:lang="en">The assembly language programmer new to <trademark class="registered">UNIX</trademark> and FreeBSD
      will immediately ask the puzzling question: Where is
      <varname>errno</varname> and how do I get to it?</para>

    <note>
      <para xml:lang="en">The information presented in the manual pages applies to C
	programs.  The assembly language programmer needs additional
	information.</para>
    </note>
  </sect2>

  <sect2 xml:id="x86-where-return-values">
    <title xml:lang="en">Where Are the Return Values?</title>

    <para xml:lang="en">Unfortunately, it depends... For most system calls it is in
      <varname role="register">EAX</varname>, but not for all.  A good
      rule of thumb, when working with a system call for the first
      time, is to look for the return value in <varname role="register">EAX</varname>.  If it is not there, you need
      further research.</para>

    <note>
      <para xml:lang="en">I am aware of one system call that returns the value in
	<varname role="register">EDX</varname>: <function role="syscall">SYS_fork</function>.  All others I have
	worked with use <varname role="register">EAX</varname>.  But I
	have not worked with them all yet.</para>
    </note>

    <tip>
      <para xml:lang="en">If you cannot find the answer here or anywhere else, study
	<application>libc</application> source code and see how it
	interfaces with the kernel.</para>
    </tip>
  </sect2>

  <sect2 xml:id="x86-where-errno">
    <title xml:lang="en">Where Is <varname>errno</varname>?</title>

    <para xml:lang="en">Actually, nowhere...</para>

    <para xml:lang="en"><varname>errno</varname> is part of the C language, not the
      <trademark class="registered">UNIX</trademark> kernel.  When accessing kernel services directly, the
      error code is returned in <varname role="register">EAX</varname>, the same register the proper
      return value generally ends up in.</para>

    <para xml:lang="en">This makes perfect sense.  If there is no error, there is no
      error code.  If there is an error, there is no return value.
      One register can contain either.</para>
  </sect2>

  <sect2 xml:id="x86-how-to-know-error">
    <title xml:lang="en">Determining an Error Occurred</title>

    <para xml:lang="en">When using the standard FreeBSD calling convention, the
      <varname role="register">carry flag</varname> is cleared upon
      success, set upon failure.</para>

    <para xml:lang="en">When using the Linux emulation mode, the signed value in
      <varname role="register">EAX</varname> is non-negative upon
      success, and contains the return value.  In case of an error,
      the value is negative, i.e., <varname>-errno</varname>.</para>
  </sect2>
</sect1>

<sect1 xml:id="x86-portable-code">
  <title xml:lang="en">Creating Portable Code</title>

  <para xml:lang="en">Portability is generally not one of the strengths of assembly
    language.  Yet, writing assembly language programs for different
    platforms is possible, especially with
    <application>nasm</application>.  I have written assembly language
    libraries that can be assembled for such different operating
    systems as <trademark class="registered">Windows</trademark> and FreeBSD.</para>

  <para xml:lang="en">It is all the more possible when you want your code to run on
    two platforms which, while different, are based on similar
    architectures.</para>

  <para xml:lang="en">For example, FreeBSD is <trademark class="registered">UNIX</trademark>, Linux is <trademark class="registered">UNIX</trademark> like.  I only
    mentioned three differences between them (from an assembly
    language programmer's perspective): The calling convention, the
    function numbers, and the way of returning values.</para>

  <sect2 xml:id="x86-deal-with-function-numbers">
    <title xml:lang="en">Dealing with Function Numbers</title>

    <para xml:lang="en">In many cases the function numbers are the same.  However,
      even when they are not, the problem is easy to deal with:
      Instead of using numbers in your code, use constants which you
      have declared differently depending on the target
      architecture:</para>

    <programlisting xml:lang="en">%ifdef	LINUX
%define	SYS_execve	11
%else
%define	SYS_execve	59
%endif</programlisting>
    </sect2>

    <sect2 xml:id="x86-deal-with-geneva">
      <title xml:lang="en">Dealing with Conventions</title>

      <para xml:lang="en">Both, the calling convention, and the return value (the
	<varname>errno</varname> problem) can be resolved with
	macros:</para>

      <programlisting xml:lang="en">%ifdef	LINUX

%macro	system	0
	call	kernel
%endmacro

align 4
kernel:
	push	ebx
	push	ecx
	push	edx
	push	esi
	push	edi
	push	ebp

	mov	ebx, [esp+32]
	mov	ecx, [esp+36]
	mov	edx, [esp+40]
	mov	esi, [esp+44]
	mov	ebp, [esp+48]
	int	80h

	pop	ebp
	pop	edi
	pop	esi
	pop	edx
	pop	ecx
	pop	ebx

	or	eax, eax
	js	.errno
	clc
	ret

.errno:
	neg	eax
	stc
	ret

%else

%macro	system	0
	int	80h
%endmacro

%endif</programlisting>
  </sect2>

  <sect2 xml:id="x86-deal-with-other-portability">
    <title xml:lang="en">Dealing with Other Portability Issues</title>

    <para xml:lang="en">The above solutions can handle most cases of writing code
      portable between FreeBSD and Linux.  Nevertheless, with some
      kernel services the differences are deeper.</para>

    <para xml:lang="en">In that case, you need to write two different handlers for
      those particular system calls, and use conditional assembly.
      Luckily, most of your code does something other than calling the
      kernel, so usually you will only need a few such conditional
      sections in your code.</para>
  </sect2>

  <sect2 xml:id="x86-portable-library">
    <title xml:lang="en">Using a Library</title>

    <para xml:lang="en">You can avoid portability issues in your main code
      altogether by writing a library of system calls.  Create a
      separate library for FreeBSD, a different one for Linux, and yet
      other libraries for more operating systems.</para>

    <para xml:lang="en">In your library, write a separate function (or procedure, if
      you prefer the traditional assembly language terminology) for
      each system call.  Use the C calling convention of passing
      parameters.  But still use <varname role="register">EAX</varname> to pass the call number in.  In
      that case, your FreeBSD library can be very simple, as many
      seemingly different functions can be just labels to the same
      code:</para>

    <programlisting xml:lang="en">sys.open:
sys.close:
[etc...]
	int	80h
	ret</programlisting>

    <para xml:lang="en">Your Linux library will require more different functions.
      But even here you can group system calls using the same number
      of parameters:</para>

    <programlisting xml:lang="en">sys.exit:
sys.close:
[etc... one-parameter functions]
	push	ebx
	mov	ebx, [esp+12]
	int	80h
	pop	ebx
	jmp	sys.return

...

sys.return:
	or	eax, eax
	js	sys.err
	clc
	ret

sys.err:
	neg	eax
	stc
	ret</programlisting>

    <para xml:lang="en">The library approach may seem inconvenient at first because
      it requires you to produce a separate file your code depends on.
      But it has many advantages: For one, you only need to write it
      once and can use it for all your programs. You can even let
      other assembly language programmers use it, or perhaps use one
      written by someone else. But perhaps the greatest advantage of
      the library is that your code can be ported to other systems,
      even by other programmers, by simply writing a new library
      without any changes to your code.</para>

    <para xml:lang="en">If you do not like the idea of having a library, you can at
      least place all your system calls in a separate assembly
      language file and link it with your main program. Here, again,
      all porters have to do is create a new object file to link with
      your main program.</para>
  </sect2>

  <sect2 xml:id="x86-portable-include">
    <title xml:lang="en">Using an Include File</title>

    <para xml:lang="en">If you are releasing your software as (or with) source code,
      you can use macros and place them in a separate file, which you
      include in your code.</para>

    <para xml:lang="en">Porters of your software will simply write a new include
      file. No library or external object file is necessary, yet your
      code is portable without any need to edit the code.</para>

    <note>
      <para xml:lang="en">This is the approach we will use throughout this chapter.
	We will name our include file <filename>system.inc</filename>,
	and add to it whenever we deal with a new system call.</para>
    </note>

    <para xml:lang="en">We can start our <filename>system.inc</filename> by
      declaring the standard file descriptors:</para>

    <programlisting xml:lang="en">%define	stdin	0
%define	stdout	1
%define	stderr	2</programlisting>

    <para xml:lang="en">Next, we create a symbolic name for each system call:</para>

    <programlisting xml:lang="en">%define	SYS_nosys	0
%define	SYS_exit	1
%define	SYS_fork	2
%define	SYS_read	3
%define	SYS_write	4
; [etc...]</programlisting>

    <para xml:lang="en">We add a short, non-global procedure with a long name, so we
      do not accidentally reuse the name in our code:</para>

    <programlisting xml:lang="en">section	.text
align 4
access.the.bsd.kernel:
	int	80h
	ret</programlisting>

    <para xml:lang="en">We create a macro which takes one argument, the syscall
      number:</para>

    <programlisting xml:lang="en">%macro	system	1
	mov	eax, %1
	call	access.the.bsd.kernel
%endmacro</programlisting>

    <para xml:lang="en">Finally, we create macros for each syscall.  These macros
      take no arguments.</para>

    <programlisting xml:lang="en">%macro	sys.exit	0
	system	SYS_exit
%endmacro

%macro	sys.fork	0
	system	SYS_fork
%endmacro

%macro	sys.read	0
	system	SYS_read
%endmacro

%macro	sys.write	0
	system	SYS_write
%endmacro

; [etc...]</programlisting>

    <para xml:lang="en">Go ahead, enter it into your editor and save it as
      <filename>system.inc</filename>.  We will add more to it as we
      discuss more syscalls.</para>
  </sect2>
</sect1>

<sect1 xml:id="x86-first-program">
  <title xml:lang="en">Our First Program</title>

  <para xml:lang="en">We are now ready for our first program, the mandatory
    <application>Hello, World!</application></para>

  <programlisting xml:lang="en">1:	%include	'system.inc'
 2:
 3:	section	.data
 4:	hello	db	'Hello, World!', 0Ah
 5:	hbytes	equ	$-hello
 6:
 7:	section	.text
 8:	global	_start
 9:	_start:
10:	push	dword hbytes
11:	push	dword hello
12:	push	dword stdout
13:	sys.write
14:
15:	push	dword 0
16:	sys.exit</programlisting>

  <para xml:lang="en">Here is what it does: Line 1 includes the defines, the macros,
    and the code from <filename>system.inc</filename>.</para>

  <para xml:lang="en">Lines 3-5 are the data: Line 3 starts the data
    section/segment.  Line 4 contains the string "Hello, World!"
    followed by a new line (<constant>0Ah</constant>). Line 5 creates
    a constant that contains the length of the string from line 4 in
    bytes.</para>

  <para xml:lang="en"> Lines 7-16 contain the code. Note that FreeBSD uses the
    <emphasis>elf</emphasis> file format for its executables, which
    requires every program to start at the point labeled
    <varname>_start</varname> (or, more precisely, the linker expects
    that). This label has to be global.</para>

  <para xml:lang="en">Lines 10-13 ask the system to write <varname>hbytes</varname>
    bytes of the <varname>hello</varname> string to
    <varname>stdout</varname>.</para>

  <para xml:lang="en">Lines 15-16 ask the system to end the program with the return
    value of <constant>0</constant>. The <function role="syscall">SYS_exit</function> syscall never returns, so the
    code ends there.</para>

  <note>
    <para xml:lang="en">If you have come to <trademark class="registered">UNIX</trademark> from <acronym><trademark class="registered">MS-DOS</trademark></acronym>
      assembly language background, you may be used to writing
      directly to the video hardware. You will never have to worry
      about this in FreeBSD, or any other flavor of <trademark class="registered">UNIX</trademark>. As far as
      you are concerned, you are writing to a file known as
      <filename>stdout</filename>. This can be the video screen, or a
      <application>telnet</application> terminal, or an actual file,
      or even the input of another program. Which one it is, is for
      the system to figure out.</para>
  </note>

  <sect2 xml:id="x86-assemble-1"><title xml:lang="en">Assembling the Code</title>

  <para xml:lang="en">Type the code (except the line numbers) in an editor, and save
    it in a file named <filename>hello.asm</filename>. You need
    <application>nasm</application> to assemble it.</para>

    <sect3 xml:id="x86-get-nasm"><title xml:lang="en">Installing <application>nasm</application></title>

      <para xml:lang="en">If you do not have <application>nasm</application>,
	type:</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>su</userinput>
Password:<userinput><replaceable>your root password</replaceable></userinput>
<prompt>#</prompt> <userinput>cd /usr/ports/devel/nasm</userinput>
<prompt>#</prompt> <userinput>make install</userinput>
<prompt>#</prompt> <userinput>exit</userinput>
<prompt>%</prompt></screen>

<para xml:lang="en">
You may type <userinput>make install clean</userinput> instead of just
<userinput>make install</userinput> if you do not want to keep
<application>nasm</application> source code.
</para>

<para xml:lang="en">
Either way, FreeBSD will automatically download
<application>nasm</application> from the Internet,
compile it, and install it on your system.
</para>

<note>
<para xml:lang="en">
If your system is not FreeBSD, you need to get
<application>nasm</application> from its
<link xlink:href="https://sourceforge.net/projects/nasm">home
page</link>. You can still use it to assemble FreeBSD code.
</para>
</note>

<para xml:lang="en">
Now you can assemble, link, and run the code:
</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>nasm -f elf hello.asm</userinput>
<prompt>%</prompt> <userinput>ld -s -o hello hello.o</userinput>
<prompt>%</prompt> <userinput>./hello</userinput>
Hello, World!
<prompt>%</prompt></screen>

</sect3>

</sect2>

</sect1>

<sect1 xml:id="x86-unix-filters">
<title xml:lang="en">Writing <trademark class="registered">UNIX</trademark> Filters</title>

<para xml:lang="en">
A common type of <trademark class="registered">UNIX</trademark> application is a filter—a program
that reads data from the <filename>stdin</filename>, processes it
somehow, then writes the result to <filename>stdout</filename>.
</para>

<para xml:lang="en">
In this chapter, we shall develop a simple filter, and
learn how to read from <filename>stdin</filename> and write to
<filename>stdout</filename>. This filter will convert each byte
of its input into a hexadecimal number followed by a
blank space.
</para>

<programlisting xml:lang="en">
%include	'system.inc'

section	.data
hex	db	'0123456789ABCDEF'
buffer	db	0, 0, ' '

section	.text
global	_start
_start:
	; read a byte from stdin
	push	dword 1
	push	dword buffer
	push	dword stdin
	sys.read
	add	esp, byte 12
	or	eax, eax
	je	.done

	; convert it to hex
	movzx	eax, byte [buffer]
	mov	edx, eax
	shr	dl, 4
	mov	dl, [hex+edx]
	mov	[buffer], dl
	and	al, 0Fh
	mov	al, [hex+eax]
	mov	[buffer+1], al

	; print it
	push	dword 3
	push	dword buffer
	push	dword stdout
	sys.write
	add	esp, byte 12
	jmp	short _start

.done:
	push	dword 0
	sys.exit
</programlisting>
<para xml:lang="en">
In the data section we create an array called <varname>hex</varname>.
It contains the 16 hexadecimal digits in ascending order.
The array is followed by a buffer which we will use for
both input and output. The first two bytes of the buffer
are initially set to <constant>0</constant>. This is where we will write
the two hexadecimal digits (the first byte also is
where we will read the input). The third byte is a
space.
</para>

<para xml:lang="en">
The code section consists of four parts: Reading the byte,
converting it to a hexadecimal number, writing the result,
and eventually exiting the program.
</para>

<para xml:lang="en">
To read the byte, we ask the system to read one byte
from <filename>stdin</filename>, and store it in the first byte
of the <varname>buffer</varname>. The system returns the number
of bytes read in <varname role="register">EAX</varname>. This will be <constant>1</constant>
while data is coming, or <constant>0</constant>, when no more input
data is available. Therefore, we check the value of
<varname role="register">EAX</varname>. If it is <constant>0</constant>,
we jump to <varname>.done</varname>, otherwise we continue.
</para>

<note>
<para xml:lang="en">
For simplicity sake, we are ignoring the possibility
of an error condition at this time.
</para>
</note>

<para xml:lang="en">
The hexadecimal conversion reads the byte from the
<varname>buffer</varname> into <varname role="register">EAX</varname>, or actually just
<varname role="register">AL</varname>, while clearing the remaining bits of
<varname role="register">EAX</varname> to zeros. We also copy the byte to
<varname role="register">EDX</varname> because we need to convert the upper
four bits (nibble) separately from the lower
four bits. We store the result in the first two
bytes of the buffer.
</para>

<para xml:lang="en">
Next, we ask the system to write the three bytes
of the buffer, i.e., the two hexadecimal digits and
the blank space, to <filename>stdout</filename>. We then
jump back to the beginning of the program and
process the next byte.
</para>

<para xml:lang="en">
Once there is no more input left, we ask the system
to exit our program, returning a zero, which is
the traditional value meaning the program was
successful.
</para>

<para xml:lang="en">
Go ahead, and save the code in a file named <filename>hex.asm</filename>,
then type the following (the <userinput>^D</userinput> means press the
control key and type <userinput>D</userinput> while holding the
control key down):
</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>nasm -f elf hex.asm</userinput>
<prompt>%</prompt> <userinput>ld -s -o hex hex.o</userinput>
<prompt>%</prompt> <userinput>./hex</userinput>
<userinput>Hello, World!</userinput>
48 65 6C 6C 6F 2C 20 57 6F 72 6C 64 21 0A <userinput>Here I come!</userinput>
48 65 72 65 20 49 20 63 6F 6D 65 21 0A <userinput>^D</userinput> <prompt>%</prompt></screen>

<note>
<para xml:lang="en">
If you are migrating to <trademark class="registered">UNIX</trademark> from <acronym><trademark class="registered">MS-DOS</trademark></acronym>,
you may be wondering why each line ends with <constant>0A</constant>
instead of <constant>0D 0A</constant>.
This is because <trademark class="registered">UNIX</trademark> does not use the cr/lf convention, but
a "new line" convention, which is <constant>0A</constant> in hexadecimal.
</para>
</note>

<para xml:lang="en">
Can we improve this? Well, for one, it is a bit confusing because
once we have converted a line of text, our input no longer
starts at the beginning of the line. We can modify it to print
a new line instead of a space after each <constant>0A</constant>:
</para>

<programlisting xml:lang="en">
%include	'system.inc'

section	.data
hex	db	'0123456789ABCDEF'
buffer	db	0, 0, ' '

section	.text
global	_start
_start:
	mov	cl, ' '

.loop:
	; read a byte from stdin
	push	dword 1
	push	dword buffer
	push	dword stdin
	sys.read
	add	esp, byte 12
	or	eax, eax
	je	.done

	; convert it to hex
	movzx	eax, byte [buffer]
	mov	[buffer+2], cl
	cmp	al, 0Ah
	jne	.hex
	mov	[buffer+2], al

.hex:
	mov	edx, eax
	shr	dl, 4
	mov	dl, [hex+edx]
	mov	[buffer], dl
	and	al, 0Fh
	mov	al, [hex+eax]
	mov	[buffer+1], al

	; print it
	push	dword 3
	push	dword buffer
	push	dword stdout
	sys.write
	add	esp, byte 12
	jmp	short .loop

.done:
	push	dword 0
	sys.exit
</programlisting>
<para xml:lang="en">
We have stored the space in the <varname role="register">CL</varname> register. We can
do this safely because, unlike <trademark class="registered">Microsoft</trademark> <trademark class="registered">Windows</trademark>, <trademark class="registered">UNIX</trademark> system
calls do not modify the value of any register they do not use
to return a value in.
</para>

<para xml:lang="en">
That means we only need to set <varname role="register">CL</varname> once. We have, therefore,
added a new label <varname>.loop</varname> and jump to it for the next byte
instead of jumping at <varname>_start</varname>. We have also added the
<varname>.hex</varname> label so we can either have a blank space or a
new line as the third byte of the <varname>buffer</varname>.
</para>

<para xml:lang="en">
Once you have changed <filename>hex.asm</filename> to reflect
these changes, type:
</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>nasm -f elf hex.asm</userinput>
<prompt>%</prompt> <userinput>ld -s -o hex hex.o</userinput>
<prompt>%</prompt> <userinput>./hex</userinput>
<userinput>Hello, World!</userinput>
48 65 6C 6C 6F 2C 20 57 6F 72 6C 64 21 0A
<userinput>Here I come!</userinput>
48 65 72 65 20 49 20 63 6F 6D 65 21 0A
<userinput>^D</userinput> <prompt>%</prompt></screen>

<para xml:lang="en">
That looks better. But this code is quite inefficient! We
are making a system call for every single byte twice (once
to read it, another time to write the output).
</para>

</sect1>

<sect1 xml:id="x86-buffered-io">
<title xml:lang="en">Buffered Input and Output</title>

<para xml:lang="en">
We can improve the efficiency of our code by buffering our
input and output. We create an input buffer and read a whole
sequence of bytes at one time. Then we fetch them one by one
from the buffer.
</para>

<para xml:lang="en">
We also create an output buffer. We store our output in it until
it is full. At that time we ask the kernel to write the contents
of the buffer to <filename>stdout</filename>.
</para>

<para xml:lang="en">
The program ends when there is no more input. But we still need
to ask the kernel to write the contents of our output buffer
to <filename>stdout</filename> one last time, otherwise some of our output
would make it to the output buffer, but never be sent out.
Do not forget that, or you will be wondering why some of your
output is missing.
</para>

<programlisting xml:lang="en">
%include	'system.inc'

%define	BUFSIZE	2048

section	.data
hex	db	'0123456789ABCDEF'

section .bss
ibuffer	resb	BUFSIZE
obuffer	resb	BUFSIZE

section	.text
global	_start
_start:
	sub	eax, eax
	sub	ebx, ebx
	sub	ecx, ecx
	mov	edi, obuffer

.loop:
	; read a byte from stdin
	call	getchar

	; convert it to hex
	mov	dl, al
	shr	al, 4
	mov	al, [hex+eax]
	call	putchar

	mov	al, dl
	and	al, 0Fh
	mov	al, [hex+eax]
	call	putchar

	mov	al, ' '
	cmp	dl, 0Ah
	jne	.put
	mov	al, dl

.put:
	call	putchar
	jmp	short .loop

align 4
getchar:
	or	ebx, ebx
	jne	.fetch

	call	read

.fetch:
	lodsb
	dec	ebx
	ret

read:
	push	dword BUFSIZE
	mov	esi, ibuffer
	push	esi
	push	dword stdin
	sys.read
	add	esp, byte 12
	mov	ebx, eax
	or	eax, eax
	je	.done
	sub	eax, eax
	ret

align 4
.done:
	call	write		; flush output buffer
	push	dword 0
	sys.exit

align 4
putchar:
	stosb
	inc	ecx
	cmp	ecx, BUFSIZE
	je	write
	ret

align 4
write:
	sub	edi, ecx	; start of buffer
	push	ecx
	push	edi
	push	dword stdout
	sys.write
	add	esp, byte 12
	sub	eax, eax
	sub	ecx, ecx	; buffer is empty now
	ret
</programlisting>
<para xml:lang="en">
We now have a third section in the source code, named
<varname>.bss</varname>. This section is not included in our
executable file, and, therefore, cannot be initialized. We use
<function role="opcode">resb</function> instead of <function role="opcode">db</function>.
It simply reserves the requested size of uninitialized memory
for our use.
</para>

<para xml:lang="en">
We take advantage of the fact that the system does not modify the
registers: We use registers for what, otherwise, would have to be
global variables stored in the <varname>.data</varname> section. This is
also why the <trademark class="registered">UNIX</trademark> convention of passing parameters to system calls
on the stack is superior to the Microsoft convention of passing
them in the registers: We can keep the registers for our own use.
</para>

<para xml:lang="en">
We use <varname role="register">EDI</varname> and <varname role="register">ESI</varname> as pointers to the next byte
to be read from or written to. We use <varname role="register">EBX</varname> and
<varname role="register">ECX</varname> to keep count of the number of bytes in the
two buffers, so we know when to dump the output to, or read more
input from, the system.
</para>

<para xml:lang="en">
Let us see how it works now:
</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>nasm -f elf hex.asm</userinput>
<prompt>%</prompt> <userinput>ld -s -o hex hex.o</userinput>
<prompt>%</prompt> <userinput>./hex</userinput>
<userinput>Hello, World!</userinput>
<userinput>Here I come!</userinput>
48 65 6C 6C 6F 2C 20 57 6F 72 6C 64 21 0A
48 65 72 65 20 49 20 63 6F 6D 65 21 0A
<userinput>^D</userinput> <prompt>%</prompt></screen>

<para xml:lang="en">
Not what you expected? The program did not print the output
until we pressed <userinput>^D</userinput>. That is easy to fix by
inserting three lines of code to write the output every time
we have converted a new line to <constant>0A</constant>. I have marked
the three lines with &gt; (do not copy the &gt; in your
<filename>hex.asm</filename>).
</para>

<programlisting xml:lang="en">
%include	'system.inc'

%define	BUFSIZE	2048

section	.data
hex	db	'0123456789ABCDEF'

section .bss
ibuffer	resb	BUFSIZE
obuffer	resb	BUFSIZE

section	.text
global	_start
_start:
	sub	eax, eax
	sub	ebx, ebx
	sub	ecx, ecx
	mov	edi, obuffer

.loop:
	; read a byte from stdin
	call	getchar

	; convert it to hex
	mov	dl, al
	shr	al, 4
	mov	al, [hex+eax]
	call	putchar

	mov	al, dl
	and	al, 0Fh
	mov	al, [hex+eax]
	call	putchar

	mov	al, ' '
	cmp	dl, 0Ah
	jne	.put
	mov	al, dl

.put:
	call	putchar
&gt;	cmp	al, 0Ah
&gt;	jne	.loop
&gt;	call	write
	jmp	short .loop

align 4
getchar:
	or	ebx, ebx
	jne	.fetch

	call	read

.fetch:
	lodsb
	dec	ebx
	ret

read:
	push	dword BUFSIZE
	mov	esi, ibuffer
	push	esi
	push	dword stdin
	sys.read
	add	esp, byte 12
	mov	ebx, eax
	or	eax, eax
	je	.done
	sub	eax, eax
	ret

align 4
.done:
	call	write		; flush output buffer
	push	dword 0
	sys.exit

align 4
putchar:
	stosb
	inc	ecx
	cmp	ecx, BUFSIZE
	je	write
	ret

align 4
write:
	sub	edi, ecx	; start of buffer
	push	ecx
	push	edi
	push	dword stdout
	sys.write
	add	esp, byte 12
	sub	eax, eax
	sub	ecx, ecx	; buffer is empty now
	ret
</programlisting>

<para xml:lang="en">
Now, let us see how it works:
</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>nasm -f elf hex.asm</userinput>
<prompt>%</prompt> <userinput>ld -s -o hex hex.o</userinput>
<prompt>%</prompt> <userinput>./hex</userinput>
<userinput>Hello, World!</userinput>
48 65 6C 6C 6F 2C 20 57 6F 72 6C 64 21 0A
<userinput>Here I come!</userinput>
48 65 72 65 20 49 20 63 6F 6D 65 21 0A
<userinput>^D</userinput> <prompt>%</prompt></screen>

<para xml:lang="en">
Not bad for a 644-byte executable, is it!
</para>

<note>
<para xml:lang="en">
This approach to buffered input/output still
contains a hidden danger. I will discuss—and
fix—it later, when I talk about the
<link linkend="x86-buffered-dark-side">dark
side of buffering</link>.</para>
</note>

<sect2 xml:id="x86-ungetc">
<title xml:lang="en">How to Unread a Character</title>

<warning><para xml:lang="en">
This may be a somewhat advanced topic, mostly of interest to
programmers familiar with the theory of compilers. If you wish,
you may <link linkend="x86-command-line">skip to the next
section</link>, and perhaps read this later.
</para>
</warning>
<para xml:lang="en">
While our sample program does not require it, more sophisticated
filters often need to look ahead. In other words, they may need
to see what the next character is (or even several characters).
If the next character is of a certain value, it is part of the
token currently being processed. Otherwise, it is not.
</para>

<para xml:lang="en">
For example, you may be parsing the input stream for a textual
string (e.g., when implementing a language compiler): If a
character is followed by another character, or perhaps a digit,
it is part of the token you are processing. If it is followed by
white space, or some other value, then it is not part of the
current token.
</para>

<para xml:lang="en">
This presents an interesting problem: How to return the next
character back to the input stream, so it can be read again
later?
</para>

<para xml:lang="en">
One possible solution is to store it in a character variable,
then set a flag. We can modify <function>getchar</function> to check the flag,
and if it is set, fetch the byte from that variable instead of the
input buffer, and reset the flag. But, of course, that slows us
down.
</para>

<para xml:lang="en">
The C language has an <function>ungetc()</function> function, just for that
purpose. Is there a quick way to implement it in our code?
I would like you to scroll back up and take a look at the
<function>getchar</function> procedure and see if you can find a nice and
fast solution before reading the next paragraph. Then come back
here and see my own solution.
</para>

<para xml:lang="en">
The key to returning a character back to the stream is in how
we are getting the characters to start with:
</para>

<para xml:lang="en">
First we check if the buffer is empty by testing the value
of <varname role="register">EBX</varname>. If it is zero, we call the
<function>read</function> procedure.
</para>

<para xml:lang="en">
If we do have a character available, we use <function role="opcode">lodsb</function>, then
decrease the value of <varname role="register">EBX</varname>. The <function role="opcode">lodsb</function>
instruction is effectively identical to:
</para>

<programlisting xml:lang="en">
	mov	al, [esi]
	inc	esi
</programlisting>

<para xml:lang="en">
The byte we have fetched remains in the buffer until the next
time <function>read</function> is called. We do not know when that happens,
but we do know it will not happen until the next call to
<function>getchar</function>. Hence, to "return" the last-read byte back
to the stream, all we have to do is decrease the value of
<varname role="register">ESI</varname> and increase the value of <varname role="register">EBX</varname>:
</para>

<programlisting xml:lang="en">
ungetc:
	dec	esi
	inc	ebx
	ret
</programlisting>

<para xml:lang="en">
But, be careful! We are perfectly safe doing this if our look-ahead
is at most one character at a time. If we are examining more than
one upcoming character and call <function>ungetc</function> several times
in a row, it will work most of the time, but not all the time
(and will be tough to debug). Why?
</para>

<para xml:lang="en">
Because as long as <function>getchar</function> does not have to call
<function>read</function>, all of the pre-read bytes are still in the buffer,
and our <function>ungetc</function> works without a glitch. But the moment
<function>getchar</function> calls <function>read</function>,
the contents of the buffer change.
</para>

<para xml:lang="en">
We can always rely on <function>ungetc</function> working properly on the last
character we have read with <function>getchar</function>, but not on anything
we have read before that.
</para>

<para xml:lang="en">
If your program reads more than one byte ahead, you have at least
two choices:
</para>

<para xml:lang="en">
If possible, modify the program so it only reads one byte ahead.
This is the simplest solution.
</para>

<para xml:lang="en">
If that option is not available, first of all determine the maximum
number of characters your program needs to return to the input
stream at one time. Increase that number slightly, just to be
sure, preferably to a multiple of 16—so it aligns nicely.
Then modify the <varname>.bss</varname> section of your code, and create
a small "spare" buffer right before your input buffer,
something like this:
</para>

<programlisting xml:lang="en">
section	.bss
	resb	16	; or whatever the value you came up with
ibuffer	resb	BUFSIZE
obuffer	resb	BUFSIZE
</programlisting>

<para xml:lang="en">
You also need to modify your <function>ungetc</function> to pass the value
of the byte to unget in <varname role="register">AL</varname>:
</para>

<programlisting xml:lang="en">
ungetc:
	dec	esi
	inc	ebx
	mov	[esi], al
	ret
</programlisting>

<para xml:lang="en">
With this modification, you can call <function>ungetc</function>
up to 17 times in a row safely (the first call will still
be within the buffer, the remaining 16 may be either within
the buffer or within the "spare").
</para>

</sect2>

</sect1>

<sect1 xml:id="x86-command-line"><title xml:lang="en">Command Line Arguments</title>

<para xml:lang="en">
Our <application>hex</application> program will be more useful if it can
read the names of an input and output file from its command
line, i.e., if it can process the command line arguments.
But... Where are they?
</para>

<para xml:lang="en">
Before a <trademark class="registered">UNIX</trademark> system starts a program, it <function role="opcode">push</function>es some
data on the stack, then jumps at the <varname>_start</varname>
label of the program. Yes, I said jumps, not calls. That means the
data can be accessed by reading <varname>[esp+offset]</varname>,
or by simply <function role="opcode">pop</function>ping it.
</para>

<para xml:lang="en">
The value at the top of the stack contains the number of
command line arguments. It is traditionally called
<varname>argc</varname>, for "argument count."
</para>

<para xml:lang="en">
Command line arguments follow next, all <varname>argc</varname> of them.
These are typically referred to as <varname>argv</varname>, for
"argument value(s)." That is, we get <varname>argv[0]</varname>,
<varname>argv[1]</varname>, <varname>...</varname>,
<varname>argv[argc-1]</varname>. These are not the actual
arguments, but pointers to arguments, i.e., memory addresses of
the actual arguments. The arguments themselves are
NUL-terminated character strings.
</para>

<para xml:lang="en">
The <varname>argv</varname> list is followed by a NULL pointer,
which is simply a <constant>0</constant>. There is more, but this is
enough for our purposes right now.
</para>

<note>
<para xml:lang="en">
If you have come from the <acronym><trademark class="registered">MS-DOS</trademark></acronym> programming
environment, the main difference is that each argument is in
a separate string. The second difference is that there is no
practical limit on how many arguments there can be.
</para>
</note>

<para xml:lang="en">
Armed with this knowledge, we are almost ready for the next
version of <filename>hex.asm</filename>. First, however, we need to
add a few lines to <filename>system.inc</filename>:
</para>

<para xml:lang="en">
First, we need to add two new entries to our list of system
call numbers:
</para>

<programlisting xml:lang="en">
%define	SYS_open	5
%define	SYS_close	6
</programlisting>

<para xml:lang="en">
Then we add two new macros at the end of the file:
</para>

<programlisting xml:lang="en">
%macro	sys.open	0
	system	SYS_open
%endmacro

%macro	sys.close	0
	system	SYS_close
%endmacro
</programlisting>

<para xml:lang="en">
Here, then, is our modified source code:
</para>

<programlisting xml:lang="en">
%include	'system.inc'

%define	BUFSIZE	2048

section	.data
fd.in	dd	stdin
fd.out	dd	stdout
hex	db	'0123456789ABCDEF'

section .bss
ibuffer	resb	BUFSIZE
obuffer	resb	BUFSIZE

section	.text
align 4
err:
	push	dword 1		; return failure
	sys.exit

align 4
global	_start
_start:
	add	esp, byte 8	; discard argc and argv[0]

	pop	ecx
	jecxz	.init		; no more arguments

	; ECX contains the path to input file
	push	dword 0		; O_RDONLY
	push	ecx
	sys.open
	jc	err		; open failed

	add	esp, byte 8
	mov	[fd.in], eax

	pop	ecx
	jecxz	.init		; no more arguments

	; ECX contains the path to output file
	push	dword 420	; file mode (644 octal)
	push	dword 0200h | 0400h | 01h
	; O_CREAT | O_TRUNC | O_WRONLY
	push	ecx
	sys.open
	jc	err

	add	esp, byte 12
	mov	[fd.out], eax

.init:
	sub	eax, eax
	sub	ebx, ebx
	sub	ecx, ecx
	mov	edi, obuffer

.loop:
	; read a byte from input file or stdin
	call	getchar

	; convert it to hex
	mov	dl, al
	shr	al, 4
	mov	al, [hex+eax]
	call	putchar

	mov	al, dl
	and	al, 0Fh
	mov	al, [hex+eax]
	call	putchar

	mov	al, ' '
	cmp	dl, 0Ah
	jne	.put
	mov	al, dl

.put:
	call	putchar
	cmp	al, dl
	jne	.loop
	call	write
	jmp	short .loop

align 4
getchar:
	or	ebx, ebx
	jne	.fetch

	call	read

.fetch:
	lodsb
	dec	ebx
	ret

read:
	push	dword BUFSIZE
	mov	esi, ibuffer
	push	esi
	push	dword [fd.in]
	sys.read
	add	esp, byte 12
	mov	ebx, eax
	or	eax, eax
	je	.done
	sub	eax, eax
	ret

align 4
.done:
	call	write		; flush output buffer

	; close files
	push	dword [fd.in]
	sys.close

	push	dword [fd.out]
	sys.close

	; return success
	push	dword 0
	sys.exit

align 4
putchar:
	stosb
	inc	ecx
	cmp	ecx, BUFSIZE
	je	write
	ret

align 4
write:
	sub	edi, ecx	; start of buffer
	push	ecx
	push	edi
	push	dword [fd.out]
	sys.write
	add	esp, byte 12
	sub	eax, eax
	sub	ecx, ecx	; buffer is empty now
	ret
</programlisting>

<para xml:lang="en">
In our <varname>.data</varname> section we now have two new variables,
<varname>fd.in</varname> and <varname>fd.out</varname>. We store the input and
output file descriptors here.
</para>

<para xml:lang="en">
In the <varname>.text</varname> section we have replaced the references
to <varname>stdin</varname> and <varname>stdout</varname> with
<varname>[fd.in]</varname> and <varname>[fd.out]</varname>.
</para>

<para xml:lang="en">
The <varname>.text</varname> section now starts with a simple error
handler, which does nothing but exit the program with a return
value of <constant>1</constant>.
The error handler is before <varname>_start</varname> so we are
within a short distance from where the errors occur.
</para>

<para xml:lang="en">
Naturally, the program execution still begins at <varname>_start</varname>.
First, we remove <varname>argc</varname> and <varname>argv[0]</varname> from the
stack: They are of no interest to us (in this program, that is).
</para>

<para xml:lang="en">
We pop <varname>argv[1]</varname> to <varname role="register">ECX</varname>. This
register is particularly suited for pointers, as we can handle
NULL pointers with <function role="opcode">jecxz</function>. If <varname>argv[1]</varname>
is not NULL, we try to open the file named in the first
argument. Otherwise, we continue the program as before: Reading
from <varname>stdin</varname>, writing to <varname>stdout</varname>.
If we fail to open the input file (e.g., it does not exist),
we jump to the error handler and quit.
</para>

<para xml:lang="en">
If all went well, we now check for the second argument. If
it is there, we open the output file. Otherwise, we send
the output to <varname>stdout</varname>. If we fail to open the output
file (e.g., it exists and we do not have the write permission),
we, again, jump to the error handler.
</para>

<para xml:lang="en">
The rest of the code is the same as before, except we close
the input and output files before exiting, and, as mentioned,
we use <varname>[fd.in]</varname> and <varname>[fd.out]</varname>.
</para>

<para xml:lang="en">
Our executable is now a whopping 768 bytes long.
</para>

<para xml:lang="en">
Can we still improve it? Of course! Every program can be improved.
Here are a few ideas of what we could do:
</para>

<itemizedlist>
<listitem>
<para xml:lang="en">
Have our error handler print a message to
<varname>stderr</varname>.
</para>
</listitem>

<listitem>
<para xml:lang="en">
Add error handlers to the <function>read</function>
and <function>write</function> functions.
</para>
</listitem>

<listitem>
<para xml:lang="en">
Close <varname>stdin</varname> when we open an input file,
<varname>stdout</varname> when we open an output file.
</para>
</listitem>

<listitem>
<para xml:lang="en">
Add command line switches, such as <parameter>-i</parameter>
and <parameter>-o</parameter>, so we can list the input and
output files in any order, or perhaps read from
<varname>stdin</varname> and write to a file.
</para>
</listitem>

<listitem>
<para xml:lang="en">
Print a usage message if command line arguments are incorrect.
</para>
</listitem>

</itemizedlist>
<para xml:lang="en">
I shall leave these enhancements as an exercise to the reader:
You already know everything you need to know to implement them.
</para>

</sect1>

<sect1 xml:id="x86-environment">
<title xml:lang="en"><trademark class="registered">UNIX</trademark> Environment</title>

<para xml:lang="en">
An important <trademark class="registered">UNIX</trademark> concept is the environment, which is defined by
<emphasis>environment variables</emphasis>. Some are set by the system, others
by you, yet others by the <application>shell</application>, or any program
that loads another program.
</para>

<sect2 xml:id="x86-find-environment">
<title xml:lang="en">How to Find Environment Variables</title>

<para xml:lang="en">
I said earlier that when a program starts executing, the stack
contains <varname>argc</varname> followed by the NULL-terminated
<varname>argv</varname> array, followed by something else. The
"something else" is the <emphasis>environment</emphasis>, or,
to be more precise, a NULL-terminated array of pointers to
<emphasis>environment variables</emphasis>. This is often referred
to as <varname>env</varname>.
</para>

<para xml:lang="en">
The structure of <varname>env</varname> is the same as that of
<varname>argv</varname>, a list of memory addresses followed by a
NULL (<constant>0</constant>). In this case, there is no
<varname>"envc"</varname>—we figure out where the array ends
by searching for the final NULL.
</para>

<para xml:lang="en">
The variables usually come in the <varname>name=value</varname>
format, but sometimes the <varname>=value</varname> part
may be missing. We need to account for that possibility.
</para>

</sect2>

<sect2 xml:id="x86-webvar">
<title xml:lang="en">webvars</title>

<para xml:lang="en">
I could just show you some code that prints the environment
the same way the <trademark class="registered">UNIX</trademark> <application>env</application> command does. But
I thought it would be more interesting to write a simple
assembly language CGI utility.
</para>

<sect3 xml:id="x86-cgi">
<title xml:lang="en">CGI: A Quick Overview</title>

<para xml:lang="en">
I have a
<link xlink:href="http://www.whizkidtech.redprince.net/cgi-bin/tutorial">detailed
<acronym>CGI</acronym> tutorial</link> on my web site,
but here is a very quick overview of <acronym>CGI</acronym>:
</para>

<itemizedlist>
<listitem>
<para xml:lang="en">
The web server communicates with the <acronym>CGI</acronym>
program by setting <emphasis>environment variables</emphasis>.
</para>
</listitem>

<listitem>
<para xml:lang="en">
The <acronym>CGI</acronym> program
sends its output to <filename>stdout</filename>.
The web server reads it from there.
</para>
</listitem>

<listitem>
<para xml:lang="en">
It must start with an <acronym>HTTP</acronym>
header followed by two blank lines.
</para>
</listitem>

<listitem>
<para xml:lang="en">
It then prints the <acronym>HTML</acronym>
code, or whatever other type of data it is producing.
</para>
</listitem>

</itemizedlist>
<note>
<para xml:lang="en">
While certain <emphasis>environment variables</emphasis> use
standard names, others vary, depending on the web server. That
makes <application>webvars</application>
quite a useful diagnostic tool.
</para>
</note>

</sect3>

<sect3 xml:id="x86-webvars-the-code">
<title xml:lang="en">The Code</title>

<para xml:lang="en">
Our <application>webvars</application> program, then, must send out
the <acronym>HTTP</acronym> header followed by some
<acronym>HTML</acronym> mark-up. It then must read
the <emphasis>environment variables</emphasis> one by one
and send them out as part of the
<acronym>HTML</acronym> page.
</para>

<para xml:lang="en">
The code follows. I placed comments and explanations
right inside the code:
</para>

<programlisting xml:lang="en">
;;;;;;; webvars.asm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Copyright (c) 2000 G. Adam Stanislav
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions
; are met:
; 1. Redistributions of source code must retain the above copyright
;    notice, this list of conditions and the following disclaimer.
; 2. Redistributions in binary form must reproduce the above copyright
;    notice, this list of conditions and the following disclaimer in the
;    documentation and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
; OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
; SUCH DAMAGE.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Version 1.0
;
; Started:	 8-Dec-2000
; Updated:	 8-Dec-2000
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%include	'system.inc'

section	.data
http	db	'Content-type: text/html', 0Ah, 0Ah
	db	'&lt;?xml version="1.0" encoding="utf-8"?&gt;', 0Ah
	db	'&lt;!DOCTYPE html PUBLIC "-//W3C/DTD XHTML Strict//EN" '
	db	'"DTD/xhtml1-strict.dtd"&gt;', 0Ah
	db	'&lt;html xmlns="http://www.w3.org/1999/xhtml" '
	db	'xml.lang="en" lang="en"&gt;', 0Ah
	db	'&lt;head&gt;', 0Ah
	db	'&lt;title&gt;Web Environment&lt;/title&gt;', 0Ah
	db	'&lt;meta name="author" content="G. Adam Stanislav" /&gt;', 0Ah
	db	'&lt;/head&gt;', 0Ah, 0Ah
	db	'&lt;body bgcolor="#ffffff" text="#000000" link="#0000ff" '
	db	'vlink="#840084" alink="#0000ff"&gt;', 0Ah
	db	'&lt;div class="webvars"&gt;', 0Ah
	db	'&lt;h1&gt;Web Environment&lt;/h1&gt;', 0Ah
	db	'&lt;p&gt;The following &lt;b&gt;environment variables&lt;/b&gt; are defined '
	db	'on this web server:&lt;/p&gt;', 0Ah, 0Ah
	db	'&lt;table align="center" width="80" border="0" cellpadding="10" '
	db	'cellspacing="0" class="webvars"&gt;', 0Ah
httplen	equ	$-http
left	db	'&lt;tr&gt;', 0Ah
	db	'&lt;td class="name"&gt;&lt;tt&gt;'
leftlen	equ	$-left
middle	db	'&lt;/tt&gt;&lt;/td&gt;', 0Ah
	db	'&lt;td class="value"&gt;&lt;tt&gt;&lt;b&gt;'
midlen	equ	$-middle
undef	db	'&lt;i&gt;(undefined)&lt;/i&gt;'
undeflen	equ	$-undef
right	db	'&lt;/b&gt;&lt;/tt&gt;&lt;/td&gt;', 0Ah
	db	'&lt;/tr&gt;', 0Ah
rightlen	equ	$-right
wrap	db	'&lt;/table&gt;', 0Ah
	db	'&lt;/div&gt;', 0Ah
	db	'&lt;/body&gt;', 0Ah
	db	'&lt;/html&gt;', 0Ah, 0Ah
wraplen	equ	$-wrap

section	.text
global	_start
_start:
	; First, send out all the http and xhtml stuff that is
	; needed before we start showing the environment
	push	dword httplen
	push	dword http
	push	dword stdout
	sys.write

	; Now find how far on the stack the environment pointers
	; are. We have 12 bytes we have pushed before "argc"
	mov	eax, [esp+12]

	; We need to remove the following from the stack:
	;
	;	The 12 bytes we pushed for sys.write
	;	The  4 bytes of argc
	;	The EAX*4 bytes of argv
	;	The  4 bytes of the NULL after argv
	;
	; Total:
	;	20 + eax * 4
	;
	; Because stack grows down, we need to ADD that many bytes
	; to ESP.
	lea	esp, [esp+20+eax*4]
	cld		; This should already be the case, but let's be sure.

	; Loop through the environment, printing it out
.loop:
	pop	edi
	or	edi, edi	; Done yet?
	je	near .wrap

	; Print the left part of HTML
	push	dword leftlen
	push	dword left
	push	dword stdout
	sys.write

	; It may be tempting to search for the '=' in the env string next.
	; But it is possible there is no '=', so we search for the
	; terminating NUL first.
	mov	esi, edi	; Save start of string
	sub	ecx, ecx
	not	ecx		; ECX = FFFFFFFF
	sub	eax, eax
repne	scasb
	not	ecx		; ECX = string length + 1
	mov	ebx, ecx	; Save it in EBX

	; Now is the time to find '='
	mov	edi, esi	; Start of string
	mov	al, '='
repne	scasb
	not	ecx
	add	ecx, ebx	; Length of name

	push	ecx
	push	esi
	push	dword stdout
	sys.write

	; Print the middle part of HTML table code
	push	dword midlen
	push	dword middle
	push	dword stdout
	sys.write

	; Find the length of the value
	not	ecx
	lea	ebx, [ebx+ecx-1]

	; Print "undefined" if 0
	or	ebx, ebx
	jne	.value

	mov	ebx, undeflen
	mov	edi, undef

.value:
	push	ebx
	push	edi
	push	dword stdout
	sys.write

	; Print the right part of the table row
	push	dword rightlen
	push	dword right
	push	dword stdout
	sys.write

	; Get rid of the 60 bytes we have pushed
	add	esp, byte 60

	; Get the next variable
	jmp	.loop

.wrap:
	; Print the rest of HTML
	push	dword wraplen
	push	dword wrap
	push	dword stdout
	sys.write

	; Return success
	push	dword 0
	sys.exit
</programlisting>

<para xml:lang="en">
This code produces a 1,396-byte executable. Most of it is data,
i.e., the <acronym>HTML</acronym> mark-up we need to send out.
</para>

<para xml:lang="en">
Assemble and link it as usual:
</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>nasm -f elf webvars.asm</userinput>
<prompt>%</prompt> <userinput>ld -s -o webvars webvars.o</userinput></screen>

<para xml:lang="en">
To use it, you need to upload <filename>webvars</filename> to your
web server. Depending on how your web server is set up, you
may have to store it in a special <filename>cgi-bin</filename> directory,
or perhaps rename it with a <filename>.cgi</filename> extension.
</para>

<para xml:lang="en">
Then you need to use your browser to view its output.
To see its output on my web server, please go to
<link xlink:href="http://www.int80h.org/webvars/"><filename>http://www.int80h.org/webvars/</filename></link>.
If curious about the additional environment variables
present in a password protected web directory, go to
<link xlink:href="http://www.int80h.org/private/"><filename>http://www.int80h.org/private/</filename></link>,
using the name <userinput>asm</userinput> and password
<userinput>programmer</userinput>.
</para>

</sect3>

</sect2>

</sect1>

<sect1 xml:id="x86-files">
<title xml:lang="en">Working with Files</title>

<para xml:lang="en">
We have already done some basic file work: We know how
to open and close them, how to read and write them using
buffers. But <trademark class="registered">UNIX</trademark> offers much more functionality when it
comes to files. We will examine some of it in this section,
and end up with a nice file conversion utility.
</para>

<para xml:lang="en">
Indeed, let us start at the end, that is, with the file
conversion utility. It always makes programming easier
when we know from the start what the end product is
supposed to do.
</para>

<para xml:lang="en">
One of the first programs I wrote for <trademark class="registered">UNIX</trademark> was
<link xlink:href="ftp://ftp.int80h.org/unix/tuc/"><application>tuc</application></link>,
a text-to-<trademark class="registered">UNIX</trademark> file converter. It converts a text
file from other operating systems to a <trademark class="registered">UNIX</trademark> text file.
In other words, it changes from different kind of line endings
to the newline convention of <trademark class="registered">UNIX</trademark>. It saves the output
in a different file. Optionally, it converts a <trademark class="registered">UNIX</trademark> text
file to a <acronym>DOS</acronym> text file.
</para>

<para xml:lang="en">
I have used <application>tuc</application> extensively, but always
only to convert from some other <acronym>OS</acronym>
to <trademark class="registered">UNIX</trademark>, never the other way. I have always wished
it would just overwrite the file instead of me having
to send the output to a different file. Most of the time,
I end up using it like this:
</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>tuc <replaceable>myfile tempfile</replaceable></userinput>
<prompt>%</prompt> <userinput>mv <replaceable>tempfile myfile</replaceable></userinput></screen>

<para xml:lang="en">
It would be nice to have a <application>ftuc</application>,
i.e., <emphasis>fast tuc</emphasis>, and use it like this:
</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>ftuc <replaceable>myfile</replaceable></userinput></screen>

<para xml:lang="en">
In this chapter, then, we will write
<application>ftuc</application> in assembly language
(the original <application>tuc</application>
is in C), and study various
file-oriented kernel services in the process.
</para>

<para xml:lang="en">
At first sight, such a file conversion is very
simple: All you have to do is strip the carriage
returns, right?
</para>

<para xml:lang="en">
If you answered yes, think again: That approach will
work most of the time (at least with <acronym>MS
DOS</acronym> text files), but will fail occasionally.
</para>

<para xml:lang="en">
The problem is that not all non <trademark class="registered">UNIX</trademark> text files end their
line with the carriage return / line feed sequence. Some
use carriage returns without line feeds. Others combine several
blank lines into a single carriage return followed by several
line feeds. And so on.
</para>

<para xml:lang="en">
A text file converter, then, must be able to handle
any possible line endings:
</para>

<itemizedlist>
<listitem>
<para xml:lang="en">
carriage return / line feed
</para>
</listitem>

<listitem>
<para xml:lang="en">
carriage return
</para>
</listitem>

<listitem>
<para xml:lang="en">
line feed / carriage return
</para>
</listitem>

<listitem>
<para xml:lang="en">
line feed
</para>
</listitem>

</itemizedlist>
<para xml:lang="en">
It should also handle files that use some kind of a
combination of the above (e.g., carriage return followed
by several line feeds).
</para>

<sect2 xml:id="x86-finite-state-machine">
<title xml:lang="en">Finite State Machine</title>

<para xml:lang="en">
The problem is easily solved by the use of a technique
called <emphasis>finite state machine</emphasis>, originally developed
by the designers of digital electronic circuits. A
<emphasis>finite state machine</emphasis> is a digital circuit
whose output is dependent not only on its input but on
its previous input, i.e., on its state. The microprocessor
is an example of a <emphasis>finite state machine</emphasis>: Our
assembly language code is assembled to machine language in which
some assembly language code produces a single byte
of machine language, while others produce several bytes.
As the microprocessor fetches the bytes from the memory
one by one, some of them simply change its state rather than
produce some output. When all the bytes of the op code are
fetched, the microprocessor produces some output, or changes
the value of a register, etc.
</para>

<para xml:lang="en">
Because of that, all software is essentially a sequence of state
instructions for the microprocessor. Nevertheless, the concept
of <emphasis>finite state machine</emphasis> is useful in software design as well.
</para>

<para xml:lang="en">
Our text file converter can be designed as a <emphasis>finite state machine</emphasis> with three
possible states. We could call them states 0-2,
but it will make our life easier if we give them symbolic names:
</para>

<itemizedlist>
<listitem>
<para xml:lang="en">
<symbol>ordinary
</symbol></para>
</listitem>

<listitem>
<para xml:lang="en">
<symbol>cr
</symbol></para>
</listitem>

<listitem>
<para xml:lang="en">
<symbol>lf
</symbol></para>
</listitem>

</itemizedlist>
<para xml:lang="en">
Our program will start in the <symbol>ordinary</symbol>
state. During this state, the program action depends on
its input as follows:
</para>

<itemizedlist>
<listitem>
<para xml:lang="en">
If the input is anything other than a carriage return
or line feed, the input is simply passed on to the output. The
state remains unchanged.
</para>
</listitem>

<listitem>
<para xml:lang="en">
If the input is a carriage return, the state is changed
to <symbol>cr</symbol>. The input is then discarded, i.e.,
no output is made.
</para>
</listitem>

<listitem>
<para xml:lang="en">
If the input is a line feed, the state is changed to
<symbol>lf</symbol>. The input is then discarded.
</para>
</listitem>

</itemizedlist>
<para xml:lang="en">
Whenever we are in the <symbol>cr</symbol> state, it is
because the last input was a carriage return, which was
unprocessed. What our software does in this state again
depends on the current input:
</para>

<itemizedlist>
<listitem>
<para xml:lang="en">
If the input is anything other than a carriage return
or line feed, output a line feed, then output the input, then
change the state to <symbol>ordinary</symbol>.
</para>
</listitem>

<listitem>
<para xml:lang="en">
If the input is a carriage return, we have received
two (or more) carriage returns in a row. We discard the
input, we output a line feed, and leave the state unchanged.
</para>
</listitem>

<listitem>
<para xml:lang="en">
If the input is a line feed, we output the line feed
and change the state to <symbol>ordinary</symbol>. Note that
this is not the same as the first case above – if we tried
to combine them, we would be outputting two line feeds
instead of one.
</para>
</listitem>

</itemizedlist>
<para xml:lang="en">
Finally, we are in the <symbol>lf</symbol> state after
we have received a line feed that was not preceded by a
carriage return. This will happen when our file already is
in <trademark class="registered">UNIX</trademark> format, or whenever several lines in a row are
expressed by a single carriage return followed by several
line feeds, or when line ends with a line feed /
carriage return sequence. Here is how we need to handle
our input in this state:
</para>

<itemizedlist>
<listitem>
<para xml:lang="en">
If the input is anything other than a carriage return or
line feed, we output a line feed, then output the input, then
change the state to <symbol>ordinary</symbol>. This is exactly
the same action as in the <symbol>cr</symbol> state upon
receiving the same kind of input.
</para>
</listitem>

<listitem>
<para xml:lang="en">
If the input is a carriage return, we discard the input,
we output a line feed, then change the state to <symbol>ordinary</symbol>.
</para>
</listitem>

<listitem>
<para xml:lang="en">
If the input is a line feed, we output the line feed,
and leave the state unchanged.
</para>
</listitem>

</itemizedlist>
<sect3 xml:id="x86-final-state">
<title xml:lang="en">The Final State</title>

<para xml:lang="en">
The above <emphasis>finite state machine</emphasis> works for the entire file, but leaves
the possibility that the final line end will be ignored. That will
happen whenever the file ends with a single carriage return or
a single line feed. I did not think of it when I wrote
<application>tuc</application>, just to discover that
occasionally it strips the last line ending.
</para>

<para xml:lang="en">
This problem is easily fixed by checking the state after the
entire file was processed. If the state is not
<symbol>ordinary</symbol>, we simply
need to output one last line feed.
</para>

<note>
<para xml:lang="en">
Now that we have expressed our algorithm as a <emphasis>finite state machine</emphasis>,
we could easily design a dedicated digital electronic
circuit (a "chip") to do the conversion for us. Of course,
doing so would be considerably more expensive than writing
an assembly language program.
</para>
</note>

</sect3>

<sect3 xml:id="x86-tuc-counter">
<title xml:lang="en">The Output Counter</title>

<para xml:lang="en">
Because our file conversion program may be combining two
characters into one, we need to use an output counter. We
initialize it to <constant>0</constant>, and increase it
every time we send a character to the output. At the end of
the program, the counter will tell us what size we need
to set the file to.
</para>

</sect3>

</sect2>

<sect2 xml:id="x86-software-fsm">
<title xml:lang="en">Implementing FSM in Software</title>

<para xml:lang="en">
The hardest part of working with a <emphasis>finite state machine</emphasis>
is analyzing the problem and expressing it as a
<emphasis>finite state machine</emphasis>. That accomplished,
the software almost writes itself.
</para>

<para xml:lang="en">
In a high-level language, such as C, there are several main
approaches. One is to use a <function role="statement">switch</function> statement
which chooses what function should be run. For example,
</para>

<programlisting xml:lang="en">
	switch (state) {
	default:
	case REGULAR:
		regular(inputchar);
		break;
	case CR:
		cr(inputchar);
		break;
	case LF:
		lf(inputchar);
		break;
	}
</programlisting>

<para xml:lang="en">
Another approach is by using an array of function pointers,
something like this:
</para>

<programlisting xml:lang="en">
	(output[state])(inputchar);
</programlisting>

<para xml:lang="en">
Yet another is to have <varname>state</varname> be a
function pointer, set to point at the appropriate function:
</para>

<programlisting xml:lang="en">
	(*state)(inputchar);
</programlisting>
<para xml:lang="en">
This is the approach we will use in our program because it is very easy to do in assembly language, and very fast, too. We will simply keep the address of the right procedure in <varname role="register">EBX</varname>, and then just issue:</para>

<programlisting xml:lang="en">
	call	ebx
</programlisting>

<para xml:lang="en">
This is possibly faster than hardcoding the address in the code
because the microprocessor does not have to fetch the address from
the memory—it is already stored in one of its registers. I said
<emphasis>possibly</emphasis> because with the caching modern
microprocessors do, either way may be equally fast.
</para>

</sect2>

<sect2 xml:id="memory-mapped-files">
<title xml:lang="en">Memory Mapped Files</title>

<para xml:lang="en">
Because our program works on a single file, we cannot use the
approach that worked for us before, i.e., to read from an input
file and to write to an output file.
</para>

<para xml:lang="en">
<trademark class="registered">UNIX</trademark> allows us to map a file, or a section of a file,
into memory. To do that, we first need to open the file with the
appropriate read/write flags. Then we use the <function role="syscall">mmap</function>
system call to map it into the memory. One nice thing about
<function role="syscall">mmap</function> is that it automatically works with
virtual memory: We can map more of the file into the memory than
we have physical memory available, yet still access it through
regular memory op codes, such as <function role="opcode">mov</function>,
<function role="opcode">lods</function>, and <function role="opcode">stos</function>.
Whatever changes we make to the memory image of the file will be
written to the file by the system. We do not even have to keep
the file open: As long as it stays mapped, we can
read from it and write to it.
</para>

<para xml:lang="en">
The 32-bit Intel microprocessors can access up to four
gigabytes of memory – physical or virtual. The FreeBSD system
allows us to use up to a half of it for file mapping.
</para>

<para xml:lang="en">
For simplicity sake, in this tutorial we will only convert files
that can be mapped into the memory in their entirety. There are
probably not too many text files that exceed two gigabytes in size.
If our program encounters one, it will simply display a message
suggesting we use the original
<application>tuc</application> instead.
</para>

<para xml:lang="en">
If you examine your copy of <filename>syscalls.master</filename>,
you will find two separate syscalls named <function role="syscall">mmap</function>.
This is because of evolution of <trademark class="registered">UNIX</trademark>: There was the traditional
<acronym>BSD</acronym> <function role="syscall">mmap</function>,
syscall 71. That one was superseded by the <acronym><trademark class="registered">POSIX</trademark></acronym> <function role="syscall">mmap</function>,
syscall 197. The FreeBSD system supports both because
older programs were written by using the original <acronym>BSD</acronym>
version. But new software uses the <acronym><trademark class="registered">POSIX</trademark></acronym> version,
which is what we will use.
</para>

<para xml:lang="en">
The <filename>syscalls.master</filename> file lists
the <acronym><trademark class="registered">POSIX</trademark></acronym> version like this:
</para>

<programlisting xml:lang="en">
197	STD	BSD	{ caddr_t mmap(caddr_t addr, size_t len, int prot, \
			    int flags, int fd, long pad, off_t pos); }
</programlisting>

<para xml:lang="en">
This differs slightly from what
<citerefentry><refentrytitle>mmap</refentrytitle><manvolnum>2</manvolnum></citerefentry>
says. That is because
<citerefentry><refentrytitle>mmap</refentrytitle><manvolnum>2</manvolnum></citerefentry>
describes the C version.
</para>

<para xml:lang="en">
The difference is in the <varname>long pad</varname> argument, which is not present in the C version. However, the FreeBSD syscalls add a 32-bit pad after <function role="opcode">push</function>ing a 64-bit argument. In this case, <varname>off_t</varname> is a 64-bit value.</para>

<para xml:lang="en">
When we are finished working with a memory-mapped file,
we unmap it with the <function role="syscall">munmap</function> syscall:
</para>

<tip>
<para xml:lang="en">
For an in-depth treatment of <function role="syscall">mmap</function>, see
W. Richard Stevens'
<link xlink:href="http://www.int80h.org/cgi-bin/isbn?isbn=0130810819">Unix
Network Programming, Volume 2, Chapter 12</link>.
</para>
</tip>

</sect2>

<sect2 xml:id="x86-file-size">
<title xml:lang="en">Determining File Size</title>

<para xml:lang="en">
Because we need to tell <function role="syscall">mmap</function> how many bytes
of the file to map into the memory, and because we want to map
the entire file, we need to determine the size of the file.
</para>

<para xml:lang="en">
We can use the <function role="syscall">fstat</function> syscall to get all
the information about an open file that the system can give us.
That includes the file size.
</para>

<para xml:lang="en">
Again, <filename>syscalls.master</filename> lists two versions
of <function role="syscall">fstat</function>, a traditional one
(syscall 62), and a <acronym><trademark class="registered">POSIX</trademark></acronym> one
(syscall 189). Naturally, we will use the
<acronym><trademark class="registered">POSIX</trademark></acronym> version:
</para>

<programlisting xml:lang="en">
189	STD	POSIX	{ int fstat(int fd, struct stat *sb); }
</programlisting>

<para xml:lang="en">
This is a very straightforward call: We pass to it the address
of a <varname remap="structname">stat</varname> structure and the descriptor
of an open file. It will fill out the contents of the
<varname remap="structname">stat</varname> structure.
</para>

<para xml:lang="en">
I do, however, have to say that I tried to declare the
<varname remap="structname">stat</varname> structure in the
<varname>.bss</varname> section, and
<function role="syscall">fstat</function> did not like it: It set the carry
flag indicating an error. After I changed the code to allocate
the structure on the stack, everything was working fine.
</para>

</sect2>

<sect2 xml:id="x86-ftruncate">
<title xml:lang="en">Changing the File Size</title>

<para xml:lang="en">
Because our program may combine carriage return / line feed
sequences into straight line feeds, our output may be smaller
than our input. However, since we are placing our output into
the same file we read the input from, we may have to change the
size of the file.
</para>

<para xml:lang="en">
The <function role="syscall">ftruncate</function> system call allows us to do
just that. Despite its somewhat misleading name, the
<function role="syscall">ftruncate</function> system call can be used to both
truncate the file (make it smaller) and to grow it.
</para>

<para xml:lang="en">
And yes, we will find two versions of <function role="syscall">ftruncate</function>
in <filename>syscalls.master</filename>, an older one
(130), and a newer one (201). We will use
the newer one:
</para>

<programlisting xml:lang="en">
201	STD	BSD	{ int ftruncate(int fd, int pad, off_t length); }
</programlisting>

<para xml:lang="en">
Please note that this one contains a <varname>int pad</varname> again.
</para>

</sect2>

<sect2 xml:id="x86-ftuc">
<title xml:lang="en">ftuc</title>

<para xml:lang="en">
We now know everything we need to write <application>ftuc</application>.
We start by adding some new lines in <filename>system.inc</filename>.
First, we define some constants and structures, somewhere at
or near the beginning of the file:
</para>

<programlisting xml:lang="en">
;;;;;;; open flags
%define	O_RDONLY	0
%define	O_WRONLY	1
%define	O_RDWR	2

;;;;;;; mmap flags
%define	PROT_NONE	0
%define	PROT_READ	1
%define	PROT_WRITE	2
%define	PROT_EXEC	4
;;
%define	MAP_SHARED	0001h
%define	MAP_PRIVATE	0002h

;;;;;;; stat structure
struc	stat
st_dev		resd	1	; = 0
st_ino		resd	1	; = 4
st_mode		resw	1	; = 8, size is 16 bits
st_nlink	resw	1	; = 10, ditto
st_uid		resd	1	; = 12
st_gid		resd	1	; = 16
st_rdev		resd	1	; = 20
st_atime	resd	1	; = 24
st_atimensec	resd	1	; = 28
st_mtime	resd	1	; = 32
st_mtimensec	resd	1	; = 36
st_ctime	resd	1	; = 40
st_ctimensec	resd	1	; = 44
st_size		resd	2	; = 48, size is 64 bits
st_blocks	resd	2	; = 56, ditto
st_blksize	resd	1	; = 64
st_flags	resd	1	; = 68
st_gen		resd	1	; = 72
st_lspare	resd	1	; = 76
st_qspare	resd	4	; = 80
endstruc
</programlisting>

<para xml:lang="en">
We define the new syscalls:
</para>

<programlisting xml:lang="en">
%define	SYS_mmap	197
%define	SYS_munmap	73
%define	SYS_fstat	189
%define	SYS_ftruncate	201
</programlisting>

<para xml:lang="en">
We add the macros for their use:
</para>

<programlisting xml:lang="en">
%macro	sys.mmap	0
	system	SYS_mmap
%endmacro

%macro	sys.munmap	0
	system	SYS_munmap
%endmacro

%macro	sys.ftruncate	0
	system	SYS_ftruncate
%endmacro

%macro	sys.fstat	0
	system	SYS_fstat
%endmacro
</programlisting>

<para xml:lang="en">
And here is our code:
</para>

<programlisting xml:lang="en">
;;;;;;; Fast Text-to-Unix Conversion (ftuc.asm) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Started:	21-Dec-2000
;; Updated:	22-Dec-2000
;;
;; Copyright 2000 G. Adam Stanislav.
;; All rights reserved.
;;
;;;;;;; v.1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%include	'system.inc'

section	.data
	db	'Copyright 2000 G. Adam Stanislav.', 0Ah
	db	'All rights reserved.', 0Ah
usg	db	'Usage: ftuc filename', 0Ah
usglen	equ	$-usg
co	db	"ftuc: Can't open file.", 0Ah
colen	equ	$-co
fae	db	'ftuc: File access error.', 0Ah
faelen	equ	$-fae
ftl	db	'ftuc: File too long, use regular tuc instead.', 0Ah
ftllen	equ	$-ftl
mae	db	'ftuc: Memory allocation error.', 0Ah
maelen	equ	$-mae

section	.text

align 4
memerr:
	push	dword maelen
	push	dword mae
	jmp	short error

align 4
toolong:
	push	dword ftllen
	push	dword ftl
	jmp	short error

align 4
facerr:
	push	dword faelen
	push	dword fae
	jmp	short error

align 4
cantopen:
	push	dword colen
	push	dword co
	jmp	short error

align 4
usage:
	push	dword usglen
	push	dword usg

error:
	push	dword stderr
	sys.write

	push	dword 1
	sys.exit

align 4
global	_start
_start:
	pop	eax		; argc
	pop	eax		; program name
	pop	ecx		; file to convert
	jecxz	usage

	pop	eax
	or	eax, eax	; Too many arguments?
	jne	usage

	; Open the file
	push	dword O_RDWR
	push	ecx
	sys.open
	jc	cantopen

	mov	ebp, eax	; Save fd

	sub	esp, byte stat_size
	mov	ebx, esp

	; Find file size
	push	ebx
	push	ebp		; fd
	sys.fstat
	jc	facerr

	mov	edx, [ebx + st_size + 4]

	; File is too long if EDX != 0 ...
	or	edx, edx
	jne	near toolong
	mov	ecx, [ebx + st_size]
	; ... or if it is above 2 GB
	or	ecx, ecx
	js	near toolong

	; Do nothing if the file is 0 bytes in size
	jecxz	.quit

	; Map the entire file in memory
	push	edx
	push	edx		; starting at offset 0
	push	edx		; pad
	push	ebp		; fd
	push	dword MAP_SHARED
	push	dword PROT_READ | PROT_WRITE
	push	ecx		; entire file size
	push	edx		; let system decide on the address
	sys.mmap
	jc	near memerr

	mov	edi, eax
	mov	esi, eax
	push	ecx		; for SYS_munmap
	push	edi

	; Use EBX for state machine
	mov	ebx, ordinary
	mov	ah, 0Ah
	cld

.loop:
	lodsb
	call	ebx
	loop	.loop

	cmp	ebx, ordinary
	je	.filesize

	; Output final lf
	mov	al, ah
	stosb
	inc	edx

.filesize:
	; truncate file to new size
	push	dword 0		; high dword
	push	edx		; low dword
	push	eax		; pad
	push	ebp
	sys.ftruncate

	; close it (ebp still pushed)
	sys.close

	add	esp, byte 16
	sys.munmap

.quit:
	push	dword 0
	sys.exit

align 4
ordinary:
	cmp	al, 0Dh
	je	.cr

	cmp	al, ah
	je	.lf

	stosb
	inc	edx
	ret

align 4
.cr:
	mov	ebx, cr
	ret

align 4
.lf:
	mov	ebx, lf
	ret

align 4
cr:
	cmp	al, 0Dh
	je	.cr

	cmp	al, ah
	je	.lf

	xchg	al, ah
	stosb
	inc	edx

	xchg	al, ah
	; fall through

.lf:
	stosb
	inc	edx
	mov	ebx, ordinary
	ret

align 4
.cr:
	mov	al, ah
	stosb
	inc	edx
	ret

align 4
lf:
	cmp	al, ah
	je	.lf

	cmp	al, 0Dh
	je	.cr

	xchg	al, ah
	stosb
	inc	edx

	xchg	al, ah
	stosb
	inc	edx
	mov	ebx, ordinary
	ret

align 4
.cr:
	mov	ebx, ordinary
	mov	al, ah
	; fall through

.lf:
	stosb
	inc	edx
	ret
</programlisting>

<warning><para xml:lang="en">
Do not use this program on files stored on a disk formatted
by <acronym><trademark class="registered">MS-DOS</trademark></acronym> or <trademark class="registered">Windows</trademark>. There seems to be a
subtle bug in the FreeBSD code when using <function role="syscall">mmap</function>
on these drives mounted under FreeBSD: If the file is over
a certain size, <function role="syscall">mmap</function> will just fill the memory
with zeros, and then copy them to the file overwriting
its contents.
</para>
</warning>
</sect2>

</sect1>

<sect1 xml:id="x86-one-pointed-mind">
<title xml:lang="en">One-Pointed Mind</title>

<para xml:lang="en">
As a student of Zen, I like the idea of a one-pointed mind:
Do one thing at a time, and do it well.
</para>

<para xml:lang="en">
This, indeed, is very much how <trademark class="registered">UNIX</trademark> works as well. While
a typical <trademark class="registered">Windows</trademark> application is attempting to do everything
imaginable (and is, therefore, riddled with bugs), a
typical <trademark class="registered">UNIX</trademark> program does only one thing, and it does it
well.
</para>

<para xml:lang="en">
The typical <trademark class="registered">UNIX</trademark> user then essentially assembles his own
applications by writing a shell script which combines the
various existing programs by piping the output of one
program to the input of another.
</para>

<para xml:lang="en">
When writing your own <trademark class="registered">UNIX</trademark> software, it is generally a
good idea to see what parts of the problem you need to
solve can be handled by existing programs, and only
write your own programs for that part of the problem
that you do not have an existing solution for.
</para>

<sect2 xml:id="x86-csv"><title xml:lang="en">CSV</title>

<para xml:lang="en">
I will illustrate this principle with a specific real-life
example I was faced with recently:
</para>

<para xml:lang="en">
I needed to extract the 11th field of each record from a
database I downloaded from a web site. The database was a
<acronym>CSV</acronym> file, i.e., a list of
<emphasis>comma-separated values</emphasis>. That is quite
a standard format for sharing data among people who may be
using different database software.
</para>

<para xml:lang="en">
The first line of the file contains the list of various fields
separated by commas. The rest of the file contains the data
listed line by line, with values separated by commas.
</para>

<para xml:lang="en">
I tried <application>awk</application>, using the comma as a separator.
But because several lines contained a quoted comma,
<application>awk</application> was extracting the wrong field
from those lines.
</para>

<para xml:lang="en">
Therefore, I needed to write my own software to extract the 11th
field from the <acronym>CSV</acronym> file. However, going with the <trademark class="registered">UNIX</trademark>
spirit, I only needed to write a simple filter that would do the
following:
</para>

<itemizedlist>
<listitem>
<para xml:lang="en">
Remove the first line from the file;
</para>
</listitem>

<listitem>
<para xml:lang="en">
Change all unquoted commas to a different character;
</para>
</listitem>

<listitem>
<para xml:lang="en">
Remove all quotation marks.
</para>
</listitem>

</itemizedlist>
<para xml:lang="en">
Strictly speaking, I could use <application>sed</application> to remove
the first line from the file, but doing so in my own program
was very easy, so I decided to do it and reduce the size of
the pipeline.
</para>

<para xml:lang="en">
At any rate, writing a program like this took me about
20 minutes. Writing a program that extracts the 11th field
from the <acronym>CSV</acronym> file would take a lot longer,
and I could not reuse it to extract some other field from some
other database.
</para>

<para xml:lang="en">
This time I decided to let it do a little more work than
a typical tutorial program would:
</para>

<itemizedlist>
<listitem>
<para xml:lang="en">
It parses its command line for options;
</para>
</listitem>

<listitem>
<para xml:lang="en">
It displays proper usage if it finds wrong arguments;
</para>
</listitem>

<listitem>
<para xml:lang="en">
It produces meaningful error messages.
</para>
</listitem>

</itemizedlist>
<para xml:lang="en">
Here is its usage message:
</para>

<screen xml:lang="en">Usage: csv [-t&lt;delim&gt;] [-c&lt;comma&gt;] [-p] [-o &lt;outfile&gt;] [-i &lt;infile&gt;]</screen>

<para xml:lang="en">
All parameters are optional, and can appear in any order.
</para>

<para xml:lang="en">
The <parameter>-t</parameter> parameter declares what to replace
the commas with. The <constant>tab</constant> is the default here.
For example, <parameter>-t;</parameter> will replace all unquoted
commas with semicolons.
</para>

<para xml:lang="en">
I did not need the <parameter>-c</parameter> option, but it may
come in handy in the future. It lets me declare that I want a
character other than a comma replaced with something else.
For example, <parameter>-c@</parameter> will replace all at signs
(useful if you want to split a list of email addresses
to their user names and domains).
</para>

<para xml:lang="en">
The <parameter>-p</parameter> option preserves the first line, i.e.,
it does not delete it. By default, we delete the first
line because in a <acronym>CSV</acronym> file it contains the field
names rather than data.
</para>

<para xml:lang="en">
The <parameter>-i</parameter> and <parameter>-o</parameter>
options let me specify the input and the output files. Defaults
are <filename>stdin</filename> and <filename>stdout</filename>,
so this is a regular <trademark class="registered">UNIX</trademark> filter.
</para>

<para xml:lang="en">
I made sure that both <parameter>-i filename</parameter> and
<parameter>-ifilename</parameter> are accepted. I also made
sure that only one input and one output files may be
specified.
</para>

<para xml:lang="en">
To get the 11th field of each record, I can now do:
</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>csv '-t;' <replaceable>data.csv</replaceable> | awk '-F;' '{print $11}'</userinput></screen>

<para xml:lang="en">
The code stores the options (except for the file descriptors)
in <varname role="register">EDX</varname>: The comma in <varname role="register">DH</varname>, the new
separator in <varname role="register">DL</varname>, and the flag for
the <parameter>-p</parameter> option in the highest bit of
<varname role="register">EDX</varname>, so a check for its sign will give us a
quick decision what to do.
</para>

<para xml:lang="en">
Here is the code:
</para>

<programlisting xml:lang="en">
;;;;;;; csv.asm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Convert a comma-separated file to a something-else separated file.
;
; Started:	31-May-2001
; Updated:	 1-Jun-2001
;
; Copyright (c) 2001 G. Adam Stanislav
; All rights reserved.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

%include	'system.inc'

%define	BUFSIZE	2048

section	.data
fd.in	dd	stdin
fd.out	dd	stdout
usg	db	'Usage: csv [-t&lt;delim&gt;] [-c&lt;comma&gt;] [-p] [-o &lt;outfile&gt;] [-i &lt;infile&gt;]', 0Ah
usglen	equ	$-usg
iemsg	db	"csv: Can't open input file", 0Ah
iemlen	equ	$-iemsg
oemsg	db	"csv: Can't create output file", 0Ah
oemlen	equ	$-oemsg

section .bss
ibuffer	resb	BUFSIZE
obuffer	resb	BUFSIZE

section	.text
align 4
ierr:
	push	dword iemlen
	push	dword iemsg
	push	dword stderr
	sys.write
	push	dword 1		; return failure
	sys.exit

align 4
oerr:
	push	dword oemlen
	push	dword oemsg
	push	dword stderr
	sys.write
	push	dword 2
	sys.exit

align 4
usage:
	push	dword usglen
	push	dword usg
	push	dword stderr
	sys.write
	push	dword 3
	sys.exit

align 4
global	_start
_start:
	add	esp, byte 8	; discard argc and argv[0]
	mov	edx, (',' &lt;&lt; 8) | 9

.arg:
	pop	ecx
	or	ecx, ecx
	je	near .init		; no more arguments

	; ECX contains the pointer to an argument
	cmp	byte [ecx], '-'
	jne	usage

	inc	ecx
	mov	ax, [ecx]

.o:
	cmp	al, 'o'
	jne	.i

	; Make sure we are not asked for the output file twice
	cmp	dword [fd.out], stdout
	jne	usage

	; Find the path to output file - it is either at [ECX+1],
	; i.e., -ofile --
	; or in the next argument,
	; i.e., -o file

	inc	ecx
	or	ah, ah
	jne	.openoutput
	pop	ecx
	jecxz	usage

.openoutput:
	push	dword 420	; file mode (644 octal)
	push	dword 0200h | 0400h | 01h
	; O_CREAT | O_TRUNC | O_WRONLY
	push	ecx
	sys.open
	jc	near oerr

	add	esp, byte 12
	mov	[fd.out], eax
	jmp	short .arg

.i:
	cmp	al, 'i'
	jne	.p

	; Make sure we are not asked twice
	cmp	dword [fd.in], stdin
	jne	near usage

	; Find the path to the input file
	inc	ecx
	or	ah, ah
	jne	.openinput
	pop	ecx
	or	ecx, ecx
	je near usage

.openinput:
	push	dword 0		; O_RDONLY
	push	ecx
	sys.open
	jc	near ierr		; open failed

	add	esp, byte 8
	mov	[fd.in], eax
	jmp	.arg

.p:
	cmp	al, 'p'
	jne	.t
	or	ah, ah
	jne	near usage
	or	edx, 1 &lt;&lt; 31
	jmp	.arg

.t:
	cmp	al, 't'		; redefine output delimiter
	jne	.c
	or	ah, ah
	je	near usage
	mov	dl, ah
	jmp	.arg

.c:
	cmp	al, 'c'
	jne	near usage
	or	ah, ah
	je	near usage
	mov	dh, ah
	jmp	.arg

align 4
.init:
	sub	eax, eax
	sub	ebx, ebx
	sub	ecx, ecx
	mov	edi, obuffer

	; See if we are to preserve the first line
	or	edx, edx
	js	.loop

.firstline:
	; get rid of the first line
	call	getchar
	cmp	al, 0Ah
	jne	.firstline

.loop:
	; read a byte from stdin
	call	getchar

	; is it a comma (or whatever the user asked for)?
	cmp	al, dh
	jne	.quote

	; Replace the comma with a tab (or whatever the user wants)
	mov	al, dl

.put:
	call	putchar
	jmp	short .loop

.quote:
	cmp	al, '"'
	jne	.put

	; Print everything until you get another quote or EOL. If it
	; is a quote, skip it. If it is EOL, print it.
.qloop:
	call	getchar
	cmp	al, '"'
	je	.loop

	cmp	al, 0Ah
	je	.put

	call	putchar
	jmp	short .qloop

align 4
getchar:
	or	ebx, ebx
	jne	.fetch

	call	read

.fetch:
	lodsb
	dec	ebx
	ret

read:
	jecxz	.read
	call	write

.read:
	push	dword BUFSIZE
	mov	esi, ibuffer
	push	esi
	push	dword [fd.in]
	sys.read
	add	esp, byte 12
	mov	ebx, eax
	or	eax, eax
	je	.done
	sub	eax, eax
	ret

align 4
.done:
	call	write		; flush output buffer

	; close files
	push	dword [fd.in]
	sys.close

	push	dword [fd.out]
	sys.close

	; return success
	push	dword 0
	sys.exit

align 4
putchar:
	stosb
	inc	ecx
	cmp	ecx, BUFSIZE
	je	write
	ret

align 4
write:
	jecxz	.ret	; nothing to write
	sub	edi, ecx	; start of buffer
	push	ecx
	push	edi
	push	dword [fd.out]
	sys.write
	add	esp, byte 12
	sub	eax, eax
	sub	ecx, ecx	; buffer is empty now
.ret:
	ret
</programlisting>

<para xml:lang="en">
Much of it is taken from <filename>hex.asm</filename> above. But there
is one important difference: I no longer call <function>write</function>
whenever I am outputting a line feed. Yet, the code can be
used interactively.
</para>

<para xml:lang="en">
I have found a better solution for the interactive problem
since I first started writing this chapter. I wanted to
make sure each line is printed out separately only when needed.
After all, there is no need to flush out every line when used
non-interactively.
</para>

<para xml:lang="en">
The new solution I use now is to call <function>write</function> every
time I find the input buffer empty. That way, when running in
the interactive mode, the program reads one line from the user's
keyboard, processes it, and sees its input buffer is empty. It
flushes its output and reads the next line.
</para>

<sect3 xml:id="x86-buffered-dark-side">
<title xml:lang="en">The Dark Side of Buffering</title>
<para xml:lang="en">
This change prevents a mysterious lockup
in a very specific case. I refer to it as the
<emphasis>dark side of buffering</emphasis>, mostly
because it presents a danger that is not
quite obvious.
</para>

<para xml:lang="en">
It is unlikely to happen with a program like the
<application>csv</application> above, so let us consider yet
another filter: In this case we expect our input
to be raw data representing color values, such as
the <emphasis>red</emphasis>, <emphasis>green</emphasis>, and
<emphasis>blue</emphasis> intensities of a pixel. Our
output will be the negative of our input.
</para>

<para xml:lang="en">
Such a filter would be very simple to write.
Most of it would look just like all the other
filters we have written so far, so I am only
going to show you its inner loop:
</para>

<programlisting xml:lang="en">
.loop:
	call	getchar
	not	al		; Create a negative
	call	putchar
	jmp	short .loop
</programlisting>
<para xml:lang="en">
Because this filter works with raw data,
it is unlikely to be used interactively.
</para>

<para xml:lang="en">
But it could be called by image manipulation software.
And, unless it calls <function>write</function> before each call
to <function>read</function>, chances are it will lock up.
</para>

<para xml:lang="en">
Here is what might happen:
</para>

<procedure><step><para xml:lang="en">
The image editor will load our filter using the
C function <function>popen()</function>.
</para>
</step>
<step><para xml:lang="en">
It will read the first row of pixels from
a bitmap or pixmap.
</para>
</step>
<step><para xml:lang="en">
It will write the first row of pixels to
the <emphasis>pipe</emphasis> leading to
the <varname>fd.in</varname> of our filter.
</para>
</step>
<step><para xml:lang="en">
Our filter will read each pixel
from its input, turn it to a negative,
and write it to its output buffer.
</para>
</step>
<step><para xml:lang="en">
Our filter will call <function>getchar</function>
to fetch the next pixel.
</para>
</step>
<step><para xml:lang="en">
<function>getchar</function> will find an empty
input buffer, so it will call
<function>read</function>.
</para>
</step>
<step><para xml:lang="en">
<function>read</function> will call the
<function role="syscall">SYS_read</function> system call.
</para>
</step>
<step><para xml:lang="en">
The <emphasis>kernel</emphasis> will suspend
our filter until the image editor
sends more data to the pipe.
</para>
</step>
<step><para xml:lang="en">
The image editor will read from the
other pipe, connected to the
<varname>fd.out</varname> of our filter so it can set the first row of the
output image <emphasis>before</emphasis>
it sends us the second row of the input.
</para>
</step>
<step><para xml:lang="en">
The <emphasis>kernel</emphasis> suspends
the image editor until it receives
some output from our filter, so it
can pass it on to the image editor.
</para>
</step>
</procedure>
<para xml:lang="en">
At this point our filter waits for the image
editor to send it more data to process, while
the image editor is waiting for our filter
to send it the result of the processing
of the first row. But the result sits in
our output buffer.
</para>

<para xml:lang="en">
The filter and the image editor will continue
waiting for each other forever (or, at least,
until they are killed). Our software has just
entered a
<link linkend="secure-race-conditions">race condition</link>.
</para>

<para xml:lang="en">
This problem does not exist if our filter flushes
its output buffer <emphasis>before</emphasis> asking the
<emphasis>kernel</emphasis> for more input data.
</para>

</sect3>

</sect2>

</sect1>

<sect1 xml:id="x86-fpu">
<title xml:lang="en">Using the <acronym>FPU</acronym></title>
<para xml:lang="en">
Strangely enough, most of assembly language literature does not
even mention the existence of the <acronym>FPU</acronym>,
or <emphasis>floating point unit</emphasis>, let alone discuss
programming it.
</para>

<para xml:lang="en">
Yet, never does assembly language shine more than when
we create highly optimized <acronym>FPU</acronym>
code by doing things that can be done <emphasis>only</emphasis> in assembly language.</para>

<sect2 xml:id="x86-fpu-organization"><title xml:lang="en">Organization of the <acronym>FPU</acronym></title>
<para xml:lang="en">
The <acronym>FPU</acronym> consists of 8 80–bit floating–point registers.
These are organized in a stack fashion—you can
<function>push</function> a value on <acronym>TOS</acronym>
(<emphasis>top of stack</emphasis>) and you can
<function>pop</function> it.
</para>

<para xml:lang="en">
That said, the assembly language op codes are not <function role="opcode">push</function>
and <function role="opcode">pop</function> because those are already taken.</para>

<para xml:lang="en">
You can <function>push</function> a value on <acronym>TOS</acronym>
by using <function role="opcode">fld</function>, <function role="opcode">fild</function>,
and <function role="opcode">fbld</function>. Several other op codes
let you <function>push</function> many common
<emphasis>constants</emphasis>—such as <emphasis>pi</emphasis>—on
the <acronym>TOS</acronym>.
</para>

<para xml:lang="en">
Similarly, you can <function>pop</function> a value by
using <function role="opcode">fst</function>, <function role="opcode">fstp</function>,
<function role="opcode">fist</function>, <function role="opcode">fistp</function>, and
<function role="opcode">fbstp</function>. Actually, only the op
codes that end with a <emphasis>p</emphasis> will
literally <function>pop</function> the value,
the rest will <function>store</function> it
somewhere else without removing it from
the <acronym>TOS</acronym>.
</para>

<para xml:lang="en">
We can transfer the data between the
<acronym>TOS</acronym> and the computer memory either as
a 32–bit, 64–bit, or 80–bit <emphasis>real</emphasis>,
a 16–bit, 32–bit, or 64–bit <emphasis>integer</emphasis>,
or an 80–bit <emphasis>packed decimal</emphasis>.
</para>

<para xml:lang="en">
The 80–bit <emphasis>packed decimal</emphasis> is
a special case of <emphasis>binary coded
decimal</emphasis> which is very convenient when
converting between the <acronym>ASCII</acronym>
representation of data and the internal
data of the <acronym>FPU</acronym>. It allows us to use
18 significant digits.
</para>

<para xml:lang="en">
No matter how we represent data in the memory,
the <acronym>FPU</acronym> always stores it in the 80–bit
<emphasis>real</emphasis> format in its registers.
</para>

<para xml:lang="en">
Its internal precision is at least 19 decimal
digits, so even if we choose to display results
as <acronym>ASCII</acronym> in the full
18–digit precision, we are still showing
correct results.
</para>

<para xml:lang="en">
We can perform mathematical operations on the
<acronym>TOS</acronym>: We can calculate its
<emphasis>sine</emphasis>, we can <emphasis>scale</emphasis> it
(i.e., we can multiply or divide it by a power
of 2), we can calculate its base–2
<emphasis>logarithm</emphasis>, and many other things.
</para>

<para xml:lang="en">
We can also <emphasis>multiply</emphasis> or
<emphasis>divide</emphasis> it by, <emphasis>add</emphasis>
it to, or <emphasis>subtract</emphasis> it from,
any of the <acronym>FPU</acronym> registers (including
itself).
</para>

<para xml:lang="en">
The official Intel op code for the
<acronym>TOS</acronym> is <varname role="register">st</varname>, and
for the <emphasis>registers</emphasis>
<varname role="register">st(0)</varname>–<varname role="register">st(7)</varname>.
<varname role="register">st</varname> and <varname role="register">st(0)</varname>, then,
refer to the same register.
</para>

<para xml:lang="en">
For whatever reasons, the original author of
<application>nasm</application> has decided to use
different op codes, namely
<varname role="register">st0</varname>–<varname role="register">st7</varname>.
In other words, there are no parentheses,
and the <acronym>TOS</acronym> is always
<varname role="register">st0</varname>, never just <function role="opcode">st</function>.
</para>

<sect3 xml:id="x86-fpu-packed-decimal">
<title xml:lang="en">The Packed Decimal Format</title>
<para xml:lang="en">
The <emphasis>packed decimal</emphasis> format
uses 10 bytes (80 bits) of
memory to represent 18 digits. The
number represented there is always an
<emphasis>integer</emphasis>.
</para>

<tip>
<para xml:lang="en">
You can use it to get decimal places
by multiplying the <acronym>TOS</acronym>
by a power of 10 first.
</para>
</tip>

<para xml:lang="en">
The highest bit of the highest byte
(byte 9) is the <emphasis>sign bit</emphasis>:
If it is set, the number is <emphasis>negative</emphasis>,
otherwise, it is <emphasis>positive</emphasis>.
The rest of the bits of this byte are unused/ignored.
</para>

<para xml:lang="en">
The remaining 9 bytes store the 18 digits
of the number: 2 digits per byte.</para>

<para xml:lang="en">
The <emphasis>more significant digit</emphasis> is
stored in the high <emphasis>nibble</emphasis>
(4 bits), the <emphasis>less significant
digit</emphasis> in the low <emphasis>nibble</emphasis>.
</para>

<para xml:lang="en">
That said, you might think that <constant>-1234567</constant>
would be stored in the memory like this (using
hexadecimal notation):
</para>

<programlisting xml:lang="en">
80 00 00 00 00 00 01 23 45 67
</programlisting>
<para xml:lang="en">
Alas it is not! As with everything else of Intel make,
even the <emphasis>packed decimal</emphasis> is
<emphasis>little–endian</emphasis>.</para>

<para xml:lang="en">
That means our <constant>-1234567</constant>
is stored like this:
</para>

<programlisting xml:lang="en">
67 45 23 01 00 00 00 00 00 80
</programlisting>
<para xml:lang="en">
Remember that, or you will be pulling your hair out
in desperation!
</para>

<note>
<para xml:lang="en">
The book to read—if you can find it—is Richard Startz'
<link xlink:href="http://www.amazon.com/exec/obidos/ASIN/013246604X/whizkidtechnomag">8087/80287/80387
for the IBM PC &amp; Compatibles</link>.
Though it does seem to take the fact about the
little–endian storage of the <emphasis>packed
decimal</emphasis> for granted. I kid you not about the
desperation of trying to figure out what was wrong
with the filter I show below <emphasis>before</emphasis>
it occurred to me I should try the
little–endian order even for this type of data.
</para>
</note>

</sect3>

</sect2>

<sect2 xml:id="x86-pinhole-photography">
<title xml:lang="en">Excursion to Pinhole Photography</title>
<para xml:lang="en">
To write meaningful software, we must not only
understand our programming tools, but also the
field we are creating software for.
</para>

<para xml:lang="en">
Our next filter will help us whenever we want
to build a <emphasis>pinhole camera</emphasis>,
so, we need some background in <emphasis>pinhole
photography</emphasis> before we can continue.
</para>

<sect3 xml:id="x86-camera">
<title xml:lang="en">The Camera</title>
<para xml:lang="en">
The easiest way to describe any camera ever built
is as some empty space enclosed in some
lightproof material, with a small hole in the
enclosure.
</para>

<para xml:lang="en">
The enclosure is usually sturdy (e.g., a box),
though sometimes it is flexible (the bellows).
It is quite dark inside the camera. However, the
hole lets light rays in through a single point
(though in some cases there may be several).
These light rays form an image, a representation
of whatever is outside the camera, in front of the
hole.
</para>

<para xml:lang="en">
If some light sensitive material (such as film)
is placed inside the camera, it can capture the
image.</para>

<para xml:lang="en">
The hole often contains a <emphasis>lens</emphasis>, or
a lens assembly, often called the <emphasis>objective</emphasis>.
</para>

</sect3>

<sect3 xml:id="x86-the-pinhole">
<title xml:lang="en">The Pinhole</title>
<para xml:lang="en">
But, strictly speaking, the lens is not necessary:
The original cameras did not use a lens but a
<emphasis>pinhole</emphasis>. Even today, <emphasis>pinholes</emphasis>
are used, both as a tool to study how cameras
work, and to achieve a special kind of image.
</para>

<para xml:lang="en">
The image produced by the <emphasis>pinhole</emphasis>
is all equally sharp. Or <emphasis>blurred</emphasis>.
There is an ideal size for a pinhole: If it is
either larger or smaller, the image loses its
sharpness.</para>

</sect3>

<sect3 xml:id="x86-focal-length">
<title xml:lang="en">Focal Length</title>
<para xml:lang="en">
This ideal pinhole diameter is a function
of the square root of <emphasis>focal
length</emphasis>, which is the distance of the
pinhole from the film.
</para>

<programlisting xml:lang="en">
	D = PC * sqrt(FL)
</programlisting>
<para xml:lang="en">
In here, <varname>D</varname> is the
ideal diameter of the pinhole,
<varname>FL</varname> is the focal length,
and <constant>PC</constant> is a pinhole
constant. According to Jay Bender,
its value is <constant>0.04</constant>, while
Kenneth Connors has determined it to
be <constant>0.037</constant>. Others have
proposed other values. Plus, this
value is for the daylight only: Other types
of light will require a different constant,
whose value can only be determined by
experimentation.
</para>

</sect3>

<sect3 xml:id="x86-f-number">
<title xml:lang="en">The F–Number</title>
<para xml:lang="en">
The f–number is a very useful measure of
how much light reaches the film. A light
meter can determine that, for example,
to expose a film of specific sensitivity
with f5.6 may require the exposure to last
1/1000 sec.</para>

<para xml:lang="en">
It does not matter whether it is a 35–mm
camera, or a 6x9cm camera, etc.
As long as we know the f–number, we can determine
the proper exposure.
</para>

<para xml:lang="en">
The f–number is easy to calculate:
</para>

<programlisting xml:lang="en">
	F = FL / D
</programlisting>
<para xml:lang="en">
In other words, the f–number equals the focal
length divided by the diameter of the pinhole.
It also means a higher f–number either implies
a smaller pinhole or a larger focal distance,
or both. That, in turn, implies, the higher
the f–number, the longer the exposure has to be.
</para>

<para xml:lang="en">
Furthermore, while pinhole diameter and focal
distance are one–dimensional measurements,
both, the film and the pinhole, are two–dimensional.
That means that
if you have measured the exposure at f–number
<varname>A</varname> as <varname>t</varname>, then the exposure
at f–number <varname>B</varname> is:</para>

<programlisting xml:lang="en">
	t * (B / A)²
</programlisting>
</sect3>

<sect3 xml:id="x86-normalized-f-number">
<title xml:lang="en">Normalized F–Number</title>
<para xml:lang="en">
While many modern cameras can change the diameter
of their pinhole, and thus their f–number, quite
smoothly and gradually, such was not always the case.
</para>

<para xml:lang="en">
To allow for different f–numbers, cameras typically
contained a metal plate with several holes of
different sizes drilled to them.
</para>

<para xml:lang="en">
Their sizes were chosen according to the above
formula in such a way that the resultant f–number
was one of standard f–numbers used on all cameras
everywhere. For example, a very old Kodak Duaflex IV
camera in my possession has three such holes for
f–numbers 8, 11, and 16.
</para>

<para xml:lang="en">
A more recently made camera may offer f–numbers of
2.8, 4, 5.6, 8, 11,
16, 22, and 32 (as well as others).
These numbers were not chosen arbitrarily: They all are
powers of the square root of 2, though they may
be rounded somewhat.
</para>

</sect3>

<sect3 xml:id="x86-f-stop">
<title xml:lang="en">The F–Stop</title>
<para xml:lang="en">
A typical camera is designed in such a way that setting
any of the normalized f–numbers changes the feel of the
dial. It will naturally <emphasis>stop</emphasis> in that
position. Because of that, these positions of the dial
are called f–stops.</para>

<para xml:lang="en">
Since the f–numbers at each stop are powers of the
square root of 2, moving the dial by 1
stop will double the amount of light required for
proper exposure. Moving it by 2 stops will
quadruple the required exposure. Moving the dial by
3 stops will require the increase in exposure
8 times, etc.
</para>

</sect3>

</sect2>

<sect2 xml:id="x86-pinhole-software">
<title xml:lang="en">Designing the Pinhole Software</title>
<para xml:lang="en">
We are now ready to decide what exactly we want our
pinhole software to do.
</para>

<sect3 xml:id="xpinhole-processing-input">
<title xml:lang="en">Processing Program Input</title>
<para xml:lang="en">
Since its main purpose is to help us design a working
pinhole camera, we will use the <emphasis>focal
length</emphasis> as the input to the program. This is something
we can determine without software: Proper focal length
is determined by the size of the film and by the need
to shoot "regular" pictures, wide angle pictures, or
telephoto pictures.
</para>

<para xml:lang="en">
Most of the programs we have written so far worked with
individual characters, or bytes, as their input: The
<application>hex</application> program converted individual bytes
into a hexadecimal number, the <application>csv</application>
program either let a character through, or deleted it,
or changed it to a different character, etc.
</para>

<para xml:lang="en">
One program, <application>ftuc</application> used the state machine
to consider at most two input bytes at a time.
</para>

<para xml:lang="en">
But our <application>pinhole</application> program cannot just
work with individual characters, it has to deal with
larger syntactic units.
</para>

<para xml:lang="en">
For example, if we want the program to calculate the
pinhole diameter (and other values we will discuss
later) at the focal lengths of <constant>100 mm</constant>,
<constant>150 mm</constant>, and <constant>210 mm</constant>, we may want
to enter something like this:</para>

<screen xml:lang="en"><userinput>100, 150, 210</userinput></screen>
<para xml:lang="en">
Our program needs to consider more than a single byte of
input at a time. When it sees the first <constant>1</constant>,
it must understand it is seeing the first digit of a
decimal number. When it sees the <constant>0</constant> and
the other <constant>0</constant>, it must know it is seeing
more digits of the same number.
</para>

<para xml:lang="en">
When it encounters the first comma, it must know it is
no longer receiving the digits of the first number.
It must be able to convert the digits of the first number
into the value of <constant>100</constant>. And the digits of the
second number into the value of <constant>150</constant>. And,
of course, the digits of the third number into the
numeric value of <constant>210</constant>.
</para>

<para xml:lang="en">
We need to decide what delimiters to accept: Do the
input numbers have to be separated by a comma? If so,
how do we treat two numbers separated by something else?
</para>

<para xml:lang="en">
Personally, I like to keep it simple. Something either
is a number, so I process it. Or it is not a number,
so I discard it. I do not like the computer complaining
about me typing in an extra character when it is
<emphasis>obvious</emphasis> that it is an extra character. Duh!
</para>

<para xml:lang="en">
Plus, it allows me to break up the monotony of computing
and type in a query instead of just a number:
</para>

<screen xml:lang="en"><userinput>What is the best pinhole diameter for the focal length of 150?</userinput></screen>
<para xml:lang="en">
There is no reason for the computer to spit out
a number of complaints:
</para>

<screen xml:lang="en">Syntax error: What
Syntax error: is
Syntax error: the
Syntax error: best</screen>
<para xml:lang="en">
Et cetera, et cetera, et cetera.</para>

<para xml:lang="en">
Secondly, I like the <constant>#</constant> character to denote
the start of a comment which extends to the end of the
line. This does not take too much effort to code, and
lets me treat input files for my software as executable
scripts.
</para>

<para xml:lang="en">
In our case, we also need to decide what units the
input should come in: We choose <emphasis>millimeters</emphasis>
because that is how most photographers measure
the focus length.
</para>

<para xml:lang="en">
Finally, we need to decide whether to allow the use
of the decimal point (in which case we must also
consider the fact that much of the world uses a
decimal <emphasis>comma</emphasis>).</para>

<para xml:lang="en">
In our case allowing for the decimal point/comma
would offer a false sense of precision: There is
little if any noticeable difference between the
focus lengths of <constant>50</constant> and <constant>51</constant>,
so allowing the user to input something like
<constant>50.5</constant> is not a good idea. This is
my opinion, mind you, but I am the one writing
this program. You can make other choices in yours,
of course.
</para>

</sect3>

<sect3 xml:id="x86-pinhole-options">
<title xml:lang="en">Offering Options</title>
<para xml:lang="en">
The most important thing we need to know when building
a pinhole camera is the diameter of the pinhole. Since
we want to shoot sharp images, we will use the above
formula to calculate the pinhole diameter from focal length.
As experts are offering several different values for the
<constant>PC</constant> constant, we will need to have the choice.
</para>

<para xml:lang="en">
It is traditional in <trademark class="registered">UNIX</trademark> programming to have two main ways
of choosing program parameters, plus to have a default for
the time the user does not make a choice.
</para>

<para xml:lang="en">
Why have two ways of choosing?</para>

<para xml:lang="en">
One is to allow a (relatively) <emphasis>permanent</emphasis>
choice that applies automatically each time the
software is run without us having to tell it over and
over what we want it to do.
</para>

<para xml:lang="en">
The permanent choices may be stored in a configuration
file, typically found in the user's home directory.
The file usually has the same name as the application
but is started with a dot. Often <emphasis>"rc"</emphasis>
is added to the file name. So, ours could be
<filename>~/.pinhole</filename> or <filename>~/.pinholerc</filename>.
(The <filename>~/</filename> means current user's
home directory.)
</para>

<para xml:lang="en">
The configuration file is used mostly by programs
that have many configurable parameters. Those
that have only one (or a few) often use a different
method: They expect to find the parameter in an
<emphasis>environment variable</emphasis>. In our case,
we might look at an environment variable named
<varname>PINHOLE</varname>.
</para>

<para xml:lang="en">
Usually, a program uses one or the other of the
above methods. Otherwise, if a configuration
file said one thing, but an environment variable
another, the program might get confused (or just
too complicated).
</para>

<para xml:lang="en">
Because we only need to choose <emphasis>one</emphasis>
such parameter, we will go with the second method
and search the environment for a variable named
<varname>PINHOLE</varname>.</para>

<para xml:lang="en">
The other way allows us to make <emphasis>ad hoc</emphasis>
decisions: <emphasis>"Though I usually want
you to use 0.039, this time I want 0.03872."</emphasis>
In other words, it allows us to <emphasis>override</emphasis>
the permanent choice.
</para>

<para xml:lang="en">
This type of choice is usually done with command
line parameters.
</para>

<para xml:lang="en">
Finally, a program <emphasis>always</emphasis> needs a
<emphasis>default</emphasis>. The user may not make
any choices. Perhaps he does not know what
to choose. Perhaps he is "just browsing."
Preferably, the default will be the value
most users would choose anyway. That way
they do not need to choose. Or, rather, they
can choose the default without an additional
effort.
</para>

<para xml:lang="en">
Given this system, the program may find conflicting
options, and handle them this way:
</para>

<procedure><step><para xml:lang="en">
If it finds an <emphasis>ad hoc</emphasis> choice
(e.g., command line parameter), it should
accept that choice. It must ignore any permanent
choice and any default.
</para>
</step>
<step><para xml:lang="en">
<emphasis>Otherwise</emphasis>, if it finds
a permanent option (e.g., an environment
variable), it should accept it, and ignore
the default.</para>
</step>
<step><para xml:lang="en">
<emphasis>Otherwise</emphasis>, it should use
the default.
</para>
</step>
</procedure>
<para xml:lang="en">
We also need to decide what <emphasis>format</emphasis>
our <constant>PC</constant> option should have.
</para>

<para xml:lang="en">
At first site, it seems obvious to use the
<varname>PINHOLE=0.04</varname> format for the
environment variable, and <parameter>-p0.04</parameter>
for the command line.
</para>

<para xml:lang="en">
Allowing that is actually a security risk.
The <constant>PC</constant> constant is a very small
number. Naturally, we will test our software
using various small values of <constant>PC</constant>.
But what will happen if someone runs the program
choosing a huge value?
</para>

<para xml:lang="en">
It may crash the program because we have not
designed it to handle huge numbers.
</para>

<para xml:lang="en">
Or, we may spend more time on the program so
it can handle huge numbers. We might do that
if we were writing commercial software for
computer illiterate audience.
</para>

<para xml:lang="en">
Or, we might say, <emphasis>"Tough!
The user should know better.""</emphasis>
</para>

<para xml:lang="en">
Or, we just may make it impossible for the user
to enter a huge number. This is the approach we
will take: We will use an <emphasis>implied 0.</emphasis>
prefix.
</para>

<para xml:lang="en">
In other words, if the user wants <constant>0.04</constant>,
we will expect him to type <parameter>-p04</parameter>,
or set <varname>PINHOLE=04</varname> in his environment.
So, if he says <parameter>-p9999999</parameter>, we will
interpret it as <constant>0.9999999</constant>—still
ridiculous but at least safer.
</para>

<para xml:lang="en">
Secondly, many users will just want to go with either
Bender's constant or Connors' constant.
To make it easier on them, we will interpret
<parameter>-b</parameter> as identical to <parameter>-p04</parameter>,
and <parameter>-c</parameter> as identical to <parameter>-p037</parameter>.
</para>

</sect3>

<sect3 xml:id="x86-pinhole-output">
<title xml:lang="en">The Output</title>
<para xml:lang="en">
We need to decide what we want our software to
send to the output, and in what format.
</para>

<para xml:lang="en">
Since our input allows for an unspecified number
of focal length entries, it makes sense to use
a traditional database–style output of showing
the result of the calculation for each
focal length on a separate line, while
separating all values on one line by a
<constant>tab</constant> character.
</para>

<para xml:lang="en">
Optionally, we should also allow the user
to specify the use of the <acronym>CSV</acronym>
format we have studied earlier. In this case,
we will print out a line of comma–separated
names describing each field of every line,
then show our results as before, but substituting
a <constant>comma</constant> for the <constant>tab</constant>.</para>

<para xml:lang="en">
We need a command line option for the <acronym>CSV</acronym>
format. We cannot use <parameter>-c</parameter> because
that already means <emphasis>use Connors' constant</emphasis>.
For some strange reason, many web sites refer to
<acronym>CSV</acronym> files as <emphasis>"Excel
spreadsheet"</emphasis> (though the <acronym>CSV</acronym>
format predates Excel). We will, therefore, use
the <parameter>-e</parameter> switch to inform our software
we want the output in the <acronym>CSV</acronym> format.
</para>

<para xml:lang="en">
We will start each line of the output with the
focal length. This may sound repetitious at first,
especially in the interactive mode: The user
types in the focal length, and we are repeating it.
</para>

<para xml:lang="en">
But the user can type several focal lengths on one
line. The input can also come in from a file or
from the output of another program. In that case
the user does not see the input at all.
</para>

<para xml:lang="en">
By the same token, the output can go to a file
which we will want to examine later, or it could
go to the printer, or become the input of another
program.
</para>

<para xml:lang="en">
So, it makes perfect sense to start each line with
the focal length as entered by the user.
</para>

<para xml:lang="en">
No, wait! Not as entered by the user. What if the user
types in something like this:</para>

<screen xml:lang="en"><userinput>00000000150</userinput></screen>
<para xml:lang="en">
Clearly, we need to strip those leading zeros.</para>

<para xml:lang="en">
So, we might consider reading the user input as is,
converting it to binary inside the <acronym>FPU</acronym>,
and printing it out from there.
</para>

<para xml:lang="en">
But...</para>

<para xml:lang="en">
What if the user types something like this:
</para>

<screen xml:lang="en"><userinput>17459765723452353453534535353530530534563507309676764423</userinput></screen>
<para xml:lang="en">
Ha! The packed decimal <acronym>FPU</acronym> format
lets us input 18–digit numbers. But the
user has entered more than 18 digits. How
do we handle that?
</para>

<para xml:lang="en">
Well, we <emphasis>could</emphasis> modify our code to read
the first 18 digits, enter it to the <acronym>FPU</acronym>,
then read more, multiply what we already have on the
<acronym>TOS</acronym> by 10 raised to the number
of additional digits, then <function>add</function> to it.
</para>

<para xml:lang="en">
Yes, we could do that. But in <emphasis>this</emphasis>
program it would be ridiculous (in a different one it may be just the thing to do): Even the circumference of the Earth expressed in
millimeters only takes 11 digits. Clearly,
we cannot build a camera that large (not yet,
anyway).
</para>

<para xml:lang="en">
So, if the user enters such a huge number, he is
either bored, or testing us, or trying to break
into the system, or playing games—doing
anything but designing a pinhole camera.
</para>

<para xml:lang="en">
What will we do?</para>

<para xml:lang="en">
We will slap him in the face, in a manner of speaking:</para>

<screen xml:lang="en">17459765723452353453534535353530530534563507309676764423	???	???	???	???	???</screen>
<para xml:lang="en">
To achieve that, we will simply ignore any leading zeros.
Once we find a non–zero digit, we will initialize a
counter to <constant>0</constant> and start taking three steps:
</para>

<procedure>
<step><para xml:lang="en">
Send the digit to the output.
</para>
</step>
<step><para xml:lang="en">
Append the digit to a buffer we will use later to
produce the packed decimal we can send to the
<acronym>FPU</acronym>.
</para>
</step>
<step><para xml:lang="en">
Increase the counter.
</para>
</step>
</procedure>
<para xml:lang="en">
Now, while we are taking these three steps,
we also need to watch out for one of two
conditions:</para>

<itemizedlist>
<listitem>
<para xml:lang="en">
If the counter grows above 18,
we stop appending to the buffer. We
continue reading the digits and sending
them to the output.
</para>
</listitem>

<listitem>
<para xml:lang="en">
If, or rather <emphasis>when</emphasis>,
the next input character is not
a digit, we are done inputting
for now.
</para>

<para xml:lang="en">
Incidentally, we can simply
discard the non–digit, unless it
is a <constant>#</constant>, which we must
return to the input stream. It
starts a comment, so we must see it
after we are done producing output
and start looking for more input.
</para>
</listitem>

</itemizedlist>
<para xml:lang="en">
That still leaves one possibility
uncovered: If all the user enters
is a zero (or several zeros), we
will never find a non–zero to
display.</para>

<para xml:lang="en">
We can determine this has happened
whenever our counter stays at <constant>0</constant>.
In that case we need to send <constant>0</constant>
to the output, and perform another
"slap in the face":
</para>

<screen xml:lang="en">0	???	???	???	???	???</screen>
<para xml:lang="en">
Once we have displayed the focal
length and determined it is valid
(greater than <constant>0</constant>
but not exceeding 18 digits),
we can calculate the pinhole diameter.
</para>

<para xml:lang="en">
It is not by coincidence that <emphasis>pinhole</emphasis>
contains the word <emphasis>pin</emphasis>. Indeed,
many a pinhole literally is a <emphasis>pin
hole</emphasis>, a hole carefully punched with the
tip of a pin.
</para>

<para xml:lang="en">
That is because a typical pinhole is very
small. Our formula gets the result in
millimeters. We will multiply it by <constant>1000</constant>,
so we can output the result in <emphasis>microns</emphasis>.
</para>

<para xml:lang="en">
At this point we have yet another trap to face:
<emphasis>Too much precision.</emphasis>
</para>

<para xml:lang="en">
Yes, the <acronym>FPU</acronym> was designed
for high precision mathematics. But we
are not dealing with high precision
mathematics. We are dealing with physics
(optics, specifically).
</para>

<para xml:lang="en">
Suppose we want to convert a truck into
a pinhole camera (we would not be the
first ones to do that!). Suppose its box is
<constant>12</constant>
meters long, so we have the focal length
of <constant>12000</constant>. Well, using Bender's constant, it gives us square root of
<constant>12000</constant> multiplied by <constant>0.04</constant>,
which is <constant>4.381780460</constant> millimeters,
or <constant>4381.780460</constant> microns.
</para>

<para xml:lang="en">
Put either way, the result is absurdly precise.
Our truck is not <emphasis>exactly</emphasis> <constant>12000</constant>
millimeters long. We did not measure its length
with such a precision, so stating we need a pinhole
with the diameter of <constant>4.381780460</constant>
millimeters is, well, deceiving. <constant>4.4</constant>
millimeters would do just fine.
</para>

<note>
<para xml:lang="en">
I "only" used ten digits in the above example.
Imagine the absurdity of going for all 18!
</para>
</note>

<para xml:lang="en">
We need to limit the number of significant
digits of our result. One way of doing it
is by using an integer representing microns.
So, our truck would need a pinhole with the diameter
of <constant>4382</constant> microns. Looking at that number, we still decide that <constant>4400</constant> microns,
or <constant>4.4</constant> millimeters is close enough.
</para>

<para xml:lang="en">
Additionally, we can decide that no matter how
big a result we get, we only want to display four
significant digits (or any other number
of them, of course). Alas, the <acronym>FPU</acronym>
does not offer rounding to a specific number
of digits (after all, it does not view the
numbers as decimal but as binary).
</para>

<para xml:lang="en">
We, therefore, must devise an algorithm to reduce
the number of significant digits.
</para>

<para xml:lang="en">
Here is mine (I think it is awkward—if
you know a better one, <emphasis>please</emphasis>, let me know):</para>

<procedure>
<step><para xml:lang="en">
Initialize a counter to <constant>0</constant>.
</para>
</step>
<step><para xml:lang="en">
While the number is greater than or equal to
<constant>10000</constant>, divide it by
<constant>10</constant> and increase the counter.
</para>
</step>
<step><para xml:lang="en">
Output the result.</para>
</step>
<step><para xml:lang="en">
While the counter is greater than <constant>0</constant>,
output <constant>0</constant> and decrease the counter.
</para>
</step>
</procedure>
<note>
<para xml:lang="en">
The <constant>10000</constant> is only good if you want
<emphasis>four</emphasis> significant digits. For any other
number of significant digits, replace
<constant>10000</constant> with <constant>10</constant>
raised to the number of significant digits.
</para>
</note>

<para xml:lang="en">
We will, then, output the pinhole diameter
in microns, rounded off to four significant
digits.
</para>

<para xml:lang="en">
At this point, we know the <emphasis>focal
length</emphasis> and the <emphasis>pinhole
diameter</emphasis>. That means we have enough
information to also calculate the
<emphasis>f–number</emphasis>.
</para>

<para xml:lang="en">
We will display the f–number, rounded to
four significant digits. Chances are the
f–number will tell us very little. To make
it more meaningful, we can find the nearest
<emphasis>normalized f–number</emphasis>, i.e.,
the nearest power of the square root
of 2.
</para>

<para xml:lang="en">
We do that by multiplying the actual f–number
by itself, which, of course, will give us
its <function>square</function>. We will then calculate
its base–2 logarithm, which is much
easier to do than calculating the
base–square–root–of–2 logarithm!
We will round the result to the nearest integer.
Next, we will raise 2 to the result. Actually,
the <acronym>FPU</acronym> gives us a good shortcut
to do that: We can use the <function role="opcode">fscale</function>
op code to "scale" 1, which is
analogous to <function role="opcode">shift</function>ing an
integer left. Finally, we calculate the square
root of it all, and we have the nearest
normalized f–number.
</para>

<para xml:lang="en">
If all that sounds overwhelming—or too much
work, perhaps—it may become much clearer
if you see the code. It takes 9 op
codes altogether:</para>

<programlisting xml:lang="en">
	fmul	st0, st0
	fld1
	fld	st1
	fyl2x
	frndint
	fld1
	fscale
	fsqrt
	fstp	st1
</programlisting>
<para xml:lang="en">
The first line, <function role="opcode">fmul st0, st0</function>, squares
the contents of the <acronym>TOS</acronym>
(top of the stack, same as <varname role="register">st</varname>,
called <varname role="register">st0</varname> by <application>nasm</application>).
The <function role="opcode">fld1</function> pushes <constant>1</constant>
on the <acronym>TOS</acronym>.</para>

<para xml:lang="en">
The next line, <function role="opcode">fld st1</function>, pushes
the square back to the <acronym>TOS</acronym>.
At this point the square is both in <varname role="register">st</varname>
and <varname role="register">st(2)</varname> (it will become
clear why we leave a second copy on the stack
in a moment). <varname role="register">st(1)</varname> contains
<constant>1</constant>.
</para>

<para xml:lang="en">
Next, <function role="opcode">fyl2x</function> calculates base–2
logarithm of <varname role="register">st</varname> multiplied by
<varname role="register">st(1)</varname>. That is why we placed <constant>1</constant> on <varname role="register">st(1)</varname> before.</para>

<para xml:lang="en">
At this point, <varname role="register">st</varname> contains
the logarithm we have just calculated,
<varname role="register">st(1)</varname> contains the square
of the actual f–number we saved for later.
</para>

<para xml:lang="en">
<function role="opcode">frndint</function> rounds the <acronym>TOS</acronym>
to the nearest integer. <function role="opcode">fld1</function> pushes
a <constant>1</constant>. <function role="opcode">fscale</function> shifts the
<constant>1</constant> we have on the <acronym>TOS</acronym>
by the value in <varname role="register">st(1)</varname>,
effectively raising 2 to <varname role="register">st(1)</varname>.
</para>

<para xml:lang="en">
Finally, <function role="opcode">fsqrt</function> calculates
the square root of the result, i.e.,
the nearest normalized f–number.
</para>

<para xml:lang="en">
We now have the nearest normalized
f–number on the <acronym>TOS</acronym>,
the base–2 logarithm rounded to the
nearest integer in <varname role="register">st(1)</varname>,
and the square of the actual f–number
in <varname role="register">st(2)</varname>. We are saving
the value in <varname role="register">st(2)</varname> for later.
</para>

<para xml:lang="en">
But we do not need the contents of
<varname role="register">st(1)</varname> anymore. The last
line, <function role="opcode">fstp st1</function>, places the
contents of <varname role="register">st</varname> to
<varname role="register">st(1)</varname>, and pops. As a
result, what was <varname role="register">st(1)</varname>
is now <varname role="register">st</varname>, what was <varname role="register">st(2)</varname>
is now <varname role="register">st(1)</varname>, etc.
The new <varname role="register">st</varname> contains the
normalized f–number. The new
<varname role="register">st(1)</varname> contains the square
of the actual f–number we have
stored there for posterity.
</para>

<para xml:lang="en">
At this point, we are ready to output
the normalized f–number. Because it is
normalized, we will not round it off to
four significant digits, but will
send it out in its full precision.
</para>

<para xml:lang="en">
The normalized f-number is useful as long
as it is reasonably small and can be found
on our light meter. Otherwise we need a
different method of determining proper
exposure.
</para>

<para xml:lang="en">
Earlier we have figured out the formula
of calculating proper exposure at an arbitrary
f–number from that measured at a different
f–number.
</para>

<para xml:lang="en">
Every light meter I have ever seen can determine
proper exposure at f5.6. We will, therefore,
calculate an <emphasis>"f5.6 multiplier,"</emphasis>
i.e., by how much we need to multiply the exposure measured
at f5.6 to determine the proper exposure
for our pinhole camera.
</para>

<para xml:lang="en">
From the above formula we know this factor can be
calculated by dividing our f–number (the
actual one, not the normalized one) by
<constant>5.6</constant>, and squaring the result.
</para>

<para xml:lang="en">
Mathematically, dividing the square of our
f–number by the square of <constant>5.6</constant>
will give us the same result.
</para>

<para xml:lang="en">
Computationally, we do not want to square
two numbers when we can only square one.
So, the first solution seems better at first.
</para>

<para xml:lang="en">
But...</para>

<para xml:lang="en">
<constant>5.6</constant> is a <emphasis>constant</emphasis>.
We do not have to have our <acronym>FPU</acronym>
waste precious cycles. We can just tell it
to divide the square of the f–number by
whatever <constant>5.6²</constant> equals to.
Or we can divide the f–number by <constant>5.6</constant>,
and then square the result. The two ways
now seem equal.
</para>

<para xml:lang="en">
But, they are not!</para>

<para xml:lang="en">
Having studied the principles of photography
above, we remember that the <constant>5.6</constant>
is actually square root of 2 raised to
the fifth power. An <emphasis>irrational</emphasis>
number. The square of this number is
<emphasis>exactly</emphasis> <constant>32</constant>.
</para>

<para xml:lang="en">
Not only is <constant>32</constant> an integer,
it is a power of 2. We do not need
to divide the square of the f–number by
<constant>32</constant>. We only need to use
<function role="opcode">fscale</function> to shift it right by
five positions. In the <acronym>FPU</acronym>
lingo it means we will <function role="opcode">fscale</function> it
with <varname role="register">st(1)</varname> equal to
<constant>-5</constant>. That is <emphasis>much
faster</emphasis> than a division.
</para>

<para xml:lang="en">
So, now it has become clear why we have
saved the square of the f–number on the
top of the <acronym>FPU</acronym> stack.
The calculation of the f5.6 multiplier
is the easiest calculation of this
entire program! We will output it rounded
to four significant digits.
</para>

<para xml:lang="en">
There is one more useful number we can calculate:
The number of stops our f–number is from f5.6.
This may help us if our f–number is just outside
the range of our light meter, but we have
a shutter which lets us set various speeds,
and this shutter uses stops.
</para>

<para xml:lang="en">
Say, our f–number is 5 stops from
f5.6, and the light meter says
we should use 1/1000 sec.
Then we can set our shutter speed to 1/1000
first, then move the dial by 5 stops.
</para>

<para xml:lang="en">
This calculation is quite easy as well. All
we have to do is to calculate the base-2
logarithm of the f5.6 multiplier
we had just calculated (though we need its
value from before we rounded it off). We then
output the result rounded to the nearest integer.
We do not need to worry about having more than
four significant digits in this one: The result
is most likely to have only one or two digits
anyway.</para>

</sect3>

</sect2>

<sect2 xml:id="x86-fpu-optimizations">
<title xml:lang="en">FPU Optimizations</title>
<para xml:lang="en">
In assembly language we can optimize the <acronym>FPU</acronym>
code in ways impossible in high languages,
including C.
</para>

<para xml:lang="en">
Whenever a C function needs to calculate
a floating–point value, it loads all necessary
variables and constants into <acronym>FPU</acronym>
registers. It then does whatever calculation is
required to get the correct result. Good C
compilers can optimize that part of the code really
well.
</para>

<para xml:lang="en">
It "returns" the value by leaving
the result on the <acronym>TOS</acronym>.
However, before it returns, it cleans up.
Any variables and constants it used in its
calculation are now gone from the <acronym>FPU</acronym>.
</para>

<para xml:lang="en">
It cannot do what we just did above: We calculated
the square of the f–number and kept it on the
stack for later use by another function.
</para>

<para xml:lang="en">
We <emphasis>knew</emphasis> we would need that value
later on. We also knew we had enough room on the
stack (which only has room for 8 numbers)
to store it there.
</para>

<para xml:lang="en">
A C compiler has no way of knowing
that a value it has on the stack will be
required again in the very near future.
</para>

<para xml:lang="en">
Of course, the C programmer may know it.
But the only recourse he has is to store the
value in a memory variable.
</para>

<para xml:lang="en">
That means, for one, the value will be changed
from the 80-bit precision used internally
by the <acronym>FPU</acronym> to a C <emphasis>double</emphasis>
(64 bits) or even <emphasis>single</emphasis> (32
bits).
</para>

<para xml:lang="en">
That also means that the value must be moved
from the <acronym>TOS</acronym> into the memory,
and then back again. Alas, of all <acronym>FPU</acronym>
operations, the ones that access the computer
memory are the slowest.
</para>

<para xml:lang="en">
So, whenever programming the <acronym>FPU</acronym>
in assembly language, look for the ways of keeping
intermediate results on the <acronym>FPU</acronym>
stack.
</para>

<para xml:lang="en">
We can take that idea even further! In our
program we are using a <emphasis>constant</emphasis>
(the one we named <constant>PC</constant>).
</para>

<para xml:lang="en">
It does not matter how many pinhole diameters
we are calculating: 1, 10, 20,
1000, we are always using the same constant.
Therefore, we can optimize our program by keeping
the constant on the stack all the time.
</para>

<para xml:lang="en">
Early on in our program, we are calculating the
value of the above constant. We need to divide
our input by <constant>10</constant> for every digit in the
constant.
</para>

<para xml:lang="en">
It is much faster to multiply than to divide.
So, at the start of our program, we divide <constant>10</constant>
into <constant>1</constant> to obtain <constant>0.1</constant>, which we
then keep on the stack: Instead of dividing the
input by <constant>10</constant> for every digit,
we multiply it by <constant>0.1</constant>.
</para>

<para xml:lang="en">
By the way, we do not input <constant>0.1</constant> directly,
even though we could. We have a reason for that:
While <constant>0.1</constant> can be expressed with just one
decimal place, we do not know how many <emphasis>binary</emphasis>
places it takes. We, therefore, let the <acronym>FPU</acronym>
calculate its binary value to its own high precision.
</para>

<para xml:lang="en">
We are using other constants: We multiply the pinhole
diameter by <constant>1000</constant> to convert it from
millimeters to microns. We compare numbers to
<constant>10000</constant> when we are rounding them off to
four significant digits. So, we keep both, <constant>1000</constant>
and <constant>10000</constant>, on the stack. And, of course,
we reuse the <constant>0.1</constant> when rounding off numbers
to four digits.
</para>

<para xml:lang="en">
Last but not least, we keep <constant>-5</constant> on the stack.
We need it to scale the square of the f–number,
instead of dividing it by <constant>32</constant>. It is not
by coincidence we load this constant last. That makes
it the top of the stack when only the constants
are on it. So, when the square of the f–number is
being scaled, the <constant>-5</constant> is at <varname role="register">st(1)</varname>,
precisely where <function role="opcode">fscale</function> expects it to be.
</para>

<para xml:lang="en">
It is common to create certain constants from
scratch instead of loading them from the memory.
That is what we are doing with <constant>-5</constant>:
</para>

<programlisting xml:lang="en">
	fld1			; TOS =  1
	fadd	st0, st0	; TOS =  2
	fadd	st0, st0	; TOS =  4
	fld1			; TOS =  1
	faddp	st1, st0	; TOS =  5
	fchs			; TOS = -5
</programlisting>
<para xml:lang="en">
We can generalize all these optimizations into one rule:
<emphasis>Keep repeat values on the stack!</emphasis>
</para>

<tip>
<para xml:lang="en">
<emphasis><trademark class="registered">PostScript</trademark></emphasis> is a stack–oriented
programming language. There are many more books
available about <trademark class="registered">PostScript</trademark> than about the
<acronym>FPU</acronym> assembly language: Mastering
<trademark class="registered">PostScript</trademark> will help you master the <acronym>FPU</acronym>.
</para>
</tip>

</sect2>

<sect2 xml:id="x86-pinhole-the-code">
<title xml:lang="en"><application>pinhole</application>—The Code</title>
<programlisting xml:lang="en">
;;;;;;; pinhole.asm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Find various parameters of a pinhole camera construction and use
;
; Started:	 9-Jun-2001
; Updated:	10-Jun-2001
;
; Copyright (c) 2001 G. Adam Stanislav
; All rights reserved.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

%include	'system.inc'

%define	BUFSIZE	2048

section	.data
align 4
ten	dd	10
thousand	dd	1000
tthou	dd	10000
fd.in	dd	stdin
fd.out	dd	stdout
envar	db	'PINHOLE='	; Exactly 8 bytes, or 2 dwords long
pinhole	db	'04,', 		; Bender's constant (0.04)
connors	db	'037', 0Ah	; Connors' constant
usg	db	'Usage: pinhole [-b] [-c] [-e] [-p &lt;value&gt;] [-o &lt;outfile&gt;] [-i &lt;infile&gt;]', 0Ah
usglen	equ	$-usg
iemsg	db	"pinhole: Can't open input file", 0Ah
iemlen	equ	$-iemsg
oemsg	db	"pinhole: Can't create output file", 0Ah
oemlen	equ	$-oemsg
pinmsg	db	"pinhole: The PINHOLE constant must not be 0", 0Ah
pinlen	equ	$-pinmsg
toobig	db	"pinhole: The PINHOLE constant may not exceed 18 decimal places", 0Ah
biglen	equ	$-toobig
huhmsg	db	9, '???'
separ	db	9, '???'
sep2	db	9, '???'
sep3	db	9, '???'
sep4	db	9, '???', 0Ah
huhlen	equ	$-huhmsg
header	db	'focal length in millimeters,pinhole diameter in microns,'
	db	'F-number,normalized F-number,F-5.6 multiplier,stops '
	db	'from F-5.6', 0Ah
headlen	equ	$-header

section .bss
ibuffer	resb	BUFSIZE
obuffer	resb	BUFSIZE
dbuffer	resb	20		; decimal input buffer
bbuffer	resb	10		; BCD buffer

section	.text
align 4
huh:
	call	write
	push	dword huhlen
	push	dword huhmsg
	push	dword [fd.out]
	sys.write
	add	esp, byte 12
	ret

align 4
perr:
	push	dword pinlen
	push	dword pinmsg
	push	dword stderr
	sys.write
	push	dword 4		; return failure
	sys.exit

align 4
consttoobig:
	push	dword biglen
	push	dword toobig
	push	dword stderr
	sys.write
	push	dword 5		; return failure
	sys.exit

align 4
ierr:
	push	dword iemlen
	push	dword iemsg
	push	dword stderr
	sys.write
	push	dword 1		; return failure
	sys.exit

align 4
oerr:
	push	dword oemlen
	push	dword oemsg
	push	dword stderr
	sys.write
	push	dword 2
	sys.exit

align 4
usage:
	push	dword usglen
	push	dword usg
	push	dword stderr
	sys.write
	push	dword 3
	sys.exit

align 4
global	_start
_start:
	add	esp, byte 8	; discard argc and argv[0]
	sub	esi, esi

.arg:
	pop	ecx
	or	ecx, ecx
	je	near .getenv		; no more arguments

	; ECX contains the pointer to an argument
	cmp	byte [ecx], '-'
	jne	usage

	inc	ecx
	mov	ax, [ecx]
	inc	ecx

.o:
	cmp	al, 'o'
	jne	.i

	; Make sure we are not asked for the output file twice
	cmp	dword [fd.out], stdout
	jne	usage

	; Find the path to output file - it is either at [ECX+1],
	; i.e., -ofile --
	; or in the next argument,
	; i.e., -o file

	or	ah, ah
	jne	.openoutput
	pop	ecx
	jecxz	usage

.openoutput:
	push	dword 420	; file mode (644 octal)
	push	dword 0200h | 0400h | 01h
	; O_CREAT | O_TRUNC | O_WRONLY
	push	ecx
	sys.open
	jc	near oerr

	add	esp, byte 12
	mov	[fd.out], eax
	jmp	short .arg

.i:
	cmp	al, 'i'
	jne	.p

	; Make sure we are not asked twice
	cmp	dword [fd.in], stdin
	jne	near usage

	; Find the path to the input file
	or	ah, ah
	jne	.openinput
	pop	ecx
	or	ecx, ecx
	je near usage

.openinput:
	push	dword 0		; O_RDONLY
	push	ecx
	sys.open
	jc	near ierr		; open failed

	add	esp, byte 8
	mov	[fd.in], eax
	jmp	.arg

.p:
	cmp	al, 'p'
	jne	.c
	or	ah, ah
	jne	.pcheck

	pop	ecx
	or	ecx, ecx
	je	near usage

	mov	ah, [ecx]

.pcheck:
	cmp	ah, '0'
	jl	near usage
	cmp	ah, '9'
	ja	near usage
	mov	esi, ecx
	jmp	.arg

.c:
	cmp	al, 'c'
	jne	.b
	or	ah, ah
	jne	near usage
	mov	esi, connors
	jmp	.arg

.b:
	cmp	al, 'b'
	jne	.e
	or	ah, ah
	jne	near usage
	mov	esi, pinhole
	jmp	.arg

.e:
	cmp	al, 'e'
	jne	near usage
	or	ah, ah
	jne	near usage
	mov	al, ','
	mov	[huhmsg], al
	mov	[separ], al
	mov	[sep2], al
	mov	[sep3], al
	mov	[sep4], al
	jmp	.arg

align 4
.getenv:
	; If ESI = 0, we did not have a -p argument,
	; and need to check the environment for "PINHOLE="
	or	esi, esi
	jne	.init

	sub	ecx, ecx

.nextenv:
	pop	esi
	or	esi, esi
	je	.default	; no PINHOLE envar found

	; check if this envar starts with 'PINHOLE='
	mov	edi, envar
	mov	cl, 2		; 'PINHOLE=' is 2 dwords long
rep	cmpsd
	jne	.nextenv

	; Check if it is followed by a digit
	mov	al, [esi]
	cmp	al, '0'
	jl	.default
	cmp	al, '9'
	jbe	.init
	; fall through

align 4
.default:
	; We got here because we had no -p argument,
	; and did not find the PINHOLE envar.
	mov	esi, pinhole
	; fall through

align 4
.init:
	sub	eax, eax
	sub	ebx, ebx
	sub	ecx, ecx
	sub	edx, edx
	mov	edi, dbuffer+1
	mov	byte [dbuffer], '0'

	; Convert the pinhole constant to real
.constloop:
	lodsb
	cmp	al, '9'
	ja	.setconst
	cmp	al, '0'
	je	.processconst
	jb	.setconst

	inc	dl

.processconst:
	inc	cl
	cmp	cl, 18
	ja	near consttoobig
	stosb
	jmp	short .constloop

align 4
.setconst:
	or	dl, dl
	je	near perr

	finit
	fild	dword [tthou]

	fld1
	fild	dword [ten]
	fdivp	st1, st0

	fild	dword [thousand]
	mov	edi, obuffer

	mov	ebp, ecx
	call	bcdload

.constdiv:
	fmul	st0, st2
	loop	.constdiv

	fld1
	fadd	st0, st0
	fadd	st0, st0
	fld1
	faddp	st1, st0
	fchs

	; If we are creating a CSV file,
	; print header
	cmp	byte [separ], ','
	jne	.bigloop

	push	dword headlen
	push	dword header
	push	dword [fd.out]
	sys.write

.bigloop:
	call	getchar
	jc	near done

	; Skip to the end of the line if you got '#'
	cmp	al, '#'
	jne	.num
	call	skiptoeol
	jmp	short .bigloop

.num:
	; See if you got a number
	cmp	al, '0'
	jl	.bigloop
	cmp	al, '9'
	ja	.bigloop

	; Yes, we have a number
	sub	ebp, ebp
	sub	edx, edx

.number:
	cmp	al, '0'
	je	.number0
	mov	dl, 1

.number0:
	or	dl, dl		; Skip leading 0's
	je	.nextnumber
	push	eax
	call	putchar
	pop	eax
	inc	ebp
	cmp	ebp, 19
	jae	.nextnumber
	mov	[dbuffer+ebp], al

.nextnumber:
	call	getchar
	jc	.work
	cmp	al, '#'
	je	.ungetc
	cmp	al, '0'
	jl	.work
	cmp	al, '9'
	ja	.work
	jmp	short .number

.ungetc:
	dec	esi
	inc	ebx

.work:
	; Now, do all the work
	or	dl, dl
	je	near .work0

	cmp	ebp, 19
	jae	near .toobig

	call	bcdload

	; Calculate pinhole diameter

	fld	st0	; save it
	fsqrt
	fmul	st0, st3
	fld	st0
	fmul	st5
	sub	ebp, ebp

	; Round off to 4 significant digits
.diameter:
	fcom	st0, st7
	fstsw	ax
	sahf
	jb	.printdiameter
	fmul	st0, st6
	inc	ebp
	jmp	short .diameter

.printdiameter:
	call	printnumber	; pinhole diameter

	; Calculate F-number

	fdivp	st1, st0
	fld	st0

	sub	ebp, ebp

.fnumber:
	fcom	st0, st6
	fstsw	ax
	sahf
	jb	.printfnumber
	fmul	st0, st5
	inc	ebp
	jmp	short .fnumber

.printfnumber:
	call	printnumber	; F number

	; Calculate normalized F-number
	fmul	st0, st0
	fld1
	fld	st1
	fyl2x
	frndint
	fld1
	fscale
	fsqrt
	fstp	st1

	sub	ebp, ebp
	call	printnumber

	; Calculate time multiplier from F-5.6

	fscale
	fld	st0

	; Round off to 4 significant digits
.fmul:
	fcom	st0, st6
	fstsw	ax
	sahf

	jb	.printfmul
	inc	ebp
	fmul	st0, st5
	jmp	short .fmul

.printfmul:
	call	printnumber	; F multiplier

	; Calculate F-stops from 5.6

	fld1
	fxch	st1
	fyl2x

	sub	ebp, ebp
	call	printnumber

	mov	al, 0Ah
	call	putchar
	jmp	.bigloop

.work0:
	mov	al, '0'
	call	putchar

align 4
.toobig:
	call	huh
	jmp	.bigloop

align 4
done:
	call	write		; flush output buffer

	; close files
	push	dword [fd.in]
	sys.close

	push	dword [fd.out]
	sys.close

	finit

	; return success
	push	dword 0
	sys.exit

align 4
skiptoeol:
	; Keep reading until you come to cr, lf, or eof
	call	getchar
	jc	done
	cmp	al, 0Ah
	jne	.cr
	ret

.cr:
	cmp	al, 0Dh
	jne	skiptoeol
	ret

align 4
getchar:
	or	ebx, ebx
	jne	.fetch

	call	read

.fetch:
	lodsb
	dec	ebx
	clc
	ret

read:
	jecxz	.read
	call	write

.read:
	push	dword BUFSIZE
	mov	esi, ibuffer
	push	esi
	push	dword [fd.in]
	sys.read
	add	esp, byte 12
	mov	ebx, eax
	or	eax, eax
	je	.empty
	sub	eax, eax
	ret

align 4
.empty:
	add	esp, byte 4
	stc
	ret

align 4
putchar:
	stosb
	inc	ecx
	cmp	ecx, BUFSIZE
	je	write
	ret

align 4
write:
	jecxz	.ret	; nothing to write
	sub	edi, ecx	; start of buffer
	push	ecx
	push	edi
	push	dword [fd.out]
	sys.write
	add	esp, byte 12
	sub	eax, eax
	sub	ecx, ecx	; buffer is empty now
.ret:
	ret

align 4
bcdload:
	; EBP contains the number of chars in dbuffer
	push	ecx
	push	esi
	push	edi

	lea	ecx, [ebp+1]
	lea	esi, [dbuffer+ebp-1]
	shr	ecx, 1

	std

	mov	edi, bbuffer
	sub	eax, eax
	mov	[edi], eax
	mov	[edi+4], eax
	mov	[edi+2], ax

.loop:
	lodsw
	sub	ax, 3030h
	shl	al, 4
	or	al, ah
	mov	[edi], al
	inc	edi
	loop	.loop

	fbld	[bbuffer]

	cld
	pop	edi
	pop	esi
	pop	ecx
	sub	eax, eax
	ret

align 4
printnumber:
	push	ebp
	mov	al, [separ]
	call	putchar

	; Print the integer at the TOS
	mov	ebp, bbuffer+9
	fbstp	[bbuffer]

	; Check the sign
	mov	al, [ebp]
	dec	ebp
	or	al, al
	jns	.leading

	; We got a negative number (should never happen)
	mov	al, '-'
	call	putchar

.leading:
	; Skip leading zeros
	mov	al, [ebp]
	dec	ebp
	or	al, al
	jne	.first
	cmp	ebp, bbuffer
	jae	.leading

	; We are here because the result was 0.
	; Print '0' and return
	mov	al, '0'
	jmp	putchar

.first:
	; We have found the first non-zero.
	; But it is still packed
	test	al, 0F0h
	jz	.second
	push	eax
	shr	al, 4
	add	al, '0'
	call	putchar
	pop	eax
	and	al, 0Fh

.second:
	add	al, '0'
	call	putchar

.next:
	cmp	ebp, bbuffer
	jb	.done

	mov	al, [ebp]
	push	eax
	shr	al, 4
	add	al, '0'
	call	putchar
	pop	eax
	and	al, 0Fh
	add	al, '0'
	call	putchar

	dec	ebp
	jmp	short .next

.done:
	pop	ebp
	or	ebp, ebp
	je	.ret

.zeros:
	mov	al, '0'
	call	putchar
	dec	ebp
	jne	.zeros

.ret:
	ret
</programlisting>
<para xml:lang="en">
The code follows the same format as all the other
filters we have seen before, with one subtle
exception:
</para>

<blockquote>
<para xml:lang="en">
We are no longer assuming that the end of input
implies the end of things to do, something we
took for granted in the <emphasis>character–oriented</emphasis>
filters.
</para>

<para xml:lang="en">
This filter does not process characters. It
processes a <emphasis>language</emphasis>
(albeit a very simple
one, consisting only of numbers).
</para>

<para xml:lang="en">
When we have no more input, it can mean one
of two things:</para>

<itemizedlist><listitem>
<para xml:lang="en">
We are done and can quit. This is the
same as before.
</para>
</listitem>

<listitem>
<para xml:lang="en">
The last character we have read was a digit.
We have stored it at the end of our
<acronym>ASCII</acronym>–to–float conversion
buffer. We now need to convert
the contents of that buffer into a
number and write the last line of our
output.
</para>
</listitem>

</itemizedlist>
<para xml:lang="en">
For that reason, we have modified our <function>getchar</function>
and our <function>read</function> routines to return with
the <varname role="register">carry flag</varname> <emphasis>clear</emphasis> whenever we are
fetching another character from the input, or the
<varname role="register">carry flag</varname> <emphasis>set</emphasis> whenever there is no more
input.
</para>

<para xml:lang="en">
Of course, we are still using assembly language magic
to do that! Take a good look at <function>getchar</function>.
It <emphasis>always</emphasis> returns with the
<varname role="register">carry flag</varname> <emphasis>clear</emphasis>.
</para>

<para xml:lang="en">
Yet, our main code relies on the <varname role="register">carry
flag</varname> to tell it when to quit—and it works.
</para>

<para xml:lang="en">
The magic is in <function>read</function>. Whenever it
receives more input from the system, it just
returns to <function>getchar</function>, which
fetches a character from the input buffer,
<emphasis>clears</emphasis> the <varname role="register">carry flag</varname>
and returns.
</para>

<para xml:lang="en">
But when <function>read</function> receives no more
input from the system, it does <emphasis>not</emphasis>
return to <function>getchar</function> at all.
Instead, the <function role="opcode">add esp, byte 4</function>
op code adds <constant>4</constant> to <varname role="register">ESP</varname>,
<emphasis>sets</emphasis> the <varname role="register">carry
flag</varname>, and returns.
</para>

<para xml:lang="en">
So, where does it return to? Whenever a
program uses the <function role="opcode">call</function> op code,
the microprocessor <function role="opcode">push</function>es the
return address, i.e., it stores it on
the top of the stack (not the <acronym>FPU</acronym>
stack, the system stack, which is in the memory).
When a program uses the <function role="opcode">ret</function>
op code, the microprocessor <function role="opcode">pop</function>s
the return value from the stack, and jumps
to the address that was stored there.
</para>

<para xml:lang="en">
But since we added <constant>4</constant> to
<varname role="register">ESP</varname> (which is the stack
pointer register), we have effectively
given the microprocessor a minor case
of <emphasis>amnesia</emphasis>: It no longer
remembers it was <function>getchar</function>
that <function role="opcode">call</function>ed <function>read</function>.
</para>

<para xml:lang="en">
And since <function>getchar</function> never
<function role="opcode">push</function>ed anything before
<function role="opcode">call</function>ing <function>read</function>,
the top of the stack now contains the
return address to whatever or whoever
<function role="opcode">call</function>ed <function>getchar</function>.
As far as that caller is concerned,
he <function role="opcode">call</function>ed <function>getchar</function>,
which <function role="opcode">ret</function>urned with the
<varname role="register">carry flag</varname> set!
</para>

</blockquote>
<para xml:lang="en">
Other than that, the <function>bcdload</function>
routine is caught up in the middle of a
Lilliputian conflict between the Big–Endians
and the Little–Endians.
</para>

<para xml:lang="en">
It is converting the text representation
of a number into that number: The text
is stored in the big–endian order, but
the <emphasis>packed decimal</emphasis> is little–endian.
</para>

<para xml:lang="en">
To solve the conflict, we use the <function>std</function>
op code early on. We cancel it with <function>cld</function>
later on: It is quite important we do not
<function>call</function> anything that may depend on
the default setting of the <emphasis>direction
flag</emphasis> while <function>std</function> is active.
</para>

<para xml:lang="en">
Everything else in this code should be quite
clear, providing you have read the entire chapter
that precedes it.
</para>

<para xml:lang="en">
It is a classical example of the adage that
programming requires a lot of thought and only
a little coding. Once we have thought through every
tiny detail, the code almost writes itself.
</para>

</sect2>

<sect2 xml:id="x86-pinhole-using">
<title xml:lang="en">Using <application>pinhole</application></title>
<para xml:lang="en">
Because we have decided to make the program
<emphasis>ignore</emphasis> any input except for numbers
(and even those inside a comment), we can
actually perform <emphasis>textual queries</emphasis>.
We do not <emphasis>have to</emphasis>, but we <emphasis>can</emphasis>.
</para>

<para xml:lang="en">
In my humble opinion, forming a textual query,
instead of having to follow a very strict
syntax, makes software much more user friendly.
</para>

<para xml:lang="en">
Suppose we want to build a pinhole camera to use the
4x5 inch film. The standard focal
length for that film is about 150mm. We want
to <emphasis>fine–tune</emphasis> our focal length so the
pinhole diameter is as round a number as possible.
Let us also suppose we are quite comfortable with
cameras but somewhat intimidated by computers.
Rather than just have to type in a bunch of numbers,
we want to <emphasis>ask</emphasis> a couple of questions.
</para>

<para xml:lang="en">
Our session might look like this:</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>pinhole

Computer,

What size pinhole do I need for the focal length of 150?</userinput>
150	490	306	362	2930	12
<userinput>Hmmm... How about 160?</userinput>
160	506	316	362	3125	12
<userinput>Let's make it 155, please.</userinput>
155	498	311	362	3027	12
<userinput>Ah, let's try 157...</userinput>
157	501	313	362	3066	12
<userinput>156?</userinput>
156	500	312	362	3047	12
<userinput>That's it! Perfect! Thank you very much!
^D</userinput></screen>
<para xml:lang="en">
We have found that while for the focal length
of 150, our pinhole diameter should be 490
microns, or 0.49 mm, if we go with the almost
identical focal length of 156 mm, we can
get away with a pinhole diameter of exactly
one half of a millimeter.
</para>

</sect2>

<sect2 xml:id="x86-pinhole-scripting">
<title xml:lang="en">Scripting</title>
<para xml:lang="en">
Because we have chosen the <constant>#</constant>
character to denote the start of a comment,
we can treat our <application>pinhole</application>
software as a <emphasis>scripting language</emphasis>.
</para>

<para xml:lang="en">
You have probably seen <application>shell</application>
<emphasis>scripts</emphasis> that start with:</para>

<programlisting xml:lang="en">
#! /bin/sh
</programlisting>
<para xml:lang="en">
...or...</para>

<programlisting xml:lang="en">
#!/bin/sh
</programlisting> <para xml:lang="en">
...because the blank space after the <function>#!</function>
is optional.
</para>

<para xml:lang="en">
Whenever <trademark class="registered">UNIX</trademark> is asked to run an executable
file which starts with the <function>#!</function>,
it assumes the file is a script. It adds the
command to the rest of the first line of the
script, and tries to execute that.
</para>

<para xml:lang="en">
Suppose now that we have installed <application>pinhole</application>
in <application>/usr/local/bin/</application>, we can now
write a script to calculate various pinhole
diameters suitable for various focal lengths
commonly used with the 120 film.</para>

<para xml:lang="en">
The script might look something like this:</para>

<programlisting xml:lang="en">
#! /usr/local/bin/pinhole -b -i
# Find the best pinhole diameter
# for the 120 film

### Standard
80

### Wide angle
30, 40, 50, 60, 70

### Telephoto
100, 120, 140
</programlisting>
<para xml:lang="en">
Because 120 is a medium size film,
we may name this file <application>medium</application>.
</para>

<para xml:lang="en">
We can set its permissions to execute,
and run it as if it were a program:
</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>chmod 755 medium</userinput>
<prompt>%</prompt> <userinput>./medium</userinput></screen>
<para xml:lang="en">
<trademark class="registered">UNIX</trademark> will interpret that last command as:</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>/usr/local/bin/pinhole -b -i ./medium</userinput></screen>
<para xml:lang="en">
It will run that command and display:
</para>

<screen xml:lang="en">80	358	224	256	1562	11
30	219	137	128	586	9
40	253	158	181	781	10
50	283	177	181	977	10
60	310	194	181	1172	10
70	335	209	181	1367	10
100	400	250	256	1953	11
120	438	274	256	2344	11
140	473	296	256	2734	11</screen>
<para xml:lang="en">

Now, let us enter:</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>./medium -c</userinput></screen>
<para xml:lang="en">
<trademark class="registered">UNIX</trademark> will treat that as:</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>/usr/local/bin/pinhole -b -i ./medium -c</userinput></screen>
<para xml:lang="en">
That gives it two conflicting options:
<parameter>-b</parameter> and <parameter>-c</parameter>
(Use Bender's constant and use Connors'
constant). We have programmed it so
later options override early ones—our
program will calculate everything
using Connors' constant:
</para>

<screen xml:lang="en">80	331	242	256	1826	11
30	203	148	128	685	9
40	234	171	181	913	10
50	262	191	181	1141	10
60	287	209	181	1370	10
70	310	226	256	1598	11
100	370	270	256	2283	11
120	405	296	256	2739	11
140	438	320	362	3196	12</screen>
<para xml:lang="en">
We decide we want to go with Bender's
constant after all. We want to save its
values as a comma–separated file:
</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>./medium -b -e &gt; bender</userinput>
<prompt>%</prompt> <userinput>cat bender</userinput>
focal length in millimeters,pinhole diameter in microns,F-number,normalized F-number,F-5.6 multiplier,stops from F-5.6
80,358,224,256,1562,11
30,219,137,128,586,9
40,253,158,181,781,10
50,283,177,181,977,10
60,310,194,181,1172,10
70,335,209,181,1367,10
100,400,250,256,1953,11
120,438,274,256,2344,11
140,473,296,256,2734,11
<prompt>%</prompt></screen>
</sect2>

</sect1>

<sect1 xml:id="x86-caveats">
<title xml:lang="en">Caveats</title>

<para xml:lang="en">
Assembly language programmers who "grew up" under
<acronym><trademark class="registered">MS-DOS</trademark></acronym> and <trademark class="registered">Windows</trademark> often tend to take shortcuts.
Reading the keyboard scan codes and writing directly to video
memory are two classical examples of practices which, under
<acronym><trademark class="registered">MS-DOS</trademark></acronym> are not frowned upon but considered the
right thing to do.
</para>

<para xml:lang="en">
The reason? Both the <acronym>PC BIOS</acronym> and
<acronym><trademark class="registered">MS-DOS</trademark></acronym> are notoriously
slow when performing these operations.
</para>

<para xml:lang="en">
You may be tempted to continue similar practices in the
<trademark class="registered">UNIX</trademark> environment. For example, I have seen a web site which
explains how to access the keyboard scan codes on a popular <trademark class="registered">UNIX</trademark> clone.
</para>

<para xml:lang="en">
That is generally a <emphasis>very bad idea</emphasis>
in <trademark class="registered">UNIX</trademark> environment! Let me explain why.
</para>

<sect2 xml:id="x86-protected">
<title xml:lang="en"><trademark class="registered">UNIX</trademark> Is Protected</title>

<para xml:lang="en">
For one thing, it may simply not be possible. <trademark class="registered">UNIX</trademark> runs in
protected mode. Only the kernel and device drivers are allowed
to access hardware directly. Perhaps a particular <trademark class="registered">UNIX</trademark> clone
will let you read the keyboard scan codes, but chances are a real
<trademark class="registered">UNIX</trademark> operating system will not. And even if one version may let you
do it, the next one may not, so your carefully crafted software may
become a dinosaur overnight.
</para>

</sect2>

<sect2 xml:id="x86-abstraction">
<title xml:lang="en"><trademark class="registered">UNIX</trademark> Is an Abstraction</title>

<para xml:lang="en">
But there is a much more important reason not to try
accessing the hardware directly (unless, of course,
you are writing a device driver), even on the <trademark class="registered">UNIX</trademark> like
systems that let you do it:
</para>

<para xml:lang="en">
<emphasis><trademark class="registered">UNIX</trademark> is an abstraction!
</emphasis></para>

<para xml:lang="en">
There is a major difference in the philosophy of design
between <acronym><trademark class="registered">MS-DOS</trademark></acronym> and <trademark class="registered">UNIX</trademark>.
<acronym><trademark class="registered">MS-DOS</trademark></acronym> was designed as a single-user
system. It is run on a computer with a keyboard and a video
screen attached directly to that computer. User input is almost
guaranteed to come from that keyboard. Your program's output
virtually always ends up on that screen.
</para>

<para xml:lang="en">
This is NEVER guaranteed under <trademark class="registered">UNIX</trademark>. It is quite common
for a <trademark class="registered">UNIX</trademark> user to pipe and redirect program input and output:
</para>

<screen xml:lang="en"><prompt>%</prompt> <userinput>program1 | program2 | program3 &gt; file1</userinput></screen>

<para xml:lang="en">
If you have written <application>program2</application>, your input
does not come from the keyboard but from the output of
<application>program1</application>. Similarly, your output does not
go to the screen but becomes the input for
<application>program3</application> whose output, in turn,
goes to <filename>file1</filename>.
</para>

<para xml:lang="en">
But there is more! Even if you made sure that your input comes
from, and your output goes to, the terminal, there is no guarantee
the terminal is a PC: It may not have its video memory
where you expect it, nor may its keyboard be producing
<acronym>PC</acronym>-style scan codes. It may be a <trademark class="registered">Macintosh</trademark>,
or any other computer.
</para>

<para xml:lang="en">
Now you may be shaking your head: My software is in
<acronym>PC</acronym> assembly language, how can
it run on a <trademark class="registered">Macintosh</trademark>? But I did not say your software
would be running on a <trademark class="registered">Macintosh</trademark>, only that its terminal
may be a <trademark class="registered">Macintosh</trademark>.
</para>

<para xml:lang="en">
Under <trademark class="registered">UNIX</trademark>, the terminal does not have to be directly
attached to the computer that runs your software, it can
even be on another continent, or, for that matter, on another
planet. It is perfectly possible that a <trademark class="registered">Macintosh</trademark> user in
Australia connects to a <trademark class="registered">UNIX</trademark> system in North America (or
anywhere else) via <application>telnet</application>. The
software then runs on one computer, while the terminal is
on a different computer: If you try to read the scan codes,
you will get the wrong input!
</para>

<para xml:lang="en">
Same holds true about any other hardware: A file you are reading
may be on a disk you have no direct access to. A camera you are
reading images from may be on a space shuttle, connected to you
via satellites.
</para>

<para xml:lang="en">
That is why under <trademark class="registered">UNIX</trademark> you must never make any assumptions about
where your data is coming from and going to. Always let the
system handle the physical access to the hardware.
</para>

<note>
<para xml:lang="en">
These are caveats, not absolute rules. Exceptions are possible.
For example, if a text editor has determined it is running
on a local machine, it may want to read the scan codes
directly for improved control. I am not mentioning these caveats
to tell you what to do or what not to do, just to make you aware
of certain pitfalls that await you if you have just arrived to <trademark class="registered">UNIX</trademark>
form <acronym><trademark class="registered">MS-DOS</trademark></acronym>. Of course, creative people often break
rules, and it is OK as long as they know they are breaking
them and why.
</para>
</note>

</sect2>

</sect1>


<sect1 xml:id="x86-acknowledgements">
<title xml:lang="en">Acknowledgements</title>

<para xml:lang="en">
This tutorial would never have been possible without the
help of many experienced FreeBSD programmers from the
<link xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-hackers">FreeBSD technical discussions mailing list</link>, many of whom have patiently
answered my questions, and pointed me in the right direction
in my attempts to explore the inner workings of <trademark class="registered">UNIX</trademark>
system programming in general and FreeBSD in particular.
</para>

<para xml:lang="en">
Thomas M. Sommers opened the door for me. His <link xlink:href="https://web.archive.org/web/20090914064615/http://www.codebreakers-journal.com/content/view/262/27">How
do I write "Hello, world" in FreeBSD assembler?</link>
web page was my first encounter with an example of
assembly language programming under FreeBSD.
</para>

<para xml:lang="en">
Jake Burkholder has kept the door open by willingly
answering all of my questions and supplying me with
example assembly language source code.
</para>

<para xml:lang="en">
Copyright © 2000-2001 G. Adam Stanislav. All rights reserved.
</para>

</sect1>


</chapter>


  </part>

  <part xml:id="appendices">
    <title xml:lang="en">Appendices</title>

      <bibliography>

      <biblioentry xml:id="COD" xreflabel="1">
        <authorgroup>
          <author xml:lang="en"><personname><firstname>Dave</firstname><othername role="MI">A</othername><surname>Patterson</surname></personname></author>
          <author xml:lang="en"><personname><firstname>John</firstname><othername role="MI">L</othername><surname>Hennessy</surname></personname></author>
        </authorgroup>
        <copyright xml:lang="en"><year>1998</year><holder>Morgan Kaufmann Publishers,
        Inc.</holder></copyright>
        <biblioid class="isbn" xml:lang="en">1-55860-428-6</biblioid>
        <publisher>
          <publishername xml:lang="en">Morgan Kaufmann Publishers, Inc.</publishername>
        </publisher>
        <citetitle xml:lang="en">Computer Organization and Design</citetitle>
        <subtitle xml:lang="en">The Hardware / Software Interface</subtitle>
        <pagenums xml:lang="en">1-2</pagenums>
      </biblioentry>

      <biblioentry xreflabel="2">
        <authorgroup>
          <author xml:lang="en"><personname><firstname>W.</firstname><othername role="Middle">Richard</othername><surname>Stevens</surname></personname></author>
        </authorgroup>
        <copyright xml:lang="en"><year>1993</year><holder>Addison Wesley Longman,
        Inc.</holder></copyright>
        <biblioid class="isbn" xml:lang="en">0-201-56317-7</biblioid>
        <publisher>
          <publishername xml:lang="en">Addison Wesley Longman, Inc.</publishername>
        </publisher>
        <citetitle xml:lang="en">Advanced Programming in the Unix Environment</citetitle>
        <pagenums xml:lang="en">1-2</pagenums>
      </biblioentry>

      <biblioentry xreflabel="3">
        <authorgroup>
          <author xml:lang="en"><personname><firstname>Marshall</firstname><othername role="Middle">Kirk</othername><surname>McKusick</surname></personname></author>
          <author xml:lang="en"><personname><firstname>George</firstname><surname>Neville-Neil</surname></personname></author>
        </authorgroup>
        <copyright xml:lang="en"><year>2004</year><holder>Addison-Wesley</holder></copyright>
        <biblioid class="isbn" xml:lang="en">0-201-70245-2</biblioid>
        <publisher>
          <publishername xml:lang="en">Addison-Wesley</publishername>
        </publisher>
        <citetitle xml:lang="en">The Design and Implementation of the FreeBSD Operating System</citetitle>
        <pagenums xml:lang="en">1-2</pagenums>
      </biblioentry>

      <biblioentry xml:id="Phrack" xreflabel="4">
        <authorgroup>
          <author xml:lang="en"><personname><firstname>Aleph</firstname><surname>One</surname></personname></author>
        </authorgroup>
        <citetitle xml:lang="en">Phrack 49; "Smashing the Stack for Fun and Profit"</citetitle>
      </biblioentry>

      <biblioentry xml:id="StackGuard" xreflabel="5">
        <authorgroup>
          <author xml:lang="en"><personname><firstname>Chrispin</firstname><surname>Cowan</surname></personname></author>
          <author xml:lang="en"><personname><firstname>Calton</firstname><surname>Pu</surname></personname></author>
          <author xml:lang="en"><personname><firstname>Dave</firstname><surname>Maier</surname></personname></author>
        </authorgroup>
        <citetitle xml:lang="en">StackGuard; Automatic Adaptive Detection and Prevention of
        Buffer-Overflow Attacks</citetitle>
      </biblioentry>

      <biblioentry xml:id="OpenBSD" xreflabel="6">
        <authorgroup>
	  <author xml:lang="en"><personname><firstname>Todd</firstname><surname>Miller</surname></personname></author>
	  <author xml:lang="en"><personname><firstname>Theo</firstname><surname>de Raadt</surname></personname></author>
	</authorgroup>
	<citetitle xml:lang="en">strlcpy and strlcat -- consistent, safe string copy and
	concatenation.</citetitle>
      </biblioentry>

      </bibliography>

  </part>

  <index/>

</book>
