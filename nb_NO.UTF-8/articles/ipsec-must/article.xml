<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//FreeBSD//DTD DocBook XML V5.0-Based Extension//EN" "http://www.FreeBSD.org/XML/share/xml/freebsd50.dtd">
<!--
    The FreeBSD Documentation Project

    $FreeBSD: head/en_US.ISO8859-1/articles/ipsec-must/article.xml 52227 2018-09-06 01:30:47Z ebrandi $
-->
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:its="http://www.w3.org/2005/11/its" version="5.0" xml:lang="nb_NO">
  <info><title xml:lang="en">Independent Verification of IPsec Functionality in FreeBSD</title>
    

    <author xml:lang="en"><personname><firstname>David</firstname><surname>Honig</surname></personname><affiliation>
        <address xml:lang="en"><email>honig@sprynet.com</email></address>
      </affiliation></author>

    <pubdate xml:lang="en">1999-05-03</pubdate>

    <legalnotice xml:id="trademarks" role="trademarks">
      <para xml:lang="en">FreeBSD is a registered trademark of
  the FreeBSD Foundation.</para>
      <para xml:lang="en">Motif, OSF/1, and UNIX are
  registered trademarks and IT DialTone and The Open Group are
  trademarks of The Open Group in the United States and other
  countries.</para>
      <para xml:lang="en">Many of the designations used by
  manufacturers and sellers to distinguish their products are claimed
  as trademarks.  Where those designations appear in this document,
  and the FreeBSD Project was aware of the trademark claim, the
  designations have been followed by the <quote>™</quote> or the
  <quote>®</quote> symbol.</para>
    </legalnotice>

    <releaseinfo xml:lang="en">$FreeBSD: head/en_US.ISO8859-1/articles/ipsec-must/article.xml 52227 2018-09-06 01:30:47Z ebrandi $</releaseinfo>

    <abstract>
      <para xml:lang="en">You installed IPsec and it seems to be working. How do you
        know?  I describe a method for experimentally verifying that IPsec is
        working.</para>
    </abstract>
  </info>

  <sect1 xml:id="problem">
    <title xml:lang="en">The Problem</title>

    <para xml:lang="en">First, lets assume you have <link linkend="ipsec-install">
      installed <emphasis>IPsec</emphasis></link>.  How do you know
      it is <link linkend="caveat">working</link>?  Sure, your
      connection will not work if it is misconfigured, and it will work
      when you finally get it right.  <citerefentry><refentrytitle>netstat</refentrytitle><manvolnum>1</manvolnum></citerefentry> will list it.
      But can you independently confirm it?</para>
  </sect1>

  <sect1 xml:id="solution">
    <title xml:lang="en">The Solution</title>

    <para xml:lang="en">First, some crypto-relevant info theory:</para>

    <orderedlist>
      <listitem>
	<para xml:lang="en">Encrypted data is uniformly distributed, i.e., has maximal
	  entropy per symbol;</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Raw, uncompressed data is typically redundant, i.e., has
	  sub-maximal entropy.</para>
      </listitem>
    </orderedlist>

    <para xml:lang="en">Suppose you could measure the entropy of the data to- and
      from- your network interface.  Then you could see the difference
      between unencrypted data and encrypted data.  This would be true
      even if some of the data in <quote>encrypted mode</quote> was
      not encrypted---as the outermost IP header must be if the
      packet is to be routable.</para>

    <sect2 xml:id="MUST">
      <title xml:lang="en">MUST</title>

      <para xml:lang="en">Ueli Maurer's <quote>Universal Statistical Test for Random
	Bit Generators</quote>(<link xlink:href="https://web.archive.org/web/20011115002319/http://www.geocities.com/SiliconValley/Code/4704/universal.pdf">
	<acronym>MUST</acronym></link>) quickly measures the entropy
	of a sample.  It uses a compression-like algorithm.  <link linkend="code">The code is given below</link> for a variant
	which measures successive (~quarter megabyte) chunks of a
	file.</para>
    </sect2>

    <sect2 xml:id="tcpdump">
      <title xml:lang="en">Tcpdump</title>

      <para xml:lang="en">We also need a way to capture the raw network data.  A
	program called <citerefentry><refentrytitle>tcpdump</refentrytitle><manvolnum>1</manvolnum></citerefentry> lets you do this, if you have
	enabled the <emphasis>Berkeley Packet Filter</emphasis>
	interface in your <link linkend="kernel">kernel's config
	file</link>.</para>

      <para xml:lang="en">The command:</para>

      <screen xml:lang="en"><userinput>tcpdump -c 4000 -s 10000 -w <replaceable>dumpfile.bin</replaceable></userinput></screen>

      <para xml:lang="en">will capture 4000 raw packets to
      <replaceable>dumpfile.bin</replaceable>.  Up to 10,000 bytes per
      packet will be captured in this example.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="experiment">
    <title xml:lang="en">The Experiment</title>

    <para xml:lang="en">Here is the experiment:</para>

    <procedure>
      <step>
	<para xml:lang="en">Open a window to an IPsec host and another window to an
	  insecure host.</para>
      </step>

      <step>
	<para xml:lang="en">Now start <link linkend="tcpdump">capturing
	  packets</link>.</para>
      </step>

      <step>
	<para xml:lang="en">In the <quote>secure</quote> window, run the <trademark class="registered">UNIX</trademark>
	  command <citerefentry><refentrytitle>yes</refentrytitle><manvolnum>1</manvolnum></citerefentry>, which will stream the <literal>y</literal>
	  character.  After a while, stop this.  Switch to the
	  insecure window, and repeat.  After a while, stop.</para>
      </step>

      <step>
	<para xml:lang="en">Now run <link linkend="code">MUST</link> on the
	  captured packets.  You should see something like the
	  following.  The important thing to note is that the secure
	  connection has 93% (6.7) of the expected value (7.18), and
	  the <quote>normal</quote> connection has 29% (2.1) of the
	  expected value.</para>

    <screen xml:lang="en"><prompt>%</prompt> <userinput>tcpdump -c 4000 -s 10000 -w <replaceable>ipsecdemo.bin</replaceable></userinput>
<prompt>%</prompt> <userinput>uliscan <replaceable>ipsecdemo.bin</replaceable></userinput>

Uliscan 21 Dec 98
L=8 256 258560
Measuring file ipsecdemo.bin
Init done
Expected value for L=8 is 7.1836656
6.9396 --------------------------------------------------------
6.6177 -----------------------------------------------------
6.4100 ---------------------------------------------------
2.1101 -----------------
2.0838 -----------------
2.0983 -----------------</screen>
      </step>
    </procedure>
  </sect1>

    <sect1 xml:id="caveat">
      <title xml:lang="en">Caveat</title>

    <para xml:lang="en">This experiment shows that IPsec <emphasis>does</emphasis>
      seem to be distributing the payload data
      <emphasis>uniformly</emphasis>, as encryption should.  However,
      the experiment described here <emphasis>cannot</emphasis>
      detect many possible flaws in a system (none of which do I have
      any evidence for).  These include poor key generation or
      exchange, data or keys being visible to others, use of weak
      algorithms, kernel subversion, etc.  Study the source; know the
      code.</para>
  </sect1>

  <sect1 xml:id="IPsec">
    <title xml:lang="en">IPsec---Definition</title>

    <para xml:lang="en">Internet Protocol security extensions to IPv4; required for
      IPv6.  A protocol for negotiating encryption and authentication
      at the IP (host-to-host) level.  SSL secures only one application
      socket; <application>SSH</application> secures only a login;
      <application>PGP</application> secures only a specified file or
      message.  IPsec encrypts everything between two hosts.</para>
  </sect1>

  <sect1 xml:id="ipsec-install">
    <title xml:lang="en">Installing IPsec</title>

    <para xml:lang="en">Most of the modern versions of FreeBSD have IPsec support
      in their base source.  So you will need to include the
      <option>IPSEC</option> option in your kernel config and, after
      kernel rebuild and reinstall, configure IPsec connections using
      <citerefentry><refentrytitle>setkey</refentrytitle><manvolnum>8</manvolnum></citerefentry> command.</para>

    <para xml:lang="en">A comprehensive guide on running IPsec on FreeBSD is
      provided in <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/books/handbook/ipsec.html">FreeBSD
      Handbook</link>.</para>
  </sect1>

  <sect1 xml:id="kernel">
    <title xml:lang="en">src/sys/i386/conf/KERNELNAME</title>

    <para xml:lang="en">This needs to be present in the kernel config file in order
      to capture network data with <citerefentry><refentrytitle>tcpdump</refentrytitle><manvolnum>1</manvolnum></citerefentry>.  Be sure
      to run <citerefentry><refentrytitle>config</refentrytitle><manvolnum>8</manvolnum></citerefentry> after adding this, and rebuild and
      reinstall.</para>

    <programlisting xml:lang="en">device	bpf</programlisting>
  </sect1>

    <sect1 xml:id="code">
      <title xml:lang="en">Maurer's Universal Statistical Test (for block size=8
        bits)</title>

        <para xml:lang="en">You can find the same code at <link xlink:href="https://web.archive.org/web/20031204230654/http://www.geocities.com:80/SiliconValley/Code/4704/uliscanc.txt">
          this link</link>.</para>

<programlisting xml:lang="en">/*
  ULISCAN.c   ---blocksize of 8

  1 Oct 98
  1 Dec 98
  21 Dec 98       uliscan.c derived from ueli8.c

  This version has // comments removed for Sun cc

  This implements Ueli M Maurer's "Universal Statistical Test for Random
  Bit Generators" using L=8

  Accepts a filename on the command line; writes its results, with other
  info, to stdout.

  Handles input file exhaustion gracefully.

  Ref: J. Cryptology v 5 no 2, 1992 pp 89-105
  also on the web somewhere, which is where I found it.

  -David Honig
  honig@sprynet.com

  Usage:
  ULISCAN filename
  outputs to stdout
*/

#define L 8
#define V (1&lt;&lt;L)
#define Q (10*V)
#define K (100   *Q)
#define MAXSAMP (Q + K)

#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

int main(argc, argv)
int argc;
char **argv;
{
  FILE *fptr;
  int i,j;
  int b, c;
  int table[V];
  double sum = 0.0;
  int iproduct = 1;
  int run;

  extern double   log(/* double x */);

  printf("Uliscan 21 Dec 98 \nL=%d %d %d \n", L, V, MAXSAMP);

  if (argc &lt; 2) {
    printf("Usage: Uliscan filename\n");
    exit(-1);
  } else {
    printf("Measuring file %s\n", argv[1]);
  }

  fptr = fopen(argv[1],"rb");

  if (fptr == NULL) {
    printf("Can't find %s\n", argv[1]);
    exit(-1);
  }

  for (i = 0; i &lt; V; i++) {
    table[i] = 0;
  }

  for (i = 0; i &lt; Q; i++) {
    b = fgetc(fptr);
    table[b] = i;
  }

  printf("Init done\n");

  printf("Expected value for L=8 is 7.1836656\n");

  run = 1;

  while (run) {
    sum = 0.0;
    iproduct = 1;

    if (run)
      for (i = Q; run &amp;&amp; i &lt; Q + K; i++) {
        j = i;
        b = fgetc(fptr);

        if (b &lt; 0)
          run = 0;

        if (run) {
          if (table[b] &gt; j)
            j += K;

          sum += log((double)(j-table[b]));

          table[b] = i;
        }
      }

    if (!run)
      printf("Premature end of file; read %d blocks.\n", i - Q);

    sum = (sum/((double)(i - Q))) /  log(2.0);
    printf("%4.4f ", sum);

    for (i = 0; i &lt; (int)(sum*8.0 + 0.50); i++)
      printf("-");

    printf("\n");

    /* refill initial table */
    if (0) {
      for (i = 0; i &lt; Q; i++) {
        b = fgetc(fptr);
        if (b &lt; 0) {
          run = 0;
        } else {
          table[b] = i;
        }
      }
    }
  }
}</programlisting>
  </sect1>
</article>
