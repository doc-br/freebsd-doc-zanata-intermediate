<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//FreeBSD//DTD DocBook XML V5.0-Based Extension//EN" "http://www.FreeBSD.org/XML/share/xml/freebsd50.dtd">
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:its="http://www.w3.org/2005/11/its" version="5.0" xml:lang="nb_NO"> <info>
    <title xml:lang="en">Introduction to NanoBSD</title>

    <authorgroup>
      <author xml:lang="en"><personname><firstname>Daniel</firstname><surname>Gerzo</surname></personname></author>
    </authorgroup>

    <copyright xml:lang="en">
      <year>2006</year>
      <holder>The FreeBSD Documentation Project</holder>
    </copyright>

    <legalnotice xml:id="trademarks" role="trademarks">
      <para xml:lang="en">FreeBSD is a registered trademark of
  the FreeBSD Foundation.</para>
      <para xml:lang="en">Many of the designations used by
  manufacturers and sellers to distinguish their products are claimed
  as trademarks.  Where those designations appear in this document,
  and the FreeBSD Project was aware of the trademark claim, the
  designations have been followed by the <quote>™</quote> or the
  <quote>®</quote> symbol.</para>
    </legalnotice>

    <pubdate xml:lang="en">$FreeBSD: head/en_US.ISO8859-1/articles/nanobsd/article.xml 52722 2018-12-24 19:45:39Z crees $</pubdate>

    <releaseinfo xml:lang="en">$FreeBSD: head/en_US.ISO8859-1/articles/nanobsd/article.xml 52722 2018-12-24 19:45:39Z crees $</releaseinfo>

    <abstract>
      <para xml:lang="en">This document provides information about the
	<application>NanoBSD</application> tools, which can be used to
	create FreeBSD system images for embedded applications, suitable
	for use on a Compact Flash card (or other mass storage
	medium).</para>
    </abstract>
  </info>

  <sect1 xml:id="intro">
    <title xml:lang="en">Introduction to NanoBSD</title>

    <indexterm xml:lang="en"><primary>NanoBSD</primary></indexterm>

    <para xml:lang="en"><application>NanoBSD</application> is a tool currently
      developed by Poul-Henning Kamp <email>phk@FreeBSD.org</email>.  It creates a FreeBSD system image for
      embedded applications, suitable for use on a Compact Flash card
      (or other mass storage medium).</para>

    <para xml:lang="en">It can be used to build specialized install images, designed
      for easy installation and maintenance of systems commonly called
      <quote>computer appliances</quote>.  Computer appliances have
      their hardware and software bundled in the product, which means
      all applications are pre-installed.  The appliance is plugged
      into an existing network and can begin working (almost)
      immediately.</para>

    <para xml:lang="en">The features of <application>NanoBSD</application>
      include:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en">Ports and packages work as in FreeBSD — Every single
	  application can be installed and used in a
	  <application>NanoBSD</application> image, the same way as in
	  FreeBSD.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">No missing functionality — If it is possible to do
	  something with FreeBSD, it is possible to do the same thing
	  with <application>NanoBSD</application>, unless the specific
	  feature or features were explicitly removed from the
	  <application>NanoBSD</application> image when it was
	  created.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Everything is read-only at run-time — It is safe
	  to pull the power-plug.  There is no necessity to run
	  <citerefentry><refentrytitle>fsck</refentrytitle><manvolnum>8</manvolnum></citerefentry> after a non-graceful shutdown of the
	  system.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Easy to build and customize — Making use of just
	  one shell script and one configuration file it is possible
	  to build reduced and customized images satisfying any
	  arbitrary set of requirements.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 xml:id="howto">
    <title xml:lang="en">NanoBSD Howto</title>

    <sect2 xml:id="design">
      <title xml:lang="en">The Design of NanoBSD</title>

      <para xml:lang="en">Once the image is present on the medium, it is possible to
	boot <application>NanoBSD</application>.  The mass storage
	medium is divided into three parts by default:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en">Two image partitions: <literal>code#1</literal>
	    and <literal>code#2</literal>.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">The configuration file partition, which can be mounted
	    under the <filename>/cfg</filename> directory
	    at run time.</para>
	</listitem>
      </itemizedlist>

      <para xml:lang="en">These partitions are normally mounted read-only.</para>

      <para xml:lang="en">The <filename>/etc</filename> and
	<filename>/var</filename> directories are
	<citerefentry><refentrytitle>md</refentrytitle><manvolnum>4</manvolnum></citerefentry> (malloc) disks.</para>

      <para xml:lang="en">The configuration file partition persists under the
	<filename>/cfg</filename> directory.  It
	contains files for <filename>/etc</filename>
	directory and is briefly mounted read-only right after the
	system boot, therefore it is required to copy modified files
	from <filename>/etc</filename> back to the
	<filename>/cfg</filename> directory if changes
	are expected to persist after the system restarts.</para>

      <example>
	<title xml:lang="en">Making Persistent Changes to
	  <filename>/etc/resolv.conf</filename></title>

	<screen xml:lang="en"><prompt>#</prompt> <userinput>vi /etc/resolv.conf</userinput>
[...]
<prompt>#</prompt> <userinput>mount /cfg</userinput>
<prompt>#</prompt> <userinput>cp /etc/resolv.conf /cfg</userinput>
<prompt>#</prompt> <userinput>umount /cfg</userinput></screen>
      </example>

      <note>
	<para xml:lang="en">The partition containing
	  <filename>/cfg</filename> should be mounted
	  only at boot time and while overriding the configuration
	  files.</para>

	<para xml:lang="en">Keeping <filename>/cfg</filename> mounted at all times
	  is not a good idea, especially if the
	  <application>NanoBSD</application> system runs off a mass
	  storage medium that may be adversely affected by a large
	  number of writes to the partition (like when the filesystem
	  syncer flushes data to the system disks).</para>
      </note>
    </sect2>

    <sect2>
      <title xml:lang="en">Building a NanoBSD Image</title>

      <para xml:lang="en">A <application>NanoBSD</application> image is built using
	a simple <filename>nanobsd.sh</filename> shell script, which
	can be found in the
	<filename><replaceable>/usr</replaceable>/src/tools/tools/nanobsd</filename>
	directory.  This script creates an image, which can be copied
	on the storage medium using the <citerefentry><refentrytitle>dd</refentrytitle><manvolnum>1</manvolnum></citerefentry> utility.</para>

      <para xml:lang="en">The necessary commands to build a
	<application>NanoBSD</application> image are:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>cd /usr/src/tools/tools/nanobsd</userinput> <co xml:id="nbsd-cd"/>
<prompt>#</prompt> <userinput>sh nanobsd.sh</userinput> <co xml:id="nbsd-sh"/>
<prompt>#</prompt> <userinput>cd /usr/obj/nanobsd.full</userinput> <co xml:id="nbsd-cd2"/>
<prompt>#</prompt> <userinput>dd if=_.disk.full of=/dev/da0 bs=64k</userinput> <co xml:id="nbsd-dd"/></screen>

      <calloutlist>
	<callout arearefs="nbsd-cd">
	  <para xml:lang="en">Change the current directory to the base directory of
	    the <application>NanoBSD</application> build
	    script.</para>
	</callout>

	<callout arearefs="nbsd-sh">
	  <para xml:lang="en">Start the build process.</para>
	</callout>

	<callout arearefs="nbsd-cd2">
	  <para xml:lang="en">Change the current directory to the place where the
	    built images are located.</para>
	</callout>

	<callout arearefs="nbsd-dd">
	  <para xml:lang="en">Install <application>NanoBSD</application> onto the
	    storage medium.</para>
	</callout>
      </calloutlist>
    </sect2>

    <sect2>
      <title xml:lang="en">Customizing a NanoBSD Image</title>

      <para xml:lang="en">This is probably the most important and most interesting
	feature of <application>NanoBSD</application>.  This is also
	where you will be spending most of the time when
	developing with <application>NanoBSD</application>.</para>

      <para xml:lang="en">Invocation of the following command will force the
	<filename>nanobsd.sh</filename> to read its configuration from
	<filename>myconf.nano</filename> located in the current
	directory:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>sh nanobsd.sh -c myconf.nano</userinput></screen>

      <para xml:lang="en">Customization is done in two ways:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en">Configuration options</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">Custom functions</para>
	</listitem>
      </itemizedlist>

      <sect3>
	<title xml:lang="en">Configuration Options</title>

	<para xml:lang="en">With configuration settings, it is possible to configure
	  options passed to both the
	  <buildtarget xml:lang="en">buildworld</buildtarget> and
	  <buildtarget xml:lang="en">installworld</buildtarget> stages of the
	  <application>NanoBSD</application> build process, as well as
	  internal options passed to the main build process of
	  <application>NanoBSD</application>.  Through these options
	  it is possible to cut the system down, so it will fit on as
	  little as 64MB.  You can use the configuration options to
	  trim down FreeBSD even more, until it will consists of just the
	  kernel and two or three files in the userland.</para>

	<para xml:lang="en">The configuration file consists of configuration
	  options, which override the default values.  The most
	  important directives are:</para>

	<itemizedlist>
	  <listitem>
	    <para xml:lang="en"><literal>NANO_NAME</literal> — Name of build
	      (used to construct the workdir names).</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><literal>NANO_SRC</literal> — Path to the
	      source tree used to build the image.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><literal>NANO_KERNEL</literal> — Name of
	      kernel configuration file used to build kernel.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><literal>CONF_BUILD</literal> — Options passed
	      to the <buildtarget xml:lang="en">buildworld</buildtarget> stage of
	      the build.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><literal>CONF_INSTALL</literal> — Options
	      passed to the <buildtarget xml:lang="en">installworld</buildtarget>
	      stage of the build.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><literal>CONF_WORLD</literal> — Options passed
	      to both the <buildtarget xml:lang="en">buildworld</buildtarget> and
	      the <buildtarget xml:lang="en">installworld</buildtarget> stage of the
	      build.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><literal>FlashDevice</literal> — Defines what
	      type of media to use.  Check
	      <filename>FlashDevice.sub</filename> for more
	      details.</para>
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3>
	<title xml:lang="en">Custom Functions</title>

	<para xml:lang="en">It is possible to fine-tune
	  <application>NanoBSD</application> using shell functions in
	  the configuration file.  The following example illustrates
	  the basic model of custom functions:</para>

	<programlisting xml:lang="en">cust_foo () (
	echo "bar=baz" &gt; \
		${NANO_WORLDDIR}/etc/foo
)
customize_cmd cust_foo</programlisting>

	<para xml:lang="en">A more useful example of a customization function is the
	  following, which changes the default size of the
	  <filename>/etc</filename> directory from 5MB to 30MB:</para>

	<programlisting xml:lang="en">cust_etc_size () (
	cd ${NANO_WORLDDIR}/conf
	echo 30000 &gt; default/etc/md_size
)
customize_cmd cust_etc_size</programlisting>

	<para xml:lang="en">There are a few default pre-defined customization
	  functions ready for use:</para>

	<itemizedlist>
	  <listitem>
	    <para xml:lang="en"><literal>cust_comconsole</literal> — Disables
	      <citerefentry><refentrytitle>getty</refentrytitle><manvolnum>8</manvolnum></citerefentry> on the VGA devices (the
	      <filename>/dev/ttyv*</filename> device nodes) and
	      enables the use of the COM1 serial port as the system
	      console.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><literal>cust_allow_ssh_root</literal> — Allow
	      <systemitem class="username">root</systemitem> to login
	      via <citerefentry><refentrytitle>sshd</refentrytitle><manvolnum>8</manvolnum></citerefentry>.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><literal>cust_install_files</literal> —
	      Installs files from the
	      <filename>nanobsd/Files</filename>
	      directory, which contains some useful scripts for system
	      administration.</para>
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3>
	<title xml:lang="en">Adding Packages</title>

	<para xml:lang="en">Packages can be added to a
	  <application>NanoBSD</application> image using a custom
	  function.  The following function will install all the
	  packages located in
	  <filename>/usr/src/tools/tools/nanobsd/packages</filename>:</para>

	<programlisting xml:lang="en">install_packages () (
mkdir -p ${NANO_WORLDDIR}/packages
cp /usr/src/tools/tools/nanobsd/packages/* ${NANO_WORLDDIR}/packages
cp $(which pkg-static) ${NANO_WORLDDIR}/
chroot ${NANO_WORLDDIR} sh -c 'cd packages; /pkg-static add *;cd ..;'
rm -rf ${NANO_WORLDDIR}/packages ${NANO_WORLDDIR}/pkg-static
)
customize_cmd install_packages</programlisting>
      </sect3>

      <sect3>
	<title xml:lang="en">Configuration File Example</title>

	<para xml:lang="en">A complete example of a configuration file for building
	  a custom <application>NanoBSD</application> image can
	  be:</para>

	<programlisting xml:lang="en">NANO_NAME=custom
NANO_SRC=/usr/src
NANO_KERNEL=MYKERNEL
NANO_IMAGES=2

CONF_BUILD='
WITHOUT_KLDLOAD=YES
WITHOUT_NETGRAPH=YES
WITHOUT_PAM=YES
'

CONF_INSTALL='
WITHOUT_ACPI=YES
WITHOUT_BLUETOOTH=YES
WITHOUT_FORTRAN=YES
WITHOUT_HTML=YES
WITHOUT_LPR=YES
WITHOUT_MAN=YES
WITHOUT_SENDMAIL=YES
WITHOUT_SHAREDOCS=YES
WITHOUT_EXAMPLES=YES
WITHOUT_INSTALLLIB=YES
WITHOUT_CALENDAR=YES
WITHOUT_MISC=YES
WITHOUT_SHARE=YES
'

CONF_WORLD='
WITHOUT_BIND=YES
WITHOUT_MODULES=YES
WITHOUT_KERBEROS=YES
WITHOUT_GAMES=YES
WITHOUT_RESCUE=YES
WITHOUT_LOCALES=YES
WITHOUT_SYSCONS=YES
WITHOUT_INFO=YES
'

FlashDevice SanDisk 1G

cust_nobeastie() (
	touch ${NANO_WORLDDIR}/boot/loader.conf
	echo "beastie_disable=\"YES\"" &gt;&gt; ${NANO_WORLDDIR}/boot/loader.conf
)

customize_cmd cust_comconsole
customize_cmd cust_install_files
customize_cmd cust_allow_ssh_root
customize_cmd cust_nobeastie</programlisting>
      </sect3>
    </sect2>

    <sect2>
      <title xml:lang="en">Updating NanoBSD</title>

      <para xml:lang="en">The update process of <application>NanoBSD</application>
	is relatively simple:</para>

      <procedure>
	<step>
	  <para xml:lang="en">Build a new <application>NanoBSD</application> image,
	    as usual.</para>
	</step>

	<step>
	  <para xml:lang="en">Upload the new image into an unused partition of a
	    running <application>NanoBSD</application>
	    appliance.</para>

	  <para xml:lang="en">The most important difference of this step from the
	    initial <application>NanoBSD</application> installation is
	    that now instead of using <filename>_.disk.full</filename>
	    (which contains an image of the entire disk), the
	    <filename>_.disk.image</filename> image is installed
	    (which contains an image of a single system
	    partition).</para>
	</step>

	<step>
	  <para xml:lang="en">Reboot, and start the system from the newly installed
	    partition.</para>
	</step>

	<step>
	  <para xml:lang="en">If all goes well, the upgrade is finished.</para>
	</step>

	<step>
	  <para xml:lang="en">If anything goes wrong, reboot back into the previous
	    partition (which contains the old, working image), to
	    restore system functionality as fast as possible.  Fix any
	    problems of the new build, and repeat the process.</para>
	</step>
      </procedure>

      <para xml:lang="en">To install new image onto the running
	<application>NanoBSD</application> system, it is possible to
	use either the <filename>updatep1</filename> or
	<filename>updatep2</filename> script located in the
	<filename>/root</filename> directory, depending from which
	partition is running the current system.</para>

      <para xml:lang="en">According to which services are available on host serving
	new <application>NanoBSD</application> image and what type of
	transfer is preferred, it is possible to examine one of these
	three ways:</para>

      <sect3>
	<title xml:lang="en">Using <citerefentry><refentrytitle>ftp</refentrytitle><manvolnum>1</manvolnum></citerefentry></title>

	<para xml:lang="en">If the transfer speed is in first place, use this
	  example:</para>

	<screen xml:lang="en"><prompt>#</prompt> <userinput>ftp myhost
get _.disk.image "| sh updatep1"</userinput></screen>
      </sect3>

      <sect3>
	<title xml:lang="en">Using <citerefentry><refentrytitle>ssh</refentrytitle><manvolnum>1</manvolnum></citerefentry></title>

	<para xml:lang="en">If a secure transfer is preferred, consider using this
	  example:</para>

	<screen xml:lang="en"><prompt>#</prompt> <userinput>ssh myhost cat _.disk.image.gz | zcat | sh updatep1</userinput></screen>
      </sect3>

      <sect3>
	<title xml:lang="en">Using <citerefentry><refentrytitle>nc</refentrytitle><manvolnum>1</manvolnum></citerefentry></title>

	<para xml:lang="en">Try this example if the remote host is not running
	  neither <citerefentry><refentrytitle>ftpd</refentrytitle><manvolnum>8</manvolnum></citerefentry> or <citerefentry><refentrytitle>sshd</refentrytitle><manvolnum>8</manvolnum></citerefentry> service:</para>

	<procedure>
	  <step>
	    <para xml:lang="en">At first, open a TCP listener on host serving the
	      image and make it send the image to client:</para>

	    <screen xml:lang="en">myhost<prompt>#</prompt> <userinput>nc -l <replaceable>2222</replaceable> &lt; _.disk.image</userinput></screen>

	    <note>
	      <para xml:lang="en">Make sure that the used port is not blocked to
		receive incoming connections from
		<application>NanoBSD</application> host by
		firewall.</para>
	    </note>
	  </step>

	  <step>
	    <para xml:lang="en">Connect to the host serving new image and execute
	      <filename>updatep1</filename> script:</para>

	    <screen xml:lang="en"><prompt>#</prompt> <userinput>nc myhost <replaceable>2222</replaceable> | sh updatep1</userinput></screen>
	  </step>
	</procedure>
      </sect3>
    </sect2>
  </sect1>

  <index/>
</article>
